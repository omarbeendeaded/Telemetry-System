
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a180  0800a180  0000c00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a180  0800a180  0000b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a188  0800a188  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a188  0800a188  0000b188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a18c  0800a18c  0000b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a190  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e0  2000000c  0800a19c  0000c00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024ec  0800a19c  0000c4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b95  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b3  00000000  00000000  0001ebd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00022388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfa  00000000  00000000  000234e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228b6  00000000  00000000  000241da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187c9  00000000  00000000  00046a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2de6  00000000  00000000  0005f259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012203f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  00122084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0012656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009c90 	.word	0x08009c90

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08009c90 	.word	0x08009c90

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <MX_CAN1_Init+0xac>)
 80004fa:	4a2a      	ldr	r2, [pc, #168]	@ (80005a4 <MX_CAN1_Init+0xb0>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000500:	220a      	movs	r2, #10
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000512:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000520:	2200      	movs	r2, #0
 8000522:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000524:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800052c:	2200      	movs	r2, #0
 800052e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000532:	2200      	movs	r2, #0
 8000534:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000538:	2200      	movs	r2, #0
 800053a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800053e:	2200      	movs	r2, #0
 8000540:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000542:	4817      	ldr	r0, [pc, #92]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000544:	f001 f89c 	bl	8001680 <HAL_CAN_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800054e:	f000 fa9e 	bl	8000a8e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000554:	2201      	movs	r2, #1
 8000556:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800055a:	2201      	movs	r2, #1
 800055c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800055e:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000566:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 800056a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000574:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000578:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000582:	2201      	movs	r2, #1
 8000584:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000586:	4908      	ldr	r1, [pc, #32]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000588:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800058a:	f001 f975 	bl	8001878 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000590:	f001 fa52 	bl	8001a38 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000594:	2110      	movs	r1, #16
 8000596:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000598:	f001 fbb4 	bl	8001d04 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000030 	.word	0x20000030
 80005a4:	40006400 	.word	0x40006400
 80005a8:	20000058 	.word	0x20000058

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <HAL_CAN_MspInit+0x94>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d134      	bne.n	8000638 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000606:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000618:	2309      	movs	r3, #9
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	4809      	ldr	r0, [pc, #36]	@ (8000648 <HAL_CAN_MspInit+0x9c>)
 8000624:	f002 fa74 	bl	8002b10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2015      	movs	r0, #21
 800062e:	f001 fe9a 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000632:	2015      	movs	r0, #21
 8000634:	f001 feb3 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40006400 	.word	0x40006400
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000

0800064c <HAL_CAN_RxFifo1MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO1, &RxHeader, RX_Message );
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000656:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f001 fa30 	bl	8001ac0 <HAL_CAN_GetRxMessage>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000660:	2104      	movs	r1, #4
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000664:	f002 fc01 	bl	8002e6a <HAL_GPIO_TogglePin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	20000080 	.word	0x20000080
 8000678:	40020400 	.word	0x40020400

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MX_DMA_Init+0x4c>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	203b      	movs	r0, #59	@ 0x3b
 80006a4:	f001 fe5f 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006a8:	203b      	movs	r0, #59	@ 0x3b
 80006aa:	f001 fe78 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2045      	movs	r0, #69	@ 0x45
 80006b4:	f001 fe57 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006b8:	2045      	movs	r0, #69	@ 0x45
 80006ba:	f001 fe70 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <MX_GPIO_Init+0x15c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a4f      	ldr	r2, [pc, #316]	@ (8000828 <MX_GPIO_Init+0x15c>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000828 <MX_GPIO_Init+0x15c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b49      	ldr	r3, [pc, #292]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a48      	ldr	r2, [pc, #288]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b46      	ldr	r3, [pc, #280]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b42      	ldr	r3, [pc, #264]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a41      	ldr	r2, [pc, #260]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b3f      	ldr	r3, [pc, #252]	@ (8000828 <MX_GPIO_Init+0x15c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <MX_GPIO_Init+0x15c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a3a      	ldr	r2, [pc, #232]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b38      	ldr	r3, [pc, #224]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a33      	ldr	r2, [pc, #204]	@ (8000828 <MX_GPIO_Init+0x15c>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <MX_GPIO_Init+0x15c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|CE_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f241 0104 	movw	r1, #4100	@ 0x1004
 8000774:	482d      	ldr	r0, [pc, #180]	@ (800082c <MX_GPIO_Init+0x160>)
 8000776:	f002 fb5f 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000780:	482a      	ldr	r0, [pc, #168]	@ (800082c <MX_GPIO_Init+0x160>)
 8000782:	f002 fb59 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTT_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTT_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4825      	ldr	r0, [pc, #148]	@ (8000830 <MX_GPIO_Init+0x164>)
 800079c:	f002 f9b8 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80007a0:	2302      	movs	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	481d      	ldr	r0, [pc, #116]	@ (800082c <MX_GPIO_Init+0x160>)
 80007b6:	f002 f9ab 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ba:	2304      	movs	r3, #4
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4816      	ldr	r0, [pc, #88]	@ (800082c <MX_GPIO_Init+0x160>)
 80007d2:	f002 f99d 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80007d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480f      	ldr	r0, [pc, #60]	@ (800082c <MX_GPIO_Init+0x160>)
 80007f0:	f002 f98e 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80007f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007fe:	2302      	movs	r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480a      	ldr	r0, [pc, #40]	@ (8000834 <MX_GPIO_Init+0x168>)
 800080a:	f002 f981 	bl	8002b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2007      	movs	r0, #7
 8000814:	f001 fda7 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000818:	2007      	movs	r0, #7
 800081a:	f001 fdc0 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fe8a 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f830 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f7ff ff42 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000848:	f7ff ff18 	bl	800067c <MX_DMA_Init>
  MX_CAN1_Init();
 800084c:	f7ff fe52 	bl	80004f4 <MX_CAN1_Init>
  MX_SPI2_Init();
 8000850:	f000 fd20 	bl	8001294 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000854:	f000 fbe6 	bl	8001024 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000858:	f005 fd96 	bl	8006388 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SD_Init();
 800085c:	f000 f88c 	bl	8000978 <SD_Init>
  SD_ClrFile();
 8000860:	f000 f8e0 	bl	8000a24 <SD_ClrFile>
  SD_Write("Hello\n");
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <main+0x5c>)
 8000866:	f000 f8a5 	bl	80009b4 <SD_Write>
  SD_Write("Full Test\n");
 800086a:	480b      	ldr	r0, [pc, #44]	@ (8000898 <main+0x60>)
 800086c:	f000 f8a2 	bl	80009b4 <SD_Write>
  nrf24l01p_tx_init(2500, _1Mbps);
 8000870:	2100      	movs	r1, #0
 8000872:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000876:	f000 f995 	bl	8000ba4 <nrf24l01p_tx_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(BUTT_GPIO_Port, BUTT_Pin))
 800087a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087e:	4807      	ldr	r0, [pc, #28]	@ (800089c <main+0x64>)
 8000880:	f002 fac2 	bl	8002e08 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f7      	beq.n	800087a <main+0x42>
	  {
        nrf24l01p_tx_transmit(RX_Message);
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <main+0x68>)
 800088c:	f000 f9b5 	bl	8000bfa <nrf24l01p_tx_transmit>
	  if(HAL_GPIO_ReadPin(BUTT_GPIO_Port, BUTT_Pin))
 8000890:	e7f3      	b.n	800087a <main+0x42>
 8000892:	bf00      	nop
 8000894:	08009ca8 	.word	0x08009ca8
 8000898:	08009cb0 	.word	0x08009cb0
 800089c:	40020800 	.word	0x40020800
 80008a0:	20000028 	.word	0x20000028

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	@ 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f009 f9c0 	bl	8009c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <SystemClock_Config+0xcc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a21      	ldr	r2, [pc, #132]	@ (8000974 <SystemClock_Config+0xd0>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <SystemClock_Config+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000914:	2308      	movs	r3, #8
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000918:	2348      	movs	r3, #72	@ 0x48
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000920:	2303      	movs	r3, #3
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fe89 	bl	8003644 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000938:	f000 f8a9 	bl	8000a8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2302      	movs	r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2102      	movs	r1, #2
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fab9 	bl	8002ed0 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000964:	f000 f893 	bl	8000a8e <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3750      	adds	r7, #80	@ 0x50
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <SD_Init>:

/* USER CODE BEGIN 4 */
static void SD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	//------------------[ Mount The SD Card ]--------------------
	FR_Status = f_mount(&FatFs, SDPath, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4909      	ldr	r1, [pc, #36]	@ (80009a4 <SD_Init+0x2c>)
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <SD_Init+0x30>)
 8000982:	f008 f92d 	bl	8008be0 <f_mount>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <SD_Init+0x34>)
 800098c:	701a      	strb	r2, [r3, #0]
	if (FR_Status != FR_OK)
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <SD_Init+0x34>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <SD_Init+0x28>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2104      	movs	r1, #4
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <SD_Init+0x38>)
 800099c:	f002 fa4c 	bl	8002e38 <HAL_GPIO_WritePin>
	}
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200022ac 	.word	0x200022ac
 80009a8:	200010cc 	.word	0x200010cc
 80009ac:	20002104 	.word	0x20002104
 80009b0:	40020400 	.word	0x40020400

080009b4 <SD_Write>:

static void SD_Write(char* data)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "canTest.txt", FA_WRITE | FA_READ | FA_OPEN_ALWAYS);
 80009bc:	2213      	movs	r2, #19
 80009be:	4915      	ldr	r1, [pc, #84]	@ (8000a14 <SD_Write+0x60>)
 80009c0:	4815      	ldr	r0, [pc, #84]	@ (8000a18 <SD_Write+0x64>)
 80009c2:	f008 f953 	bl	8008c6c <f_open>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <SD_Write+0x68>)
 80009cc:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <SD_Write+0x68>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <SD_Write+0x2c>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <SD_Write+0x6c>)
 80009dc:	f002 fa2c 	bl	8002e38 <HAL_GPIO_WritePin>
    }

    f_lseek(&Fil, f_size(&Fil));
 80009e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <SD_Write+0x64>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4619      	mov	r1, r3
 80009e6:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <SD_Write+0x64>)
 80009e8:	f008 fd44 	bl	8009474 <f_lseek>
    FR_Status = f_puts(data, &Fil);
 80009ec:	490a      	ldr	r1, [pc, #40]	@ (8000a18 <SD_Write+0x64>)
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f008 ffdb 	bl	80099aa <f_puts>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <SD_Write+0x68>)
 80009fa:	701a      	strb	r2, [r3, #0]

    FR_Status = f_close(&Fil);
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <SD_Write+0x64>)
 80009fe:	f008 fd0f 	bl	8009420 <f_close>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SD_Write+0x68>)
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08009cbc 	.word	0x08009cbc
 8000a18:	2000009c 	.word	0x2000009c
 8000a1c:	20002104 	.word	0x20002104
 8000a20:	40020400 	.word	0x40020400

08000a24 <SD_ClrFile>:

static void SD_ClrFile(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "canTest.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000a28:	220b      	movs	r2, #11
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <SD_ClrFile+0x3c>)
 8000a2c:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <SD_ClrFile+0x40>)
 8000a2e:	f008 f91d 	bl	8008c6c <f_open>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <SD_ClrFile+0x44>)
 8000a38:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <SD_ClrFile+0x44>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <SD_ClrFile+0x28>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2104      	movs	r1, #4
 8000a46:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <SD_ClrFile+0x48>)
 8000a48:	f002 f9f6 	bl	8002e38 <HAL_GPIO_WritePin>
    }

    FR_Status = f_close(&Fil);
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <SD_ClrFile+0x40>)
 8000a4e:	f008 fce7 	bl	8009420 <f_close>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SD_ClrFile+0x44>)
 8000a58:	701a      	strb	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08009cbc 	.word	0x08009cbc
 8000a64:	2000009c 	.word	0x2000009c
 8000a68:	20002104 	.word	0x20002104
 8000a6c:	40020400 	.word	0x40020400

08000a70 <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_tx_irq(); // clear interrupt flag
 8000a82:	f000 f8c5 	bl	8000c10 <nrf24l01p_tx_irq>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a92:	b672      	cpsid	i
}
 8000a94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <Error_Handler+0x8>
	...

08000a9c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa6:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <cs_high+0x14>)
 8000aa8:	f002 f9c6 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <cs_low>:

static void cs_low()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000abe:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <cs_low+0x14>)
 8000ac0:	f002 f9ba 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020400 	.word	0x40020400

08000acc <ce_high>:

static void ce_high()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad6:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <ce_high+0x14>)
 8000ad8:	f002 f9ae 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <ce_low>:

static void ce_low()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aee:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <ce_low+0x14>)
 8000af0:	f002 f9a2 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020400 	.word	0x40020400

08000afc <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000b0a:	f7ff ffd3 	bl	8000ab4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b0e:	f107 020e 	add.w	r2, r7, #14
 8000b12:	f107 010f 	add.w	r1, r7, #15
 8000b16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <read_register+0x48>)
 8000b20:	f004 fc14 	bl	800534c <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000b24:	f107 010d 	add.w	r1, r7, #13
 8000b28:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <read_register+0x48>)
 8000b30:	f004 faf3 	bl	800511a <HAL_SPI_Receive>
    cs_high();
 8000b34:	f7ff ffb2 	bl	8000a9c <cs_high>

    return read_val;
 8000b38:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000224c 	.word	0x2000224c

08000b48 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f043 0320 	orr.w	r3, r3, #32
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000b66:	f7ff ffa5 	bl	8000ab4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b6a:	f107 020e 	add.w	r2, r7, #14
 8000b6e:	f107 010f 	add.w	r1, r7, #15
 8000b72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <write_register+0x58>)
 8000b7c:	f004 fbe6 	bl	800534c <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000b80:	f107 010d 	add.w	r1, r7, #13
 8000b84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <write_register+0x58>)
 8000b8c:	f004 f981 	bl	8004e92 <HAL_SPI_Transmit>
    cs_high();
 8000b90:	f7ff ff84 	bl	8000a9c <cs_high>

    return write_val;
 8000b94:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000224c 	.word	0x2000224c

08000ba4 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000bb4:	f000 f850 	bl	8000c58 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000bb8:	f000 f8a2 	bl	8000d00 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8000bbc:	f000 f94c 	bl	8000e58 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f9d4 	bl	8000f70 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fa00 	bl	8000fd0 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f9e0 	bl	8000f96 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f000 f953 	bl	8000e82 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f000 f973 	bl	8000ec8 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f980 	bl	8000ee8 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000be8:	20fa      	movs	r0, #250	@ 0xfa
 8000bea:	f000 f999 	bl	8000f20 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000bee:	f7ff ff6d 	bl	8000acc <ce_high>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f892 	bl	8000d2c <nrf24l01p_write_tx_fifo>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000c16:	f000 f8dd 	bl	8000dd4 <nrf24l01p_get_status>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 0320 	and.w	r3, r3, #32
 8000c24:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d007      	beq.n	8000c3c <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <nrf24l01p_tx_irq+0x44>)
 8000c32:	f002 f91a 	bl	8002e6a <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8000c36:	f000 f8e7 	bl	8000e08 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8000c3a:	e007      	b.n	8000c4c <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <nrf24l01p_tx_irq+0x44>)
 8000c44:	f002 f8f8 	bl	8002e38 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8000c48:	f000 f8f2 	bl	8000e30 <nrf24l01p_clear_max_rt>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40020800 	.word	0x40020800

08000c58 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000c5c:	f7ff ff1e 	bl	8000a9c <cs_high>
    ce_low();
 8000c60:	f7ff ff40 	bl	8000ae4 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000c64:	2108      	movs	r1, #8
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff6e 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000c6c:	213f      	movs	r1, #63	@ 0x3f
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff ff6a 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000c74:	2103      	movs	r1, #3
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ff66 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f7ff ff62 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000c84:	2103      	movs	r1, #3
 8000c86:	2004      	movs	r0, #4
 8000c88:	f7ff ff5e 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f7ff ff5a 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000c94:	2107      	movs	r1, #7
 8000c96:	2006      	movs	r0, #6
 8000c98:	f7ff ff56 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000c9c:	217e      	movs	r1, #126	@ 0x7e
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f7ff ff52 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2011      	movs	r0, #17
 8000ca8:	f7ff ff4e 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000cac:	2100      	movs	r1, #0
 8000cae:	2011      	movs	r0, #17
 8000cb0:	f7ff ff4a 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2012      	movs	r0, #18
 8000cb8:	f7ff ff46 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2013      	movs	r0, #19
 8000cc0:	f7ff ff42 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f7ff ff3e 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2015      	movs	r0, #21
 8000cd0:	f7ff ff3a 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2016      	movs	r0, #22
 8000cd8:	f7ff ff36 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000cdc:	2111      	movs	r1, #17
 8000cde:	2017      	movs	r0, #23
 8000ce0:	f7ff ff32 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f7ff ff2e 	bl	8000b48 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000cec:	2100      	movs	r1, #0
 8000cee:	201d      	movs	r0, #29
 8000cf0:	f7ff ff2a 	bl	8000b48 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000cf4:	f000 f83e 	bl	8000d74 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000cf8:	f000 f854 	bl	8000da4 <nrf24l01p_flush_tx_fifo>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fef8 	bl	8000afc <read_register>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ff13 	bl	8000b48 <write_register>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000d34:	23a0      	movs	r3, #160	@ 0xa0
 8000d36:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000d38:	f7ff febc 	bl	8000ab4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000d3c:	f107 020e 	add.w	r2, r7, #14
 8000d40:	f107 010f 	add.w	r1, r7, #15
 8000d44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <nrf24l01p_write_tx_fifo+0x44>)
 8000d4e:	f004 fafd 	bl	800534c <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000d52:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d56:	2208      	movs	r2, #8
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <nrf24l01p_write_tx_fifo+0x44>)
 8000d5c:	f004 f899 	bl	8004e92 <HAL_SPI_Transmit>
    cs_high(); 
 8000d60:	f7ff fe9c 	bl	8000a9c <cs_high>

    return status;
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000224c 	.word	0x2000224c

08000d74 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000d7a:	23e2      	movs	r3, #226	@ 0xe2
 8000d7c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000d7e:	f7ff fe99 	bl	8000ab4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000d82:	1dba      	adds	r2, r7, #6
 8000d84:	1df9      	adds	r1, r7, #7
 8000d86:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000d90:	f004 fadc 	bl	800534c <HAL_SPI_TransmitReceive>
    cs_high();
 8000d94:	f7ff fe82 	bl	8000a9c <cs_high>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000224c 	.word	0x2000224c

08000da4 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000daa:	23e1      	movs	r3, #225	@ 0xe1
 8000dac:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000dae:	f7ff fe81 	bl	8000ab4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000db2:	1dba      	adds	r2, r7, #6
 8000db4:	1df9      	adds	r1, r7, #7
 8000db6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000dc0:	f004 fac4 	bl	800534c <HAL_SPI_TransmitReceive>
    cs_high();
 8000dc4:	f7ff fe6a 	bl	8000a9c <cs_high>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000224c 	.word	0x2000224c

08000dd4 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000dde:	f7ff fe69 	bl	8000ab4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000de2:	1dba      	adds	r2, r7, #6
 8000de4:	1df9      	adds	r1, r7, #7
 8000de6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <nrf24l01p_get_status+0x30>)
 8000df0:	f004 faac 	bl	800534c <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000df4:	f7ff fe52 	bl	8000a9c <cs_high>

    return status;
 8000df8:	79bb      	ldrb	r3, [r7, #6]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000224c 	.word	0x2000224c

08000e08 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000e0e:	f7ff ffe1 	bl	8000dd4 <nrf24l01p_get_status>
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2007      	movs	r0, #7
 8000e24:	f7ff fe90 	bl	8000b48 <write_register>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000e36:	f7ff ffcd 	bl	8000dd4 <nrf24l01p_get_status>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f7ff fe7c 	bl	8000b48 <write_register>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fe4c 	bl	8000afc <read_register>
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fe67 	bl	8000b48 <write_register>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fe35 	bl	8000afc <read_register>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d002      	beq.n	8000ea2 <nrf24l01p_set_crc_length+0x20>
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d005      	beq.n	8000eac <nrf24l01p_set_crc_length+0x2a>
 8000ea0:	e009      	b.n	8000eb6 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	73fb      	strb	r3, [r7, #15]
            break;
 8000eaa:	e004      	b.n	8000eb6 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	73fb      	strb	r3, [r7, #15]
            break;
 8000eb4:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe44 	bl	8000b48 <write_register>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2003      	movs	r0, #3
 8000edc:	f7ff fe34 	bl	8000b48 <write_register>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff fe02 	bl	8000afc <read_register>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f063 030f 	orn	r3, r3, #15
 8000f02:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2004      	movs	r0, #4
 8000f12:	f7ff fe19 	bl	8000b48 <write_register>
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff fde6 	bl	8000afc <read_register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 030f 	orr.w	r3, r3, #15
 8000f3a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	b25a      	sxtb	r2, r3
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff fdf3 	bl	8000b48 <write_register>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	10624dd3 	.word	0x10624dd3

08000f70 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000f80:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	2005      	movs	r0, #5
 8000f8a:	f7ff fddd 	bl	8000b48 <write_register>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f7ff fdab 	bl	8000afc <read_register>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f023 0306 	bic.w	r3, r3, #6
 8000fac:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff fdc0 	bl	8000b48 <write_register>
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f7ff fd8e 	bl	8000afc <read_register>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000fe6:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d00a      	beq.n	8001004 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	dc0e      	bgt.n	8001010 <nrf24l01p_set_rf_air_data_rate+0x40>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10a      	bne.n	8001010 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	73fb      	strb	r3, [r7, #15]
            break;
 8001002:	e005      	b.n	8001010 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	73fb      	strb	r3, [r7, #15]
            break;
 800100c:	e000      	b.n	8001010 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 800100e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	4619      	mov	r1, r3
 8001014:	2006      	movs	r0, #6
 8001016:	f7ff fd97 	bl	8000b48 <write_register>
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 800102a:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <MX_SDIO_SD_Init+0x3c>)
 800102c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <MX_SDIO_SD_Init+0x38>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20002108 	.word	0x20002108
 8001060:	40012c00 	.word	0x40012c00

08001064 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09a      	sub	sp, #104	@ 0x68
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	223c      	movs	r2, #60	@ 0x3c
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f008 fdd7 	bl	8009c38 <memset>
  if(sdHandle->Instance==SDIO)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a79      	ldr	r2, [pc, #484]	@ (8001274 <HAL_SD_MspInit+0x210>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 80ea 	bne.w	800126a <HAL_SD_MspInit+0x206>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001096:	2360      	movs	r3, #96	@ 0x60
 8001098:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800109a:	2300      	movs	r3, #0
 800109c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f8fe 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010b2:	f7ff fcec 	bl	8000a8e <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a6e      	ldr	r2, [pc, #440]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b68      	ldr	r3, [pc, #416]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a67      	ldr	r2, [pc, #412]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b65      	ldr	r3, [pc, #404]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b61      	ldr	r3, [pc, #388]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a60      	ldr	r2, [pc, #384]	@ (8001278 <HAL_SD_MspInit+0x214>)
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001278 <HAL_SD_MspInit+0x214>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800110a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800110e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800111c:	230c      	movs	r3, #12
 800111e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001124:	4619      	mov	r1, r3
 8001126:	4855      	ldr	r0, [pc, #340]	@ (800127c <HAL_SD_MspInit+0x218>)
 8001128:	f001 fcf2 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800113e:	230c      	movs	r3, #12
 8001140:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001146:	4619      	mov	r1, r3
 8001148:	484c      	ldr	r0, [pc, #304]	@ (800127c <HAL_SD_MspInit+0x218>)
 800114a:	f001 fce1 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114e:	2304      	movs	r3, #4
 8001150:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800115e:	230c      	movs	r3, #12
 8001160:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	4845      	ldr	r0, [pc, #276]	@ (8001280 <HAL_SD_MspInit+0x21c>)
 800116a:	f001 fcd1 	bl	8002b10 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800116e:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <HAL_SD_MspInit+0x220>)
 8001170:	4a45      	ldr	r2, [pc, #276]	@ (8001288 <HAL_SD_MspInit+0x224>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001174:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <HAL_SD_MspInit+0x220>)
 8001176:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800117a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117c:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <HAL_SD_MspInit+0x220>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b40      	ldr	r3, [pc, #256]	@ (8001284 <HAL_SD_MspInit+0x220>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b3e      	ldr	r3, [pc, #248]	@ (8001284 <HAL_SD_MspInit+0x220>)
 800118a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001190:	4b3c      	ldr	r3, [pc, #240]	@ (8001284 <HAL_SD_MspInit+0x220>)
 8001192:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001196:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001198:	4b3a      	ldr	r3, [pc, #232]	@ (8001284 <HAL_SD_MspInit+0x220>)
 800119a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80011a0:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011a2:	2220      	movs	r2, #32
 80011a4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a6:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ac:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011b2:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011b4:	2203      	movs	r2, #3
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011c0:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80011c8:	482e      	ldr	r0, [pc, #184]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011ca:	f001 f903 	bl	80023d4 <HAL_DMA_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_SD_MspInit+0x174>
    {
      Error_Handler();
 80011d4:	f7ff fc5b 	bl	8000a8e <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011de:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <HAL_SD_MspInit+0x220>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <HAL_SD_MspInit+0x228>)
 80011e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001290 <HAL_SD_MspInit+0x22c>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80011ea:	4b28      	ldr	r3, [pc, #160]	@ (800128c <HAL_SD_MspInit+0x228>)
 80011ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011f0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <HAL_SD_MspInit+0x228>)
 80011f4:	2240      	movs	r2, #64	@ 0x40
 80011f6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <HAL_SD_MspInit+0x228>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001200:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001204:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001208:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800120c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001210:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001214:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001218:	2220      	movs	r2, #32
 800121a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_SD_MspInit+0x228>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001224:	2204      	movs	r2, #4
 8001226:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_SD_MspInit+0x228>)
 800122a:	2203      	movs	r2, #3
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001230:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001234:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001238:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001240:	f001 f8c8 	bl	80023d4 <HAL_DMA_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_SD_MspInit+0x1ea>
    {
      Error_Handler();
 800124a:	f7ff fc20 	bl	8000a8e <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <HAL_SD_MspInit+0x228>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2031      	movs	r0, #49	@ 0x31
 8001260:	f001 f881 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001264:	2031      	movs	r0, #49	@ 0x31
 8001266:	f001 f89a 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800126a:	bf00      	nop
 800126c:	3768      	adds	r7, #104	@ 0x68
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40012c00 	.word	0x40012c00
 8001278:	40023800 	.word	0x40023800
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	2000218c 	.word	0x2000218c
 8001288:	40026458 	.word	0x40026458
 800128c:	200021ec 	.word	0x200021ec
 8001290:	400264a0 	.word	0x400264a0

08001294 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_SPI2_Init+0x64>)
 800129a:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <MX_SPI2_Init+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012c8:	2210      	movs	r2, #16
 80012ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <MX_SPI2_Init+0x64>)
 80012e6:	f003 fd4b 	bl	8004d80 <HAL_SPI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012f0:	f7ff fbcd 	bl	8000a8e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000224c 	.word	0x2000224c
 80012fc:	40003800 	.word	0x40003800

08001300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a28      	ldr	r2, [pc, #160]	@ (80013c0 <HAL_SPI_MspInit+0xc0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d14a      	bne.n	80013b8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a18      	ldr	r2, [pc, #96]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_SPI_MspInit+0xc4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001386:	2305      	movs	r3, #5
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <HAL_SPI_MspInit+0xc8>)
 8001392:	f001 fbbd 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a8:	2305      	movs	r3, #5
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <HAL_SPI_MspInit+0xcc>)
 80013b4:	f001 fbac 	bl	8002b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	@ 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40003800 	.word	0x40003800
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020400 	.word	0x40020400

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <NMI_Handler+0x4>

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <MemManage_Handler+0x4>

08001438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <UsageFault_Handler+0x4>

08001448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001476:	f000 f8bf 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}

0800147e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001482:	2002      	movs	r0, #2
 8001484:	f001 fd0c 	bl	8002ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <CAN1_RX1_IRQHandler+0x10>)
 8001492:	f000 fc5d 	bl	8001d50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000030 	.word	0x20000030

080014a0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <SDIO_IRQHandler+0x10>)
 80014a6:	f002 fdc3 	bl	8004030 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20002108 	.word	0x20002108

080014b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <DMA2_Stream3_IRQHandler+0x10>)
 80014ba:	f001 f8b3 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000218c 	.word	0x2000218c

080014c8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <DMA2_Stream6_IRQHandler+0x10>)
 80014ce:	f001 f8a9 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200021ec 	.word	0x200021ec

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001538 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f008 fb8b 	bl	8009c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f981 	bl	8000838 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001538:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001544:	0800a190 	.word	0x0800a190
  ldr r2, =_sbss
 8001548:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800154c:	200024ec 	.word	0x200024ec

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 fee7 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff ff22 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 feff 	bl	80023ba <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 fec7 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	@ (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	200022a4 	.word	0x200022a4

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200022a4 	.word	0x200022a4

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0ed      	b.n	800186e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe ff84 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff ffb4 	bl	8001620 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ba:	e012      	b.n	80016e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016bc:	f7ff ffb0 	bl	8001620 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d90b      	bls.n	80016e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0c5      	b.n	800186e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0e5      	beq.n	80016bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0202 	bic.w	r2, r2, #2
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001700:	f7ff ff8e 	bl	8001620 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001706:	e012      	b.n	800172e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001708:	f7ff ff8a 	bl	8001620 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d90b      	bls.n	800172e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e09f      	b.n	800186e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e5      	bne.n	8001708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e007      	b.n	8001766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e5b      	ldrb	r3, [r3, #25]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e007      	b.n	8001790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800178e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7e9b      	ldrb	r3, [r3, #26]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e007      	b.n	80017ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0220 	bic.w	r2, r2, #32
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7edb      	ldrb	r3, [r3, #27]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0210 	bic.w	r2, r2, #16
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0210 	orr.w	r2, r2, #16
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f1b      	ldrb	r3, [r3, #28]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0208 	orr.w	r2, r2, #8
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e007      	b.n	800180e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7f5b      	ldrb	r3, [r3, #29]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e007      	b.n	8001838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	ea42 0103 	orr.w	r1, r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001890:	7cfb      	ldrb	r3, [r7, #19]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d003      	beq.n	800189e <HAL_CAN_ConfigFilter+0x26>
 8001896:	7cfb      	ldrb	r3, [r7, #19]
 8001898:	2b02      	cmp	r3, #2
 800189a:	f040 80be 	bne.w	8001a1a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800189e:	4b65      	ldr	r3, [pc, #404]	@ (8001a34 <HAL_CAN_ConfigFilter+0x1bc>)
 80018a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018b8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2201      	movs	r2, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d123      	bne.n	8001948 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001922:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3248      	adds	r2, #72	@ 0x48
 8001928:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800193c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193e:	6979      	ldr	r1, [r7, #20]
 8001940:	3348      	adds	r3, #72	@ 0x48
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d122      	bne.n	8001996 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	431a      	orrs	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001970:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3248      	adds	r2, #72	@ 0x48
 8001976:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800198a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800198c:	6979      	ldr	r1, [r7, #20]
 800198e:	3348      	adds	r3, #72	@ 0x48
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019dc:	e007      	b.n	80019ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a0c:	f023 0201 	bic.w	r2, r3, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e006      	b.n	8001a28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40006400 	.word	0x40006400

08001a38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d12e      	bne.n	8001aaa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fddc 	bl	8001620 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a6a:	e012      	b.n	8001a92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a6c:	f7ff fdd8 	bl	8001620 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d90b      	bls.n	8001a92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2205      	movs	r2, #5
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e012      	b.n	8001ab8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e5      	bne.n	8001a6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e006      	b.n	8001ab8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d003      	beq.n	8001ae4 <HAL_CAN_GetRxMessage+0x24>
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	f040 8103 	bne.w	8001cea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10e      	bne.n	8001b08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d116      	bne.n	8001b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0f7      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0e8      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	331b      	adds	r3, #27
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0204 	and.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	331b      	adds	r3, #27
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0d5b      	lsrs	r3, r3, #21
 8001b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e00b      	b.n	8001b76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	331b      	adds	r3, #27
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	331b      	adds	r3, #27
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0202 	and.w	r2, r3, #2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	331b      	adds	r3, #27
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	e00b      	b.n	8001bc4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	331b      	adds	r3, #27
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3304      	adds	r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	331b      	adds	r3, #27
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	331b      	adds	r3, #27
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0a1a      	lsrs	r2, r3, #8
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0c1a      	lsrs	r2, r3, #16
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e1a      	lsrs	r2, r3, #24
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3303      	adds	r3, #3
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0a1a      	lsrs	r2, r3, #8
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3305      	adds	r3, #5
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0c1a      	lsrs	r2, r3, #16
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e1a      	lsrs	r2, r3, #24
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3307      	adds	r3, #7
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d108      	bne.n	8001cd6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	e007      	b.n	8001ce6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e006      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
  }
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d002      	beq.n	8001d22 <HAL_CAN_ActivateNotification+0x1e>
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d109      	bne.n	8001d36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6959      	ldr	r1, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e006      	b.n	8001d44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
  }
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d07c      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f983 	bl	80020be <HAL_CAN_TxMailbox0CompleteCallback>
 8001db8:	e016      	b.n	8001de8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e00c      	b.n	8001de8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	e002      	b.n	8001de8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f989 	bl	80020fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f963 	bl	80020d2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e0c:	e016      	b.n	8001e3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	e00c      	b.n	8001e3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e34:	e002      	b.n	8001e3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f969 	bl	800210e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d024      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f943 	bl	80020e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e60:	e016      	b.n	8001e90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	e00c      	b.n	8001e90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e88:	e002      	b.n	8001e90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f949 	bl	8002122 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f93a 	bl	800214a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f921 	bl	8002136 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f912 	bl	800215e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fb7a 	bl	800064c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2210      	movs	r2, #16
 8001f72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8fc 	bl	8002172 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2208      	movs	r2, #8
 8001f94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8f5 	bl	8002186 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07b      	beq.n	800209e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d072      	beq.n	8002096 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800200a:	2b00      	cmp	r3, #0
 800200c:	d043      	beq.n	8002096 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03e      	beq.n	8002096 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800201e:	2b60      	cmp	r3, #96	@ 0x60
 8002020:	d02b      	beq.n	800207a <HAL_CAN_IRQHandler+0x32a>
 8002022:	2b60      	cmp	r3, #96	@ 0x60
 8002024:	d82e      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 8002026:	2b50      	cmp	r3, #80	@ 0x50
 8002028:	d022      	beq.n	8002070 <HAL_CAN_IRQHandler+0x320>
 800202a:	2b50      	cmp	r3, #80	@ 0x50
 800202c:	d82a      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 800202e:	2b40      	cmp	r3, #64	@ 0x40
 8002030:	d019      	beq.n	8002066 <HAL_CAN_IRQHandler+0x316>
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	d826      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 8002036:	2b30      	cmp	r3, #48	@ 0x30
 8002038:	d010      	beq.n	800205c <HAL_CAN_IRQHandler+0x30c>
 800203a:	2b30      	cmp	r3, #48	@ 0x30
 800203c:	d822      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 800203e:	2b10      	cmp	r3, #16
 8002040:	d002      	beq.n	8002048 <HAL_CAN_IRQHandler+0x2f8>
 8002042:	2b20      	cmp	r3, #32
 8002044:	d005      	beq.n	8002052 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002046:	e01d      	b.n	8002084 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002050:	e019      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800205a:	e014      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	f043 0320 	orr.w	r3, r3, #32
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002064:	e00f      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800206e:	e00a      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002078:	e005      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002082:	e000      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            break;
 8002084:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002094:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f872 	bl	800219a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	@ 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	@ (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	@ (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	@ (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	@ 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff8e 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	@ (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff29 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff3e 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff8e 	bl	80022a4 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff31 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff f91e 	bl	8001620 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e099      	b.n	8002524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	e00f      	b.n	8002432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002412:	f7ff f905 	bl	8001620 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b05      	cmp	r3, #5
 800241e:	d908      	bls.n	8002432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2203      	movs	r2, #3
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e078      	b.n	8002524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e8      	bne.n	8002412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4b38      	ldr	r3, [pc, #224]	@ (800252c <HAL_DMA_Init+0x158>)
 800244c:	4013      	ands	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	2b04      	cmp	r3, #4
 800248a:	d107      	bne.n	800249c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	4313      	orrs	r3, r2
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d117      	bne.n	80024f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa9d 	bl	8002a18 <DMA_CheckFifoParam>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	@ 0x40
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024f2:	2301      	movs	r3, #1
 80024f4:	e016      	b.n	8002524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa54 	bl	80029ac <DMA_CalcBaseAndBitshift>
 8002504:	4603      	mov	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250c:	223f      	movs	r2, #63	@ 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	f010803f 	.word	0xf010803f

08002530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Start_IT+0x26>
 8002552:	2302      	movs	r3, #2
 8002554:	e040      	b.n	80025d8 <HAL_DMA_Start_IT+0xa8>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d12f      	bne.n	80025ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f9e6 	bl	8002950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	223f      	movs	r2, #63	@ 0x3f
 800258a:	409a      	lsls	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0216 	orr.w	r2, r2, #22
 800259e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e005      	b.n	80025d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00c      	b.n	8002618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002630:	4b8e      	ldr	r3, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x248>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a8e      	ldr	r2, [pc, #568]	@ (8002870 <HAL_DMA_IRQHandler+0x24c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2208      	movs	r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2204      	movs	r2, #4
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2204      	movs	r2, #4
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2210      	movs	r2, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2210      	movs	r2, #16
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e01f      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e016      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2220      	movs	r2, #32
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808f 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8087 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d136      	bne.n	800283c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	223f      	movs	r2, #63	@ 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07e      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }
        return;
 800283a:	e079      	b.n	8002930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	2b00      	cmp	r3, #0
 800285e:	d031      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e02c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000
 8002870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e01e      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2205      	movs	r2, #5
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d307      	bcc.n	800290c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f2      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x2cc>
 800290a:	e000      	b.n	800290e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800290c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
 800292e:	e000      	b.n	8002932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002930:	bf00      	nop
    }
  }
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800296c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d108      	bne.n	8002990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800298e:	e007      	b.n	80029a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3b10      	subs	r3, #16
 80029bc:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <DMA_CalcBaseAndBitshift+0x64>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029c6:	4a13      	ldr	r2, [pc, #76]	@ (8002a14 <DMA_CalcBaseAndBitshift+0x68>)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d909      	bls.n	80029ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	1d1a      	adds	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ec:	e007      	b.n	80029fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	aaaaaaab 	.word	0xaaaaaaab
 8002a14:	08009d24 	.word	0x08009d24

08002a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11f      	bne.n	8002a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d856      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xce>
 8002a38:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <DMA_CheckFifoParam+0x28>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a63 	.word	0x08002a63
 8002a48:	08002a51 	.word	0x08002a51
 8002a4c:	08002ae7 	.word	0x08002ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d046      	beq.n	8002aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e043      	b.n	8002aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a6a:	d140      	bne.n	8002aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a70:	e03d      	b.n	8002aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7a:	d121      	bne.n	8002ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d837      	bhi.n	8002af2 <DMA_CheckFifoParam+0xda>
 8002a82:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <DMA_CheckFifoParam+0x70>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002a9f 	.word	0x08002a9f
 8002a90:	08002a99 	.word	0x08002a99
 8002a94:	08002ab1 	.word	0x08002ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	e030      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d025      	beq.n	8002af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aae:	e022      	b.n	8002af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ab8:	d11f      	bne.n	8002afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002abe:	e01c      	b.n	8002afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d903      	bls.n	8002ace <DMA_CheckFifoParam+0xb6>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d003      	beq.n	8002ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002acc:	e018      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad2:	e015      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00e      	beq.n	8002afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e00b      	b.n	8002afe <DMA_CheckFifoParam+0xe6>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e00a      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e008      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e006      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e004      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
    }
  } 
  
  return status; 
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	e153      	b.n	8002dd4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	f040 8142 	bne.w	8002dce <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d005      	beq.n	8002b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d130      	bne.n	8002bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 0201 	and.w	r2, r3, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d017      	beq.n	8002c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d123      	bne.n	8002c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	08da      	lsrs	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3208      	adds	r2, #8
 8002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	220f      	movs	r2, #15
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	69b9      	ldr	r1, [r7, #24]
 8002c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0203 	and.w	r2, r3, #3
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 809c 	beq.w	8002dce <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <HAL_GPIO_Init+0x2dc>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4a53      	ldr	r2, [pc, #332]	@ (8002dec <HAL_GPIO_Init+0x2dc>)
 8002ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca6:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <HAL_GPIO_Init+0x2dc>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb2:	4a4f      	ldr	r2, [pc, #316]	@ (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_GPIO_Init+0x2e4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_GPIO_Init+0x1f6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a45      	ldr	r2, [pc, #276]	@ (8002df8 <HAL_GPIO_Init+0x2e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00d      	beq.n	8002d02 <HAL_GPIO_Init+0x1f2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a44      	ldr	r2, [pc, #272]	@ (8002dfc <HAL_GPIO_Init+0x2ec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a43      	ldr	r2, [pc, #268]	@ (8002e00 <HAL_GPIO_Init+0x2f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_GPIO_Init+0x1ea>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002d06:	2300      	movs	r3, #0
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	@ (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d26:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d50:	4b2c      	ldr	r3, [pc, #176]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d74:	4a23      	ldr	r2, [pc, #140]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d7a:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9e:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da4:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	f67f aea8 	bls.w	8002b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	@ 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e001      	b.n	8002e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e7c:	887a      	ldrh	r2, [r7, #2]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	041a      	lsls	r2, r3, #16
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43d9      	mvns	r1, r3
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	400b      	ands	r3, r1
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	619a      	str	r2, [r3, #24]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eaa:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fdd6 	bl	8000a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cc      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b68      	ldr	r3, [pc, #416]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d90c      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a58      	ldr	r2, [pc, #352]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e067      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b37      	ldr	r3, [pc, #220]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4934      	ldr	r1, [pc, #208]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fb2e 	bl	8001620 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fb2a 	bl	8001620 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20c      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	@ (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fa8e 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800
 8003090:	08009d14 	.word	0x08009d14
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a0:	b094      	sub	sp, #80	@ 0x50
 80030a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b4:	4b79      	ldr	r3, [pc, #484]	@ (800329c <HAL_RCC_GetSysClockFreq+0x200>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d00d      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x40>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	f200 80e1 	bhi.w	8003288 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ce:	e0db      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b73      	ldr	r3, [pc, #460]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d4:	e0db      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d6:	4b73      	ldr	r3, [pc, #460]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80030d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030da:	e0d8      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	4b6f      	ldr	r3, [pc, #444]	@ (800329c <HAL_RCC_GetSysClockFreq+0x200>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e6:	4b6d      	ldr	r3, [pc, #436]	@ (800329c <HAL_RCC_GetSysClockFreq+0x200>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f2:	4b6a      	ldr	r3, [pc, #424]	@ (800329c <HAL_RCC_GetSysClockFreq+0x200>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	2200      	movs	r2, #0
 80030fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003104:	633b      	str	r3, [r7, #48]	@ 0x30
 8003106:	2300      	movs	r3, #0
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
 800310a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	0159      	lsls	r1, r3, #5
 800311c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003120:	0150      	lsls	r0, r2, #5
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4621      	mov	r1, r4
 8003128:	1a51      	subs	r1, r2, r1
 800312a:	6139      	str	r1, [r7, #16]
 800312c:	4629      	mov	r1, r5
 800312e:	eb63 0301 	sbc.w	r3, r3, r1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003140:	4659      	mov	r1, fp
 8003142:	018b      	lsls	r3, r1, #6
 8003144:	4651      	mov	r1, sl
 8003146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800314a:	4651      	mov	r1, sl
 800314c:	018a      	lsls	r2, r1, #6
 800314e:	4651      	mov	r1, sl
 8003150:	ebb2 0801 	subs.w	r8, r2, r1
 8003154:	4659      	mov	r1, fp
 8003156:	eb63 0901 	sbc.w	r9, r3, r1
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800316a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800316e:	4690      	mov	r8, r2
 8003170:	4699      	mov	r9, r3
 8003172:	4623      	mov	r3, r4
 8003174:	eb18 0303 	adds.w	r3, r8, r3
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	462b      	mov	r3, r5
 800317c:	eb49 0303 	adc.w	r3, r9, r3
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800318e:	4629      	mov	r1, r5
 8003190:	024b      	lsls	r3, r1, #9
 8003192:	4621      	mov	r1, r4
 8003194:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003198:	4621      	mov	r1, r4
 800319a:	024a      	lsls	r2, r1, #9
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a2:	2200      	movs	r2, #0
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031ac:	f7fd f82a 	bl	8000204 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031b8:	e058      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ba:	4b38      	ldr	r3, [pc, #224]	@ (800329c <HAL_RCC_GetSysClockFreq+0x200>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	099b      	lsrs	r3, r3, #6
 80031c0:	2200      	movs	r2, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	4611      	mov	r1, r2
 80031c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031d4:	4642      	mov	r2, r8
 80031d6:	464b      	mov	r3, r9
 80031d8:	f04f 0000 	mov.w	r0, #0
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	0159      	lsls	r1, r3, #5
 80031e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e6:	0150      	lsls	r0, r2, #5
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4641      	mov	r1, r8
 80031ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80031f2:	4649      	mov	r1, r9
 80031f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003204:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003208:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800320c:	ebb2 040a 	subs.w	r4, r2, sl
 8003210:	eb63 050b 	sbc.w	r5, r3, fp
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	00eb      	lsls	r3, r5, #3
 800321e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003222:	00e2      	lsls	r2, r4, #3
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	4643      	mov	r3, r8
 800322a:	18e3      	adds	r3, r4, r3
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	464b      	mov	r3, r9
 8003230:	eb45 0303 	adc.w	r3, r5, r3
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003242:	4629      	mov	r1, r5
 8003244:	028b      	lsls	r3, r1, #10
 8003246:	4621      	mov	r1, r4
 8003248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800324c:	4621      	mov	r1, r4
 800324e:	028a      	lsls	r2, r1, #10
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	2200      	movs	r2, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	61fa      	str	r2, [r7, #28]
 800325c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003260:	f7fc ffd0 	bl	8000204 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4613      	mov	r3, r2
 800326a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_GetSysClockFreq+0x200>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	3301      	adds	r3, #1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800327c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800327e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003286:	e002      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800328a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800328c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003290:	4618      	mov	r0, r3
 8003292:	3750      	adds	r7, #80	@ 0x50
 8003294:	46bd      	mov	sp, r7
 8003296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80032c8:	4b87      	ldr	r3, [pc, #540]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ce:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4984      	ldr	r1, [pc, #528]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80032e6:	2301      	movs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80032f6:	4b7c      	ldr	r3, [pc, #496]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032fc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	4978      	ldr	r1, [pc, #480]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8083 	beq.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b6f      	ldr	r3, [pc, #444]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a6e      	ldr	r2, [pc, #440]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b6c      	ldr	r3, [pc, #432]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003342:	4b6a      	ldr	r3, [pc, #424]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a69      	ldr	r2, [pc, #420]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334e:	f7fe f967 	bl	8001620 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fe f963 	bl	8001620 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e162      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003368:	4b60      	ldr	r3, [pc, #384]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003374:	4b5c      	ldr	r3, [pc, #368]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337c:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	429a      	cmp	r2, r3
 8003390:	d028      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003392:	4b55      	ldr	r3, [pc, #340]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339c:	4b54      	ldr	r3, [pc, #336]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a2:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033a8:	4a4f      	ldr	r2, [pc, #316]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033ae:	4b4e      	ldr	r3, [pc, #312]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d114      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe f931 	bl	8001620 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe f92d 	bl	8001620 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e12a      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b43      	ldr	r3, [pc, #268]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f0:	d10d      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033f2:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003406:	4938      	ldr	r1, [pc, #224]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
 800340c:	e005      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800340e:	4b36      	ldr	r3, [pc, #216]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a35      	ldr	r2, [pc, #212]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003414:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003418:	6093      	str	r3, [r2, #8]
 800341a:	4b33      	ldr	r3, [pc, #204]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003426:	4930      	ldr	r1, [pc, #192]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003428:	4313      	orrs	r3, r2
 800342a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800343e:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003440:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800344e:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003454:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	4922      	ldr	r1, [pc, #136]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d011      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003470:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003476:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	491a      	ldr	r1, [pc, #104]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800348e:	d101      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80034a0:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	490e      	ldr	r1, [pc, #56]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d004      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b80      	cmp	r3, #128	@ 0x80
 80034c2:	f040 8091 	bne.w	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034c6:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034cc:	f7fe f8a8 	bl	8001620 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034d2:	e013      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034d4:	f7fe f8a4 	bl	8001620 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d90c      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0a3      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x386>
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000
 80034f0:	42470e40 	.word	0x42470e40
 80034f4:	424711e0 	.word	0x424711e0
 80034f8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e5      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003508:	4a4c      	ldr	r2, [pc, #304]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800354c:	d00e      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800356a:	d110      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	071b      	lsls	r3, r3, #28
 8003586:	492c      	ldr	r1, [pc, #176]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	019b      	lsls	r3, r3, #6
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	071b      	lsls	r3, r3, #28
 80035b4:	4920      	ldr	r1, [pc, #128]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035bc:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035c2:	f7fe f82d 	bl	8001620 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ca:	f7fe f829 	bl	8001620 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e028      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035dc:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035f4:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80035f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	490d      	ldr	r1, [pc, #52]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800361c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	4904      	ldr	r1, [pc, #16]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	424710d8 	.word	0x424710d8
 8003640:	42470068 	.word	0x42470068

08003644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e273      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d075      	beq.n	800374e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003662:	4b88      	ldr	r3, [pc, #544]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d00c      	beq.n	8003688 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b85      	ldr	r3, [pc, #532]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
        || \
 8003676:	2b08      	cmp	r3, #8
 8003678:	d112      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	4b7e      	ldr	r3, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x108>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d157      	bne.n	800374c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e24e      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x74>
 80036aa:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b70      	ldr	r3, [pc, #448]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036dc:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a68      	ldr	r2, [pc, #416]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b66      	ldr	r3, [pc, #408]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a65      	ldr	r2, [pc, #404]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd ff90 	bl	8001620 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fd ff8c 	bl	8001620 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e213      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b5b      	ldr	r3, [pc, #364]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xc0>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd ff7c 	bl	8001620 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7fd ff78 	bl	8001620 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	@ 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1ff      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b51      	ldr	r3, [pc, #324]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0xe8>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
        || \
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1d3      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4937      	ldr	r1, [pc, #220]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_RCC_OscConfig+0x244>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fd ff31 	bl	8001620 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fd ff2d 	bl	8001620 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1b4      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b28      	ldr	r3, [pc, #160]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4925      	ldr	r1, [pc, #148]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_OscConfig+0x244>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd ff10 	bl	8001620 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7fd ff0c 	bl	8001620 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e193      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1b      	ldr	r3, [pc, #108]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d036      	beq.n	800389c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_RCC_OscConfig+0x248>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fd fef0 	bl	8001620 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003844:	f7fd feec 	bl	8001620 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e173      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x200>
 8003862:	e01b      	b.n	800389c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_OscConfig+0x248>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd fed9 	bl	8001620 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e00e      	b.n	8003890 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fd fed5 	bl	8001620 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d907      	bls.n	8003890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e15c      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
 8003884:	40023800 	.word	0x40023800
 8003888:	42470000 	.word	0x42470000
 800388c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	4b8a      	ldr	r3, [pc, #552]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ea      	bne.n	8003872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8097 	beq.w	80039d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b83      	ldr	r3, [pc, #524]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	4b7f      	ldr	r3, [pc, #508]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	4a7e      	ldr	r2, [pc, #504]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ca:	4b7c      	ldr	r3, [pc, #496]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b79      	ldr	r3, [pc, #484]	@ (8003ac0 <HAL_RCC_OscConfig+0x47c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b76      	ldr	r3, [pc, #472]	@ (8003ac0 <HAL_RCC_OscConfig+0x47c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a75      	ldr	r2, [pc, #468]	@ (8003ac0 <HAL_RCC_OscConfig+0x47c>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fd fe95 	bl	8001620 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fd fe91 	bl	8001620 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e118      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac0 <HAL_RCC_OscConfig+0x47c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x2ea>
 8003920:	4b66      	ldr	r3, [pc, #408]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a65      	ldr	r2, [pc, #404]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	e01c      	b.n	8003968 <HAL_RCC_OscConfig+0x324>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x30c>
 8003936:	4b61      	ldr	r3, [pc, #388]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a60      	ldr	r2, [pc, #384]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 800393c:	f043 0304 	orr.w	r3, r3, #4
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
 8003942:	4b5e      	ldr	r3, [pc, #376]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a5d      	ldr	r2, [pc, #372]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	@ 0x70
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0x324>
 8003950:	4b5a      	ldr	r3, [pc, #360]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a59      	ldr	r2, [pc, #356]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
 800395c:	4b57      	ldr	r3, [pc, #348]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a56      	ldr	r2, [pc, #344]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fd fe56 	bl	8001620 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fd fe52 	bl	8001620 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0d7      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	4b4b      	ldr	r3, [pc, #300]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0ee      	beq.n	8003978 <HAL_RCC_OscConfig+0x334>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd fe40 	bl	8001620 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fe3c 	bl	8001620 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0c1      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ba:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ee      	bne.n	80039a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039cc:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	4a3a      	ldr	r2, [pc, #232]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80039d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80ad 	beq.w	8003b3c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e2:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d060      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d145      	bne.n	8003a82 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	4b33      	ldr	r3, [pc, #204]	@ (8003ac4 <HAL_RCC_OscConfig+0x480>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fe10 	bl	8001620 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd fe0c 	bl	8001620 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e093      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	491b      	ldr	r1, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <HAL_RCC_OscConfig+0x480>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fde1 	bl	8001620 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fd fddd 	bl	8001620 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e064      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x41e>
 8003a80:	e05c      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <HAL_RCC_OscConfig+0x480>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fdca 	bl	8001620 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fdc6 	bl	8001620 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04d      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x44c>
 8003aae:	e045      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e040      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b48 <HAL_RCC_OscConfig+0x504>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d030      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d129      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d122      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d119      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d10f      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800

08003b4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e022      	b.n	8003ba4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fd fa77 	bl	8001064 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2203      	movs	r2, #3
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f814 	bl	8003bac <HAL_SD_InitCard>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00a      	b.n	8003ba4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b08e      	sub	sp, #56	@ 0x38
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003bc8:	2376      	movs	r3, #118	@ 0x76
 8003bca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681d      	ldr	r5, [r3, #0]
 8003bd0:	466c      	mov	r4, sp
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be4:	4628      	mov	r0, r5
 8003be6:	f001 fe9d 	bl	8005924 <SDIO_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e04f      	b.n	8003c9c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003bfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ca4 <HAL_SD_InitCard+0xf8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fed5 	bl	80059b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c0c:	4b25      	ldr	r3, [pc, #148]	@ (8003ca4 <HAL_SD_InitCard+0xf8>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003c12:	2002      	movs	r0, #2
 8003c14:	f7fd fd10 	bl	8001638 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 ff55 	bl	8004ac8 <SD_PowerON>
 8003c1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e02e      	b.n	8003c9c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fe74 	bl	800492c <SD_InitCard>
 8003c44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e01b      	b.n	8003c9c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 ff34 	bl	8005ada <SDMMC_CmdBlockLength>
 8003c72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00f      	beq.n	8003c9a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca8 <HAL_SD_InitCard+0xfc>)
 8003c80:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3728      	adds	r7, #40	@ 0x28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca4:	422580a0 	.word	0x422580a0
 8003ca8:	004005ff 	.word	0x004005ff

08003cac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08c      	sub	sp, #48	@ 0x30
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0be      	b.n	8003e52 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f040 80b7 	bne.w	8003e50 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	441a      	add	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d907      	bls.n	8003d06 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0a5      	b.n	8003e52 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e5c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8003d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	4a4b      	ldr	r2, [pc, #300]	@ (8003e60 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003d34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3380      	adds	r3, #128	@ 0x80
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	f7fe fbdb 	bl	8002530 <HAL_DMA_Start_IT>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d017      	beq.n	8003db0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	@ (8003e64 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e050      	b.n	8003e52 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003db0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e68 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d002      	beq.n	8003dc4 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	025b      	lsls	r3, r3, #9
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	025b      	lsls	r3, r3, #9
 8003dce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003dd0:	2390      	movs	r3, #144	@ 0x90
 8003dd2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f107 0210 	add.w	r2, r7, #16
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fe49 	bl	8005a82 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d90a      	bls.n	8003e0c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2282      	movs	r2, #130	@ 0x82
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fead 	bl	8005b62 <SDMMC_CmdReadMultiBlock>
 8003e08:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e0a:	e009      	b.n	8003e20 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2281      	movs	r2, #129	@ 0x81
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fe80 	bl	8005b1e <SDMMC_CmdReadSingleBlock>
 8003e1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d012      	beq.n	8003e4c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e64 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e002      	b.n	8003e52 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3730      	adds	r7, #48	@ 0x30
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	0800473b 	.word	0x0800473b
 8003e60:	080047ad 	.word	0x080047ad
 8003e64:	004005ff 	.word	0x004005ff
 8003e68:	4225858c 	.word	0x4225858c

08003e6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	@ 0x30
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0c1      	b.n	8004018 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 80ba 	bne.w	8004016 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	441a      	add	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d907      	bls.n	8003ec6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0a8      	b.n	8004018 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 021a 	orr.w	r2, r2, #26
 8003ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	4a4d      	ldr	r2, [pc, #308]	@ (8004020 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8003eec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8003ef4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	2200      	movs	r2, #0
 8003efc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d002      	beq.n	8003f0c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d90a      	bls.n	8003f28 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	22a0      	movs	r2, #160	@ 0xa0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 fe63 	bl	8005bea <SDMMC_CmdWriteMultiBlock>
 8003f24:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f26:	e009      	b.n	8003f3c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2290      	movs	r2, #144	@ 0x90
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fe36 	bl	8005ba6 <SDMMC_CmdWriteSingleBlock>
 8003f3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d012      	beq.n	8003f68 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	@ (8004028 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003f48:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e057      	b.n	8004018 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003f68:	4b30      	ldr	r3, [pc, #192]	@ (800402c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	2240      	movs	r2, #64	@ 0x40
 8003f74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3380      	adds	r3, #128	@ 0x80
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	025b      	lsls	r3, r3, #9
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	f7fe fac3 	bl	8002530 <HAL_DMA_Start_IT>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 021a 	bic.w	r2, r2, #26
 8003fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e018      	b.n	8004018 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	025b      	lsls	r3, r3, #9
 8003ff0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ff2:	2390      	movs	r3, #144	@ 0x90
 8003ff4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f107 0210 	add.w	r2, r7, #16
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fd38 	bl	8005a82 <SDIO_ConfigData>

      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	@ 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08004711 	.word	0x08004711
 8004024:	080047ad 	.word	0x080047ad
 8004028:	004005ff 	.word	0x004005ff
 800402c:	4225858c 	.word	0x4225858c

08004030 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_SD_IRQHandler+0x2e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fdec 	bl	8004c34 <SD_Read_IT>
 800405c:	e155      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 808f 	beq.w	800418c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004076:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8004086:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800408a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d039      	beq.n	800411a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_SD_IRQHandler+0x8a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d011      	beq.n	80040de <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fdb6 	bl	8005c30 <SDMMC_CmdStopTransfer>
 80040c4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f91f 	bl	800431c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80040e6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <HAL_SD_IRQHandler+0xda>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f002 f9d4 	bl	80064b8 <HAL_SD_RxCpltCallback>
 8004110:	e0fb      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f002 f9c6 	bl	80064a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004118:	e0f7      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80f2 	beq.w	800430a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fd7b 	bl	8005c30 <SDMMC_CmdStopTransfer>
 800413a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8e4 	bl	800431c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 80d5 	bne.w	800430a <HAL_SD_IRQHandler+0x2da>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 80cf 	bne.w	800430a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0208 	bic.w	r2, r2, #8
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f002 f98d 	bl	80064a4 <HAL_SD_TxCpltCallback>
}
 800418a:	e0be      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_SD_IRQHandler+0x17c>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fd96 	bl	8004cd6 <SD_Write_IT>
 80041aa:	e0ae      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80a7 	beq.w	800430a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	f043 0202 	orr.w	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e8:	f043 0208 	orr.w	r2, r3, #8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	f043 0210 	orr.w	r2, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f240 523a 	movw	r2, #1338	@ 0x53a
 800422c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800423c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f001 fcf4 	bl	8005c30 <SDMMC_CmdStopTransfer>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f855 	bl	800431c <HAL_SD_ErrorCallback>
}
 8004272:	e04a      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d045      	beq.n	800430a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_SD_IRQHandler+0x262>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d011      	beq.n	80042b6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_SD_IRQHandler+0x2e4>)
 8004298:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe f99e 	bl	80025e0 <HAL_DMA_Abort_IT>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02f      	beq.n	800430a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 face 	bl	8004850 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80042b4:	e029      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <HAL_SD_IRQHandler+0x29a>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <HAL_SD_IRQHandler+0x2e8>)
 80042d0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f982 	bl	80025e0 <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fae9 	bl	80048be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80042ec:	e00d      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f002 f8c4 	bl	8006490 <HAL_SD_AbortCallback>
}
 8004308:	e7ff      	b.n	800430a <HAL_SD_IRQHandler+0x2da>
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	08004851 	.word	0x08004851
 8004318:	080048bf 	.word	0x080048bf

0800431c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800433e:	0f9b      	lsrs	r3, r3, #30
 8004340:	b2da      	uxtb	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	b2da      	uxtb	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800435c:	0e1b      	lsrs	r3, r3, #24
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	b2da      	uxtb	r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	b2da      	uxtb	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b2da      	uxtb	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004386:	b2da      	uxtb	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004390:	0d1b      	lsrs	r3, r3, #20
 8004392:	b29a      	uxth	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ae:	0bdb      	lsrs	r3, r3, #15
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c0:	0b9b      	lsrs	r3, r3, #14
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e4:	0b1b      	lsrs	r3, r3, #12
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d163      	bne.n	80044c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004404:	009a      	lsls	r2, r3, #2
 8004406:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004410:	0f92      	lsrs	r2, r2, #30
 8004412:	431a      	orrs	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441c:	0edb      	lsrs	r3, r3, #27
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	b2da      	uxtb	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442e:	0e1b      	lsrs	r3, r3, #24
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004440:	0d5b      	lsrs	r3, r3, #21
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	b2da      	uxtb	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004452:	0c9b      	lsrs	r3, r3, #18
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004464:	0bdb      	lsrs	r3, r3, #15
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	b2da      	uxtb	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	7e1b      	ldrb	r3, [r3, #24]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	3302      	adds	r3, #2
 8004488:	2201      	movs	r2, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004492:	fb03 f202 	mul.w	r2, r3, r2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	7a1b      	ldrb	r3, [r3, #8]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	2201      	movs	r2, #1
 80044a6:	409a      	lsls	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80044b4:	0a52      	lsrs	r2, r2, #9
 80044b6:	fb03 f202 	mul.w	r2, r3, r2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80044c6:	e031      	b.n	800452c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11d      	bne.n	800450c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	431a      	orrs	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	3301      	adds	r3, #1
 80044ec:	029a      	lsls	r2, r3, #10
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004500:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	661a      	str	r2, [r3, #96]	@ 0x60
 800450a:	e00f      	b.n	800452c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a58      	ldr	r2, [pc, #352]	@ (8004674 <HAL_SD_GetCardCSD+0x344>)
 8004512:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e09d      	b.n	8004668 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004530:	0b9b      	lsrs	r3, r3, #14
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	b2da      	uxtb	r2, r3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004542:	09db      	lsrs	r3, r3, #7
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800454a:	b2da      	uxtb	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800455a:	b2da      	uxtb	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	0fdb      	lsrs	r3, r3, #31
 8004566:	b2da      	uxtb	r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	0f5b      	lsrs	r3, r3, #29
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	b2da      	uxtb	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	0e9b      	lsrs	r3, r3, #26
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	b2da      	uxtb	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	0d9b      	lsrs	r3, r3, #22
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	b2da      	uxtb	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	0d5b      	lsrs	r3, r3, #21
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	0bdb      	lsrs	r3, r3, #15
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ea:	0b9b      	lsrs	r3, r3, #14
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	0b5b      	lsrs	r3, r3, #13
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	b2da      	uxtb	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	0b1b      	lsrs	r3, r3, #12
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	b2da      	uxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	b2da      	uxtb	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004656:	b2da      	uxtb	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	004005ff 	.word	0x004005ff

08004678 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa7e 	bl	8004be4 <SD_SendStatus>
 80046e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	0a5b      	lsrs	r3, r3, #9
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004706:	693b      	ldr	r3, [r7, #16]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	2b82      	cmp	r3, #130	@ 0x82
 800474e:	d111      	bne.n	8004774 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fa6b 	bl	8005c30 <SDMMC_CmdStopTransfer>
 800475a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff fdd4 	bl	800431c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0208 	bic.w	r2, r2, #8
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f240 523a 	movw	r2, #1338	@ 0x53a
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f001 fe8b 	bl	80064b8 <HAL_SD_RxCpltCallback>
#endif
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fe f8bc 	bl	8002938 <HAL_DMA_GetError>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d03e      	beq.n	8004844 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d002      	beq.n	80047e2 <SD_DMAError+0x36>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d12d      	bne.n	800483e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a19      	ldr	r2, [pc, #100]	@ (800484c <SD_DMAError+0xa0>)
 80047e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80047f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004806:	6978      	ldr	r0, [r7, #20]
 8004808:	f7ff ff62 	bl	80046d0 <HAL_SD_GetCardState>
 800480c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d002      	beq.n	800481a <SD_DMAError+0x6e>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d10a      	bne.n	8004830 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fa06 	bl	8005c30 <SDMMC_CmdStopTransfer>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	431a      	orrs	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f7ff fd6c 	bl	800431c <HAL_SD_ErrorCallback>
#endif
  }
}
 8004844:	bf00      	nop
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	004005ff 	.word	0x004005ff

08004850 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004866:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff31 	bl	80046d0 <HAL_SD_GetCardState>
 800486e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d002      	beq.n	800488a <SD_DMATxAbort+0x3a>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b05      	cmp	r3, #5
 8004888:	d10a      	bne.n	80048a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f9ce 	bl	8005c30 <SDMMC_CmdStopTransfer>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	431a      	orrs	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f001 fdf1 	bl	8006490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80048ae:	e002      	b.n	80048b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fd33 	bl	800431c <HAL_SD_ErrorCallback>
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80048d4:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff fefa 	bl	80046d0 <HAL_SD_GetCardState>
 80048dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d002      	beq.n	80048f8 <SD_DMARxAbort+0x3a>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d10a      	bne.n	800490e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 f997 	bl	8005c30 <SDMMC_CmdStopTransfer>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	431a      	orrs	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f001 fdba 	bl	8006490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800491c:	e002      	b.n	8004924 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fcfc 	bl	800431c <HAL_SD_ErrorCallback>
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b094      	sub	sp, #80	@ 0x50
 8004930:	af04      	add	r7, sp, #16
 8004932:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004934:	2301      	movs	r3, #1
 8004936:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f848 	bl	80059d2 <SDIO_GetPowerState>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004948:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800494c:	e0b8      	b.n	8004ac0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	2b03      	cmp	r3, #3
 8004954:	d02f      	beq.n	80049b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fa2f 	bl	8005dbe <SDMMC_CmdSendCID>
 8004960:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <SD_InitCard+0x40>
    {
      return errorstate;
 8004968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496a:	e0a9      	b.n	8004ac0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f872 	bl	8005a5c <SDIO_GetResponse>
 8004978:	4602      	mov	r2, r0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2104      	movs	r1, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f869 	bl	8005a5c <SDIO_GetResponse>
 800498a:	4602      	mov	r2, r0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2108      	movs	r1, #8
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f860 	bl	8005a5c <SDIO_GetResponse>
 800499c:	4602      	mov	r2, r0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	210c      	movs	r1, #12
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 f857 	bl	8005a5c <SDIO_GetResponse>
 80049ae:	4602      	mov	r2, r0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d00d      	beq.n	80049da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f107 020e 	add.w	r2, r7, #14
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fa35 	bl	8005e38 <SDMMC_CmdSetRelAdd>
 80049ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <SD_InitCard+0xae>
    {
      return errorstate;
 80049d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d8:	e072      	b.n	8004ac0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d036      	beq.n	8004a50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049e2:	89fb      	ldrh	r3, [r7, #14]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f001 f9ff 	bl	8005dfa <SDMMC_CmdSendCSD>
 80049fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a06:	e05b      	b.n	8004ac0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 f824 	bl	8005a5c <SDIO_GetResponse>
 8004a14:	4602      	mov	r2, r0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2104      	movs	r1, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f81b 	bl	8005a5c <SDIO_GetResponse>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2108      	movs	r1, #8
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f812 	bl	8005a5c <SDIO_GetResponse>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	210c      	movs	r1, #12
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 f809 	bl	8005a5c <SDIO_GetResponse>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2104      	movs	r1, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 f800 	bl	8005a5c <SDIO_GetResponse>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	0d1a      	lsrs	r2, r3, #20
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff fc60 	bl	8004330 <HAL_SD_GetCardCSD>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a76:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004a7a:	e021      	b.n	8004ac0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	2200      	movs	r2, #0
 8004a88:	461c      	mov	r4, r3
 8004a8a:	4615      	mov	r5, r2
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	462b      	mov	r3, r5
 8004a90:	4608      	mov	r0, r1
 8004a92:	f001 f8ef 	bl	8005c74 <SDMMC_CmdSelDesel>
 8004a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <SD_InitCard+0x176>
  {
    return errorstate;
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa0:	e00e      	b.n	8004ac0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681d      	ldr	r5, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	466c      	mov	r4, sp
 8004aaa:	f103 0210 	add.w	r2, r3, #16
 8004aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 ff33 	bl	8005924 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3740      	adds	r7, #64	@ 0x40
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bdb0      	pop	{r4, r5, r7, pc}

08004ac8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f8ea 	bl	8005cba <SDMMC_CmdGoIdleState>
 8004ae6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	e072      	b.n	8004bd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f8fd 	bl	8005cf6 <SDMMC_CmdOperCond>
 8004afc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00d      	beq.n	8004b20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 f8d3 	bl	8005cba <SDMMC_CmdGoIdleState>
 8004b14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	e05b      	b.n	8004bd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d137      	bne.n	8004b9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f8fd 	bl	8005d34 <SDMMC_CmdAppCommand>
 8004b3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02d      	beq.n	8004b9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b46:	e047      	b.n	8004bd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 f8f0 	bl	8005d34 <SDMMC_CmdAppCommand>
 8004b54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	e03b      	b.n	8004bd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	491e      	ldr	r1, [pc, #120]	@ (8004be0 <SD_PowerON+0x118>)
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f906 	bl	8005d78 <SDMMC_CmdAppOperCommand>
 8004b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b78:	e02e      	b.n	8004bd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 ff6b 	bl	8005a5c <SDIO_GetResponse>
 8004b86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	0fdb      	lsrs	r3, r3, #31
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <SD_PowerON+0xcc>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <SD_PowerON+0xce>
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]

    count++;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d802      	bhi.n	8004bae <SD_PowerON+0xe6>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0cc      	beq.n	8004b48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d902      	bls.n	8004bbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bbc:	e00c      	b.n	8004bd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bce:	e002      	b.n	8004bd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	c1100000 	.word	0xc1100000

08004be4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004bf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bf8:	e018      	b.n	8004c2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f001 f937 	bl	8005e7a <SDMMC_CmdSendStatus>
 8004c0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	e009      	b.n	8004c2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ff1c 	bl	8005a5c <SDIO_GetResponse>
 8004c24:	4602      	mov	r2, r0
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d03f      	beq.n	8004cce <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e033      	b.n	8004cbc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fe8e 	bl	800597a <SDIO_ReadFIFO>
 8004c5e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	0e1b      	lsrs	r3, r3, #24
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3301      	adds	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b07      	cmp	r3, #7
 8004cc0:	d9c8      	bls.n	8004c54 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d043      	beq.n	8004d78 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e037      	b.n	8004d66 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	021a      	lsls	r2, r3, #8
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	041a      	lsls	r2, r3, #16
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	061a      	lsls	r2, r3, #24
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f107 0208 	add.w	r2, r7, #8
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fe1a 	bl	8005994 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3301      	adds	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b07      	cmp	r3, #7
 8004d6a:	d9c4      	bls.n	8004cf6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07b      	b.n	8004e8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d108      	bne.n	8004dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004da2:	d009      	beq.n	8004db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
 8004daa:	e005      	b.n	8004db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fa94 	bl	8001300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	ea42 0103 	orr.w	r1, r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	f003 0104 	and.w	r1, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	f003 0210 	and.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b088      	sub	sp, #32
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea2:	f7fc fbbd 	bl	8001620 <HAL_GetTick>
 8004ea6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d001      	beq.n	8004ebc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e12a      	b.n	8005112 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_Transmit+0x36>
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e122      	b.n	8005112 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Transmit+0x48>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e11b      	b.n	8005112 <HAL_SPI_Transmit+0x280>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f28:	d10f      	bne.n	8004f4a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d007      	beq.n	8004f68 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f70:	d152      	bne.n	8005018 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Transmit+0xee>
 8004f7a:	8b7b      	ldrh	r3, [r7, #26]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d145      	bne.n	800500c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fa4:	e032      	b.n	800500c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d112      	bne.n	8004fda <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	881a      	ldrh	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	1c9a      	adds	r2, r3, #2
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fd8:	e018      	b.n	800500c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fda:	f7fc fb21 	bl	8001620 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d803      	bhi.n	8004ff2 <HAL_SPI_Transmit+0x160>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d102      	bne.n	8004ff8 <HAL_SPI_Transmit+0x166>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e082      	b.n	8005112 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1c7      	bne.n	8004fa6 <HAL_SPI_Transmit+0x114>
 8005016:	e053      	b.n	80050c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_SPI_Transmit+0x194>
 8005020:	8b7b      	ldrh	r3, [r7, #26]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d147      	bne.n	80050b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800504c:	e033      	b.n	80050b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b02      	cmp	r3, #2
 800505a:	d113      	bne.n	8005084 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005082:	e018      	b.n	80050b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005084:	f7fc facc 	bl	8001620 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d803      	bhi.n	800509c <HAL_SPI_Transmit+0x20a>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d102      	bne.n	80050a2 <HAL_SPI_Transmit+0x210>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e02d      	b.n	8005112 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1c6      	bne.n	800504e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fbd9 	bl	800587c <SPI_EndRxTxTransaction>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005110:	2300      	movs	r3, #0
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b088      	sub	sp, #32
 800511e:	af02      	add	r7, sp, #8
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
 8005138:	e104      	b.n	8005344 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005142:	d112      	bne.n	800516a <HAL_SPI_Receive+0x50>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10e      	bne.n	800516a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2204      	movs	r2, #4
 8005150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f8f3 	bl	800534c <HAL_SPI_TransmitReceive>
 8005166:	4603      	mov	r3, r0
 8005168:	e0ec      	b.n	8005344 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800516a:	f7fc fa59 	bl	8001620 <HAL_GetTick>
 800516e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_SPI_Receive+0x62>
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0e1      	b.n	8005344 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_SPI_Receive+0x74>
 800518a:	2302      	movs	r3, #2
 800518c:	e0da      	b.n	8005344 <HAL_SPI_Receive+0x22a>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2204      	movs	r2, #4
 800519a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	88fa      	ldrh	r2, [r7, #6]
 80051ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051dc:	d10f      	bne.n	80051fe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d007      	beq.n	800521c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d170      	bne.n	8005306 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005224:	e035      	b.n	8005292 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d115      	bne.n	8005260 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f103 020c 	add.w	r2, r3, #12
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800525e:	e018      	b.n	8005292 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005260:	f7fc f9de 	bl	8001620 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d803      	bhi.n	8005278 <HAL_SPI_Receive+0x15e>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d102      	bne.n	800527e <HAL_SPI_Receive+0x164>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e058      	b.n	8005344 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1c4      	bne.n	8005226 <HAL_SPI_Receive+0x10c>
 800529c:	e038      	b.n	8005310 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d113      	bne.n	80052d4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	b292      	uxth	r2, r2
 80052b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052d2:	e018      	b.n	8005306 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d4:	f7fc f9a4 	bl	8001620 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d803      	bhi.n	80052ec <HAL_SPI_Receive+0x1d2>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d102      	bne.n	80052f2 <HAL_SPI_Receive+0x1d8>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e01e      	b.n	8005344 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1c6      	bne.n	800529e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fa4b 	bl	80057b0 <SPI_EndRxTransaction>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005342:	2300      	movs	r3, #0
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	@ 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800535a:	2301      	movs	r3, #1
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800535e:	f7fc f95f 	bl	8001620 <HAL_GetTick>
 8005362:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800536a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005376:	7ffb      	ldrb	r3, [r7, #31]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d00c      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x4a>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005382:	d106      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x46>
 800538c:	7ffb      	ldrb	r3, [r7, #31]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d001      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	e17f      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_SPI_TransmitReceive+0x5c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_SPI_TransmitReceive+0x5c>
 80053a2:	887b      	ldrh	r3, [r7, #2]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e174      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x6e>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e16d      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d003      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2205      	movs	r2, #5
 80053d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d007      	beq.n	800542a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005432:	d17e      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_TransmitReceive+0xf6>
 800543c:	8afb      	ldrh	r3, [r7, #22]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d16c      	bne.n	800551c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005466:	e059      	b.n	800551c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d11b      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x162>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x162>
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	2b01      	cmp	r3, #1
 8005484:	d113      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d119      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x1a4>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d014      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	b292      	uxth	r2, r2
 80054d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ec:	2301      	movs	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054f0:	f7fc f896 	bl	8001620 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d80d      	bhi.n	800551c <HAL_SPI_TransmitReceive+0x1d0>
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d009      	beq.n	800551c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0bc      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1a0      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x11c>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d19b      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x11c>
 8005530:	e082      	b.n	8005638 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_SPI_TransmitReceive+0x1f4>
 800553a:	8afb      	ldrh	r3, [r7, #22]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d171      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005566:	e05d      	b.n	8005624 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d11c      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x264>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x264>
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	2b01      	cmp	r3, #1
 8005584:	d114      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d119      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x2a6>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d014      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ee:	2301      	movs	r3, #1
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055f2:	f7fc f815 	bl	8001620 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fe:	429a      	cmp	r2, r3
 8005600:	d803      	bhi.n	800560a <HAL_SPI_TransmitReceive+0x2be>
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d102      	bne.n	8005610 <HAL_SPI_TransmitReceive+0x2c4>
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e038      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d19c      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x21c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d197      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f91d 	bl	800587c <SPI_EndRxTxTransaction>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e01d      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005694:	2300      	movs	r3, #0
  }
}
 8005696:	4618      	mov	r0, r3
 8005698:	3728      	adds	r7, #40	@ 0x28
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056b0:	f7fb ffb6 	bl	8001620 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	4413      	add	r3, r2
 80056be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056c0:	f7fb ffae 	bl	8001620 <HAL_GetTick>
 80056c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056c6:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	015b      	lsls	r3, r3, #5
 80056cc:	0d1b      	lsrs	r3, r3, #20
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	fb02 f303 	mul.w	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d6:	e054      	b.n	8005782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d050      	beq.n	8005782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056e0:	f7fb ff9e 	bl	8001620 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d902      	bls.n	80056f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d13d      	bne.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800570e:	d111      	bne.n	8005734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005718:	d004      	beq.n	8005724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005722:	d107      	bne.n	8005734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800573c:	d10f      	bne.n	800575e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800575c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e017      	b.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3b01      	subs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	429a      	cmp	r2, r3
 800579e:	d19b      	bne.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000000 	.word	0x20000000

080057b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057c4:	d111      	bne.n	80057ea <SPI_EndRxTransaction+0x3a>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ce:	d004      	beq.n	80057da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d8:	d107      	bne.n	80057ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057f2:	d12a      	bne.n	800584a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fc:	d012      	beq.n	8005824 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	2180      	movs	r1, #128	@ 0x80
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff ff49 	bl	80056a0 <SPI_WaitFlagStateUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02d      	beq.n	8005870 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005818:	f043 0220 	orr.w	r2, r3, #32
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e026      	b.n	8005872 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	2101      	movs	r1, #1
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff ff36 	bl	80056a0 <SPI_WaitFlagStateUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01a      	beq.n	8005870 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e013      	b.n	8005872 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2200      	movs	r2, #0
 8005852:	2101      	movs	r1, #1
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff ff23 	bl	80056a0 <SPI_WaitFlagStateUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e000      	b.n	8005872 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2201      	movs	r2, #1
 8005890:	2102      	movs	r1, #2
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ff04 	bl	80056a0 <SPI_WaitFlagStateUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e032      	b.n	8005914 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058ae:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <SPI_EndRxTxTransaction+0xa0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005920 <SPI_EndRxTxTransaction+0xa4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	0d5b      	lsrs	r3, r3, #21
 80058ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058cc:	d112      	bne.n	80058f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	@ 0x80
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fee1 	bl	80056a0 <SPI_WaitFlagStateUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e00f      	b.n	8005914 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d0f2      	beq.n	80058f4 <SPI_EndRxTxTransaction+0x78>
 800590e:	e000      	b.n	8005912 <SPI_EndRxTxTransaction+0x96>
        break;
 8005910:	bf00      	nop
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000000 	.word	0x20000000
 8005920:	165e9f81 	.word	0x165e9f81

08005924 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005924:	b084      	sub	sp, #16
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	f107 001c 	add.w	r0, r7, #28
 8005932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800593a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800593c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800593e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005942:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005946:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800594a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800594e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800595e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	b004      	add	sp, #16
 8005978:	4770      	bx	lr

0800597a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2203      	movs	r2, #3
 80059c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0303 	and.w	r3, r3, #3
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a0c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005a12:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005a18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005a28:	f023 030f 	bic.w	r3, r3, #15
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	b2db      	uxtb	r3, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4413      	add	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
}  
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005aa8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005aae:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ab4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0

}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b088      	sub	sp, #32
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005ae8:	2310      	movs	r3, #16
 8005aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005aec:	2340      	movs	r3, #64	@ 0x40
 8005aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005af8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff74 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	2110      	movs	r1, #16
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f9d7 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b14:	69fb      	ldr	r3, [r7, #28]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b088      	sub	sp, #32
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005b2c:	2311      	movs	r3, #17
 8005b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b30:	2340      	movs	r3, #64	@ 0x40
 8005b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff ff52 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4e:	2111      	movs	r1, #17
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9b5 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b58:	69fb      	ldr	r3, [r7, #28]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b088      	sub	sp, #32
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005b70:	2312      	movs	r3, #18
 8005b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b74:	2340      	movs	r3, #64	@ 0x40
 8005b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ff30 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b92:	2112      	movs	r1, #18
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f993 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b088      	sub	sp, #32
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005bb4:	2318      	movs	r3, #24
 8005bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bb8:	2340      	movs	r3, #64	@ 0x40
 8005bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ff0e 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd6:	2118      	movs	r1, #24
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f971 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005be0:	69fb      	ldr	r3, [r7, #28]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b088      	sub	sp, #32
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005bf8:	2319      	movs	r3, #25
 8005bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bfc:	2340      	movs	r3, #64	@ 0x40
 8005bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff feec 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1a:	2119      	movs	r1, #25
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f94f 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c24:	69fb      	ldr	r3, [r7, #28]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c4e:	f107 0308 	add.w	r3, r7, #8
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff feca 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005c5a:	4a05      	ldr	r2, [pc, #20]	@ (8005c70 <SDMMC_CmdStopTransfer+0x40>)
 8005c5c:	210c      	movs	r1, #12
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f92e 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c66:	69fb      	ldr	r3, [r7, #28]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3720      	adds	r7, #32
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	05f5e100 	.word	0x05f5e100

08005c74 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005c84:	2307      	movs	r3, #7
 8005c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c94:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c96:	f107 0310 	add.w	r3, r7, #16
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff fea6 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca6:	2107      	movs	r1, #7
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f909 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005cae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3728      	adds	r7, #40	@ 0x28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b088      	sub	sp, #32
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd8:	f107 0308 	add.w	r3, r7, #8
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fe85 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb23 	bl	8006330 <SDMMC_GetCmdError>
 8005cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b088      	sub	sp, #32
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005cfe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005d04:	2308      	movs	r3, #8
 8005d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d08:	2340      	movs	r3, #64	@ 0x40
 8005d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fe66 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fab6 	bl	8006294 <SDMMC_GetCmdResp7>
 8005d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005d42:	2337      	movs	r3, #55	@ 0x37
 8005d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d46:	2340      	movs	r3, #64	@ 0x40
 8005d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d54:	f107 0308 	add.w	r3, r7, #8
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fe47 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d64:	2137      	movs	r1, #55	@ 0x37
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f8aa 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005d8e:	2329      	movs	r3, #41	@ 0x29
 8005d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d92:	2340      	movs	r3, #64	@ 0x40
 8005d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005da0:	f107 0308 	add.w	r3, r7, #8
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fe21 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9bd 	bl	800612c <SDMMC_GetCmdResp3>
 8005db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005db4:	69fb      	ldr	r3, [r7, #28]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005dca:	2302      	movs	r3, #2
 8005dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005dce:	23c0      	movs	r3, #192	@ 0xc0
 8005dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ddc:	f107 0308 	add.w	r3, r7, #8
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fe03 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f957 	bl	800609c <SDMMC_GetCmdResp2>
 8005dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005df0:	69fb      	ldr	r3, [r7, #28]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b088      	sub	sp, #32
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005e08:	2309      	movs	r3, #9
 8005e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005e0c:	23c0      	movs	r3, #192	@ 0xc0
 8005e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e1a:	f107 0308 	add.w	r3, r7, #8
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fde4 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f938 	bl	800609c <SDMMC_GetCmdResp2>
 8005e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005e46:	2303      	movs	r3, #3
 8005e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e4a:	2340      	movs	r3, #64	@ 0x40
 8005e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e58:	f107 0308 	add.w	r3, r7, #8
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fdc5 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	2103      	movs	r1, #3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f99d 	bl	80061a8 <SDMMC_GetCmdResp6>
 8005e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e70:	69fb      	ldr	r3, [r7, #28]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005e88:	230d      	movs	r3, #13
 8005e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e8c:	2340      	movs	r3, #64	@ 0x40
 8005e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fda4 	bl	80059ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eaa:	210d      	movs	r1, #13
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f807 	bl	8005ec0 <SDMMC_GetCmdResp1>
 8005eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005ece:	4b70      	ldr	r3, [pc, #448]	@ (8006090 <SDMMC_GetCmdResp1+0x1d0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a70      	ldr	r2, [pc, #448]	@ (8006094 <SDMMC_GetCmdResp1+0x1d4>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	0a5a      	lsrs	r2, r3, #9
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	fb02 f303 	mul.w	r3, r2, r3
 8005ee0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	1e5a      	subs	r2, r3, #1
 8005ee6:	61fa      	str	r2, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005eec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ef0:	e0c9      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0ef      	beq.n	8005ee2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ea      	bne.n	8005ee2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	e0b1      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0a6      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	22c5      	movs	r2, #197	@ 0xc5
 8005f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff fd7f 	bl	8005a42 <SDIO_GetCommandResponse>
 8005f44:	4603      	mov	r3, r0
 8005f46:	461a      	mov	r2, r3
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d001      	beq.n	8005f52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e099      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005f52:	2100      	movs	r1, #0
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff fd81 	bl	8005a5c <SDIO_GetResponse>
 8005f5a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8006098 <SDMMC_GetCmdResp1+0x1d8>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e08d      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	da02      	bge.n	8005f76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005f70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f74:	e087      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005f80:	2340      	movs	r3, #64	@ 0x40
 8005f82:	e080      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005f8e:	2380      	movs	r3, #128	@ 0x80
 8005f90:	e079      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fa0:	e071      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fb0:	e069      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fc0:	e061      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005fcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fd0:	e059      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fe0:	e051      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005fec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ff0:	e049      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006000:	e041      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800600c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006010:	e039      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800601c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006020:	e031      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800602c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006030:	e029      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800603c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006040:	e021      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800604c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006050:	e019      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800605c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006060:	e011      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800606c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006070:	e009      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800607c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006080:	e001      	b.n	8006086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006082:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000000 	.word	0x20000000
 8006094:	10624dd3 	.word	0x10624dd3
 8006098:	fdffe008 	.word	0xfdffe008

0800609c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <SDMMC_GetCmdResp2+0x88>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006128 <SDMMC_GetCmdResp2+0x8c>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	0a5b      	lsrs	r3, r3, #9
 80060b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	60fa      	str	r2, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060c8:	e026      	b.n	8006118 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0ef      	beq.n	80060ba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ea      	bne.n	80060ba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060f6:	2304      	movs	r3, #4
 80060f8:	e00e      	b.n	8006118 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800610c:	2301      	movs	r3, #1
 800610e:	e003      	b.n	8006118 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	22c5      	movs	r2, #197	@ 0xc5
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	20000000 	.word	0x20000000
 8006128:	10624dd3 	.word	0x10624dd3

0800612c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006134:	4b1a      	ldr	r3, [pc, #104]	@ (80061a0 <SDMMC_GetCmdResp3+0x74>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1a      	ldr	r2, [pc, #104]	@ (80061a4 <SDMMC_GetCmdResp3+0x78>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	0a5b      	lsrs	r3, r3, #9
 8006140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	60fa      	str	r2, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006154:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006158:	e01b      	b.n	8006192 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0ef      	beq.n	800614a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1ea      	bne.n	800614a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2204      	movs	r2, #4
 8006184:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006186:	2304      	movs	r3, #4
 8006188:	e003      	b.n	8006192 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	22c5      	movs	r2, #197	@ 0xc5
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000000 	.word	0x20000000
 80061a4:	10624dd3 	.word	0x10624dd3

080061a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	460b      	mov	r3, r1
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061b6:	4b35      	ldr	r3, [pc, #212]	@ (800628c <SDMMC_GetCmdResp6+0xe4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a35      	ldr	r2, [pc, #212]	@ (8006290 <SDMMC_GetCmdResp6+0xe8>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	1e5a      	subs	r2, r3, #1
 80061d0:	61fa      	str	r2, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80061da:	e052      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ef      	beq.n	80061cc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1ea      	bne.n	80061cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2204      	movs	r2, #4
 8006206:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006208:	2304      	movs	r3, #4
 800620a:	e03a      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800621e:	2301      	movs	r3, #1
 8006220:	e02f      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fc0d 	bl	8005a42 <SDIO_GetCommandResponse>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	4293      	cmp	r3, r2
 8006230:	d001      	beq.n	8006236 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006232:	2301      	movs	r3, #1
 8006234:	e025      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	22c5      	movs	r2, #197	@ 0xc5
 800623a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800623c:	2100      	movs	r1, #0
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff fc0c 	bl	8005a5c <SDIO_GetResponse>
 8006244:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800625a:	2300      	movs	r3, #0
 800625c:	e011      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800626c:	e009      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800627c:	e001      	b.n	8006282 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800627e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000000 	.word	0x20000000
 8006290:	10624dd3 	.word	0x10624dd3

08006294 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800629c:	4b22      	ldr	r3, [pc, #136]	@ (8006328 <SDMMC_GetCmdResp7+0x94>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a22      	ldr	r2, [pc, #136]	@ (800632c <SDMMC_GetCmdResp7+0x98>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0a5b      	lsrs	r3, r3, #9
 80062a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1e5a      	subs	r2, r3, #1
 80062b6:	60fa      	str	r2, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062c0:	e02c      	b.n	800631c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0ef      	beq.n	80062b2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ea      	bne.n	80062b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2204      	movs	r2, #4
 80062ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062ee:	2304      	movs	r3, #4
 80062f0:	e014      	b.n	800631c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006304:	2301      	movs	r3, #1
 8006306:	e009      	b.n	800631c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2240      	movs	r2, #64	@ 0x40
 8006318:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800631a:	2300      	movs	r3, #0
  
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	20000000 	.word	0x20000000
 800632c:	10624dd3 	.word	0x10624dd3

08006330 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006338:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <SDMMC_GetCmdError+0x50>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a11      	ldr	r2, [pc, #68]	@ (8006384 <SDMMC_GetCmdError+0x54>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	0a5b      	lsrs	r3, r3, #9
 8006344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006348:	fb02 f303 	mul.w	r3, r2, r3
 800634c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	60fa      	str	r2, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006358:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800635c:	e009      	b.n	8006372 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f1      	beq.n	800634e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	22c5      	movs	r2, #197	@ 0xc5
 800636e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000000 	.word	0x20000000
 8006384:	10624dd3 	.word	0x10624dd3

08006388 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800638c:	4904      	ldr	r1, [pc, #16]	@ (80063a0 <MX_FATFS_Init+0x18>)
 800638e:	4805      	ldr	r0, [pc, #20]	@ (80063a4 <MX_FATFS_Init+0x1c>)
 8006390:	f003 fb7c 	bl	8009a8c <FATFS_LinkDriver>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	4b03      	ldr	r3, [pc, #12]	@ (80063a8 <MX_FATFS_Init+0x20>)
 800639a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800639c:	bf00      	nop
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	200022ac 	.word	0x200022ac
 80063a4:	08009d2c 	.word	0x08009d2c
 80063a8:	200022a8 	.word	0x200022a8

080063ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80063b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80063c6:	f000 f888 	bl	80064da <BSP_SD_IsDetected>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d001      	beq.n	80063d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e005      	b.n	80063e0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80063d4:	4804      	ldr	r0, [pc, #16]	@ (80063e8 <BSP_SD_Init+0x2c>)
 80063d6:	f7fd fbb9 	bl	8003b4c <HAL_SD_Init>
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80063de:	79fb      	ldrb	r3, [r7, #7]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20002108 	.word	0x20002108

080063ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	4806      	ldr	r0, [pc, #24]	@ (800641c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006404:	f7fd fc52 	bl	8003cac <HAL_SD_ReadBlocks_DMA>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20002108 	.word	0x20002108

08006420 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	68f9      	ldr	r1, [r7, #12]
 8006436:	4806      	ldr	r0, [pc, #24]	@ (8006450 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006438:	f7fd fd18 	bl	8003e6c <HAL_SD_WriteBlocks_DMA>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20002108 	.word	0x20002108

08006454 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006458:	4805      	ldr	r0, [pc, #20]	@ (8006470 <BSP_SD_GetCardState+0x1c>)
 800645a:	f7fe f939 	bl	80046d0 <HAL_SD_GetCardState>
 800645e:	4603      	mov	r3, r0
 8006460:	2b04      	cmp	r3, #4
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
}
 800646a:	4618      	mov	r0, r3
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20002108 	.word	0x20002108

08006474 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4803      	ldr	r0, [pc, #12]	@ (800648c <BSP_SD_GetCardInfo+0x18>)
 8006480:	f7fe f8fa 	bl	8004678 <HAL_SD_GetCardInfo>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20002108 	.word	0x20002108

08006490 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006498:	f000 f818 	bl	80064cc <BSP_SD_AbortCallback>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80064ac:	f000 f9a8 	bl	8006800 <BSP_SD_WriteCpltCallback>
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80064c0:	f000 f9aa 	bl	8006818 <BSP_SD_ReadCpltCallback>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0

}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80064e0:	2301      	movs	r3, #1
 80064e2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80064e4:	f000 f80c 	bl	8006500 <BSP_PlatformIsDetected>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80064ee:	2300      	movs	r3, #0
 80064f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	b2db      	uxtb	r3, r3
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006506:	2301      	movs	r3, #1
 8006508:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800650a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800650e:	4806      	ldr	r0, [pc, #24]	@ (8006528 <BSP_PlatformIsDetected+0x28>)
 8006510:	f7fc fc7a 	bl	8002e08 <HAL_GPIO_ReadPin>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800651a:	2300      	movs	r3, #0
 800651c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800651e:	79fb      	ldrb	r3, [r7, #7]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40020000 	.word	0x40020000

0800652c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006534:	f7fb f874 	bl	8001620 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800653a:	e006      	b.n	800654a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800653c:	f7ff ff8a 	bl	8006454 <BSP_SD_GetCardState>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006546:	2300      	movs	r3, #0
 8006548:	e009      	b.n	800655e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800654a:	f7fb f869 	bl	8001620 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	429a      	cmp	r2, r3
 8006558:	d8f0      	bhi.n	800653c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800655a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006572:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <SD_CheckStatus+0x38>)
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006578:	f7ff ff6c 	bl	8006454 <BSP_SD_GetCardState>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d107      	bne.n	8006592 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006582:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <SD_CheckStatus+0x38>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <SD_CheckStatus+0x38>)
 8006590:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006592:	4b03      	ldr	r3, [pc, #12]	@ (80065a0 <SD_CheckStatus+0x38>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	b2db      	uxtb	r3, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000009 	.word	0x20000009

080065a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80065ae:	f7ff ff05 	bl	80063bc <BSP_SD_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ffd4 	bl	8006568 <SD_CheckStatus>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	4b04      	ldr	r3, [pc, #16]	@ (80065d8 <SD_initialize+0x34>)
 80065c6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80065c8:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <SD_initialize+0x34>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	b2db      	uxtb	r3, r3
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000009 	.word	0x20000009

080065dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ffbd 	bl	8006568 <SD_CheckStatus>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800660c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006610:	f7ff ff8c 	bl	800652c <SD_CheckStatusWithTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	da01      	bge.n	800661e <SD_read+0x26>
  {
    return res;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	e03b      	b.n	8006696 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f7ff fee2 	bl	80063ec <BSP_SD_ReadBlocks_DMA>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d132      	bne.n	8006694 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800662e:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <SD_read+0xa8>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006634:	f7fa fff4 	bl	8001620 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800663a:	bf00      	nop
 800663c:	4b18      	ldr	r3, [pc, #96]	@ (80066a0 <SD_read+0xa8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <SD_read+0x5e>
 8006644:	f7fa ffec 	bl	8001620 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006652:	4293      	cmp	r3, r2
 8006654:	d9f2      	bls.n	800663c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006656:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <SD_read+0xa8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d102      	bne.n	8006664 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
 8006662:	e017      	b.n	8006694 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006664:	4b0e      	ldr	r3, [pc, #56]	@ (80066a0 <SD_read+0xa8>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800666a:	f7fa ffd9 	bl	8001620 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006670:	e007      	b.n	8006682 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006672:	f7ff feef 	bl	8006454 <BSP_SD_GetCardState>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d102      	bne.n	8006682 <SD_read+0x8a>
          {
            res = RES_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006680:	e008      	b.n	8006694 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006682:	f7fa ffcd 	bl	8001620 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006690:	4293      	cmp	r3, r2
 8006692:	d9ee      	bls.n	8006672 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006694:	7dfb      	ldrb	r3, [r7, #23]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200022b4 	.word	0x200022b4

080066a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80066b8:	4b24      	ldr	r3, [pc, #144]	@ (800674c <SD_write+0xa8>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80066be:	f247 5030 	movw	r0, #30000	@ 0x7530
 80066c2:	f7ff ff33 	bl	800652c <SD_CheckStatusWithTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da01      	bge.n	80066d0 <SD_write+0x2c>
  {
    return res;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	e038      	b.n	8006742 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68b8      	ldr	r0, [r7, #8]
 80066d6:	f7ff fea3 	bl	8006420 <BSP_SD_WriteBlocks_DMA>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d12f      	bne.n	8006740 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80066e0:	f7fa ff9e 	bl	8001620 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80066e6:	bf00      	nop
 80066e8:	4b18      	ldr	r3, [pc, #96]	@ (800674c <SD_write+0xa8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d108      	bne.n	8006702 <SD_write+0x5e>
 80066f0:	f7fa ff96 	bl	8001620 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80066fe:	4293      	cmp	r3, r2
 8006700:	d9f2      	bls.n	80066e8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006702:	4b12      	ldr	r3, [pc, #72]	@ (800674c <SD_write+0xa8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
 800670e:	e017      	b.n	8006740 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006710:	4b0e      	ldr	r3, [pc, #56]	@ (800674c <SD_write+0xa8>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006716:	f7fa ff83 	bl	8001620 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800671c:	e007      	b.n	800672e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800671e:	f7ff fe99 	bl	8006454 <BSP_SD_GetCardState>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <SD_write+0x8a>
          {
            res = RES_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	75fb      	strb	r3, [r7, #23]
            break;
 800672c:	e008      	b.n	8006740 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800672e:	f7fa ff77 	bl	8001620 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	f247 522f 	movw	r2, #29999	@ 0x752f
 800673c:	4293      	cmp	r3, r2
 800673e:	d9ee      	bls.n	800671e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200022b0 	.word	0x200022b0

08006750 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08c      	sub	sp, #48	@ 0x30
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	603a      	str	r2, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
 800675c:	460b      	mov	r3, r1
 800675e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006766:	4b25      	ldr	r3, [pc, #148]	@ (80067fc <SD_ioctl+0xac>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <SD_ioctl+0x28>
 8006774:	2303      	movs	r3, #3
 8006776:	e03c      	b.n	80067f2 <SD_ioctl+0xa2>

  switch (cmd)
 8006778:	79bb      	ldrb	r3, [r7, #6]
 800677a:	2b03      	cmp	r3, #3
 800677c:	d834      	bhi.n	80067e8 <SD_ioctl+0x98>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <SD_ioctl+0x34>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	08006795 	.word	0x08006795
 8006788:	0800679d 	.word	0x0800679d
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067cf 	.word	0x080067cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800679a:	e028      	b.n	80067ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800679c:	f107 030c 	add.w	r3, r7, #12
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fe67 	bl	8006474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80067a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80067b2:	e01c      	b.n	80067ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fe5b 	bl	8006474 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80067cc:	e00f      	b.n	80067ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067ce:	f107 030c 	add.w	r3, r7, #12
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fe4e 	bl	8006474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	0a5a      	lsrs	r2, r3, #9
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80067e6:	e002      	b.n	80067ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80067ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	@ 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000009 	.word	0x20000009

08006800 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006804:	4b03      	ldr	r3, [pc, #12]	@ (8006814 <BSP_SD_WriteCpltCallback+0x14>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	200022b0 	.word	0x200022b0

08006818 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800681c:	4b03      	ldr	r3, [pc, #12]	@ (800682c <BSP_SD_ReadCpltCallback+0x14>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	200022b4 	.word	0x200022b4

08006830 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <disk_status+0x30>)
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	79fa      	ldrb	r2, [r7, #7]
 8006848:	4905      	ldr	r1, [pc, #20]	@ (8006860 <disk_status+0x30>)
 800684a:	440a      	add	r2, r1
 800684c:	7a12      	ldrb	r2, [r2, #8]
 800684e:	4610      	mov	r0, r2
 8006850:	4798      	blx	r3
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200024e0 	.word	0x200024e0

08006864 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	4a0e      	ldr	r2, [pc, #56]	@ (80068b0 <disk_initialize+0x4c>)
 8006876:	5cd3      	ldrb	r3, [r2, r3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d114      	bne.n	80068a6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	4a0c      	ldr	r2, [pc, #48]	@ (80068b0 <disk_initialize+0x4c>)
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	79fa      	ldrb	r2, [r7, #7]
 800688a:	4909      	ldr	r1, [pc, #36]	@ (80068b0 <disk_initialize+0x4c>)
 800688c:	440a      	add	r2, r1
 800688e:	7a12      	ldrb	r2, [r2, #8]
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	4a03      	ldr	r2, [pc, #12]	@ (80068b0 <disk_initialize+0x4c>)
 80068a2:	2101      	movs	r1, #1
 80068a4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200024e0 	.word	0x200024e0

080068b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	4a0a      	ldr	r2, [pc, #40]	@ (80068f0 <disk_read+0x3c>)
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	689c      	ldr	r4, [r3, #8]
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	4a07      	ldr	r2, [pc, #28]	@ (80068f0 <disk_read+0x3c>)
 80068d4:	4413      	add	r3, r2
 80068d6:	7a18      	ldrb	r0, [r3, #8]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	47a0      	blx	r4
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd90      	pop	{r4, r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200024e0 	.word	0x200024e0

080068f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	4a0a      	ldr	r2, [pc, #40]	@ (8006930 <disk_write+0x3c>)
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68dc      	ldr	r4, [r3, #12]
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	4a07      	ldr	r2, [pc, #28]	@ (8006930 <disk_write+0x3c>)
 8006914:	4413      	add	r3, r2
 8006916:	7a18      	ldrb	r0, [r3, #8]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	47a0      	blx	r4
 8006920:	4603      	mov	r3, r0
 8006922:	75fb      	strb	r3, [r7, #23]
  return res;
 8006924:	7dfb      	ldrb	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	200024e0 	.word	0x200024e0

08006934 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	603a      	str	r2, [r7, #0]
 800693e:	71fb      	strb	r3, [r7, #7]
 8006940:	460b      	mov	r3, r1
 8006942:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	4a09      	ldr	r2, [pc, #36]	@ (800696c <disk_ioctl+0x38>)
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	79fa      	ldrb	r2, [r7, #7]
 8006952:	4906      	ldr	r1, [pc, #24]	@ (800696c <disk_ioctl+0x38>)
 8006954:	440a      	add	r2, r1
 8006956:	7a10      	ldrb	r0, [r2, #8]
 8006958:	79b9      	ldrb	r1, [r7, #6]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	4798      	blx	r3
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
  return res;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200024e0 	.word	0x200024e0

08006970 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3301      	adds	r3, #1
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	b21a      	sxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b21b      	sxth	r3, r3
 800698c:	4313      	orrs	r3, r2
 800698e:	b21b      	sxth	r3, r3
 8006990:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006992:	89fb      	ldrh	r3, [r7, #14]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3303      	adds	r3, #3
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	3202      	adds	r2, #2
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	3201      	adds	r2, #1
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80069d8:	68fb      	ldr	r3, [r7, #12]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	887b      	ldrh	r3, [r7, #2]
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	607a      	str	r2, [r7, #4]
 8006a0a:	887a      	ldrh	r2, [r7, #2]
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	1c53      	adds	r3, r2, #1
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	6179      	str	r1, [r7, #20]
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f1      	bne.n	8006a8e <mem_cpy+0x1a>
	}
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006ab6:	b480      	push	{r7}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f3      	bne.n	8006ac6 <mem_set+0x10>
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	@ 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	61fa      	str	r2, [r7, #28]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	61ba      	str	r2, [r7, #24]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	1acb      	subs	r3, r1, r3
 8006b18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <mem_cmp+0x40>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0eb      	beq.n	8006b04 <mem_cmp+0x18>

	return r;
 8006b2c:	697b      	ldr	r3, [r7, #20]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006b44:	e002      	b.n	8006b4c <chk_chr+0x12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	607b      	str	r3, [r7, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <chk_chr+0x26>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d1f2      	bne.n	8006b46 <chk_chr+0xc>
	return *str;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	781b      	ldrb	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e029      	b.n	8006bd8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006b84:	4a27      	ldr	r2, [pc, #156]	@ (8006c24 <chk_lock+0xb4>)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	4413      	add	r3, r2
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01d      	beq.n	8006bce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b92:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <chk_lock+0xb4>)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	4413      	add	r3, r2
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d116      	bne.n	8006bd2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c24 <chk_lock+0xb4>)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	3304      	adds	r3, #4
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d10c      	bne.n	8006bd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c24 <chk_lock+0xb4>)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d102      	bne.n	8006bd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006bcc:	e007      	b.n	8006bde <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d9d2      	bls.n	8006b84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d109      	bne.n	8006bf8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <chk_lock+0x80>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d101      	bne.n	8006bf4 <chk_lock+0x84>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e010      	b.n	8006c16 <chk_lock+0xa6>
 8006bf4:	2312      	movs	r3, #18
 8006bf6:	e00e      	b.n	8006c16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d108      	bne.n	8006c10 <chk_lock+0xa0>
 8006bfe:	4a09      	ldr	r2, [pc, #36]	@ (8006c24 <chk_lock+0xb4>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4413      	add	r3, r2
 8006c06:	330c      	adds	r3, #12
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c0e:	d101      	bne.n	8006c14 <chk_lock+0xa4>
 8006c10:	2310      	movs	r3, #16
 8006c12:	e000      	b.n	8006c16 <chk_lock+0xa6>
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	200022c0 	.word	0x200022c0

08006c28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	e002      	b.n	8006c3a <enq_lock+0x12>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3301      	adds	r3, #1
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d806      	bhi.n	8006c4e <enq_lock+0x26>
 8006c40:	4a09      	ldr	r2, [pc, #36]	@ (8006c68 <enq_lock+0x40>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	4413      	add	r3, r2
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f2      	bne.n	8006c34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	bf14      	ite	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	2300      	moveq	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	200022c0 	.word	0x200022c0

08006c6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e01f      	b.n	8006cbc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006c7c:	4a41      	ldr	r2, [pc, #260]	@ (8006d84 <inc_lock+0x118>)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	4413      	add	r3, r2
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d113      	bne.n	8006cb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8006d84 <inc_lock+0x118>)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	4413      	add	r3, r2
 8006c96:	3304      	adds	r3, #4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d109      	bne.n	8006cb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ca2:	4a38      	ldr	r2, [pc, #224]	@ (8006d84 <inc_lock+0x118>)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	4413      	add	r3, r2
 8006caa:	3308      	adds	r3, #8
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d006      	beq.n	8006cc4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d9dc      	bls.n	8006c7c <inc_lock+0x10>
 8006cc2:	e000      	b.n	8006cc6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006cc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d132      	bne.n	8006d32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e002      	b.n	8006cd8 <inc_lock+0x6c>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d806      	bhi.n	8006cec <inc_lock+0x80>
 8006cde:	4a29      	ldr	r2, [pc, #164]	@ (8006d84 <inc_lock+0x118>)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	4413      	add	r3, r2
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f2      	bne.n	8006cd2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d101      	bne.n	8006cf6 <inc_lock+0x8a>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e040      	b.n	8006d78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4922      	ldr	r1, [pc, #136]	@ (8006d84 <inc_lock+0x118>)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	440b      	add	r3, r1
 8006d02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	491e      	ldr	r1, [pc, #120]	@ (8006d84 <inc_lock+0x118>)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	440b      	add	r3, r1
 8006d10:	3304      	adds	r3, #4
 8006d12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	491a      	ldr	r1, [pc, #104]	@ (8006d84 <inc_lock+0x118>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	440b      	add	r3, r1
 8006d20:	3308      	adds	r3, #8
 8006d22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006d24:	4a17      	ldr	r2, [pc, #92]	@ (8006d84 <inc_lock+0x118>)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	4413      	add	r3, r2
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	2200      	movs	r2, #0
 8006d30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <inc_lock+0xe0>
 8006d38:	4a12      	ldr	r2, [pc, #72]	@ (8006d84 <inc_lock+0x118>)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	4413      	add	r3, r2
 8006d40:	330c      	adds	r3, #12
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <inc_lock+0xe0>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e015      	b.n	8006d78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d108      	bne.n	8006d64 <inc_lock+0xf8>
 8006d52:	4a0c      	ldr	r2, [pc, #48]	@ (8006d84 <inc_lock+0x118>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	4413      	add	r3, r2
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	e001      	b.n	8006d68 <inc_lock+0xfc>
 8006d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d68:	4906      	ldr	r1, [pc, #24]	@ (8006d84 <inc_lock+0x118>)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	440b      	add	r3, r1
 8006d70:	330c      	adds	r3, #12
 8006d72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	200022c0 	.word	0x200022c0

08006d88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d825      	bhi.n	8006de8 <dec_lock+0x60>
		n = Files[i].ctr;
 8006d9c:	4a17      	ldr	r2, [pc, #92]	@ (8006dfc <dec_lock+0x74>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	4413      	add	r3, r2
 8006da4:	330c      	adds	r3, #12
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006daa:	89fb      	ldrh	r3, [r7, #14]
 8006dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db0:	d101      	bne.n	8006db6 <dec_lock+0x2e>
 8006db2:	2300      	movs	r3, #0
 8006db4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006db6:	89fb      	ldrh	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <dec_lock+0x3a>
 8006dbc:	89fb      	ldrh	r3, [r7, #14]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006dfc <dec_lock+0x74>)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	4413      	add	r3, r2
 8006dca:	330c      	adds	r3, #12
 8006dcc:	89fa      	ldrh	r2, [r7, #14]
 8006dce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <dec_lock+0x5a>
 8006dd6:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <dec_lock+0x74>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	4413      	add	r3, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	737b      	strb	r3, [r7, #13]
 8006de6:	e001      	b.n	8006dec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006de8:	2302      	movs	r3, #2
 8006dea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006dec:	7b7b      	ldrb	r3, [r7, #13]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	200022c0 	.word	0x200022c0

08006e00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e010      	b.n	8006e30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8006e44 <clear_lock+0x44>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	4413      	add	r3, r2
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d105      	bne.n	8006e2a <clear_lock+0x2a>
 8006e1e:	4a09      	ldr	r2, [pc, #36]	@ (8006e44 <clear_lock+0x44>)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	4413      	add	r3, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d9eb      	bls.n	8006e0e <clear_lock+0xe>
	}
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	200022c0 	.word	0x200022c0

08006e48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	78db      	ldrb	r3, [r3, #3]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d034      	beq.n	8006ec6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7858      	ldrb	r0, [r3, #1]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	f7ff fd40 	bl	80068f4 <disk_write>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e022      	b.n	8006ec6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d217      	bcs.n	8006ec6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	789b      	ldrb	r3, [r3, #2]
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	e010      	b.n	8006ec0 <sync_window+0x78>
					wsect += fs->fsize;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7858      	ldrb	r0, [r3, #1]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	f7ff fd1d 	bl	80068f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d8eb      	bhi.n	8006e9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d01b      	beq.n	8006f20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff ffad 	bl	8006e48 <sync_window>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d113      	bne.n	8006f20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7858      	ldrb	r0, [r3, #1]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006f02:	2301      	movs	r3, #1
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	f7ff fcd5 	bl	80068b4 <disk_read>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff87 	bl	8006e48 <sync_window>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d159      	bne.n	8006ff8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d149      	bne.n	8006fe0 <sync_fs+0xb4>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	791b      	ldrb	r3, [r3, #4]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d145      	bne.n	8006fe0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	899b      	ldrh	r3, [r3, #12]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2100      	movs	r1, #0
 8006f62:	f7ff fda8 	bl	8006ab6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3338      	adds	r3, #56	@ 0x38
 8006f6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f6e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fd37 	bl	80069e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3338      	adds	r3, #56	@ 0x38
 8006f7c:	4921      	ldr	r1, [pc, #132]	@ (8007004 <sync_fs+0xd8>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fd4c 	bl	8006a1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3338      	adds	r3, #56	@ 0x38
 8006f88:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006f8c:	491e      	ldr	r1, [pc, #120]	@ (8007008 <sync_fs+0xdc>)
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fd44 	bl	8006a1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3338      	adds	r3, #56	@ 0x38
 8006f98:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7ff fd3a 	bl	8006a1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3338      	adds	r3, #56	@ 0x38
 8006fac:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7ff fd30 	bl	8006a1c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7858      	ldrb	r0, [r3, #1]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f7ff fc8d 	bl	80068f4 <disk_write>
			fs->fsi_flag = 0;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fca3 	bl	8006934 <disk_ioctl>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <sync_fs+0xcc>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	41615252 	.word	0x41615252
 8007008:	61417272 	.word	0x61417272

0800700c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3b02      	subs	r3, #2
 800701a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	3b02      	subs	r3, #2
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d301      	bcc.n	800702c <clust2sect+0x20>
 8007028:	2300      	movs	r3, #0
 800702a:	e008      	b.n	800703e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	895b      	ldrh	r3, [r3, #10]
 8007030:	461a      	mov	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	fb03 f202 	mul.w	r2, r3, r2
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	4413      	add	r3, r2
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d904      	bls.n	800706a <get_fat+0x20>
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <get_fat+0x26>
		val = 1;	/* Internal error */
 800706a:	2301      	movs	r3, #1
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e0ba      	b.n	80071e6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b03      	cmp	r3, #3
 800707c:	f000 8082 	beq.w	8007184 <get_fat+0x13a>
 8007080:	2b03      	cmp	r3, #3
 8007082:	f300 80a6 	bgt.w	80071d2 <get_fat+0x188>
 8007086:	2b01      	cmp	r3, #1
 8007088:	d002      	beq.n	8007090 <get_fat+0x46>
 800708a:	2b02      	cmp	r3, #2
 800708c:	d055      	beq.n	800713a <get_fat+0xf0>
 800708e:	e0a0      	b.n	80071d2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	899b      	ldrh	r3, [r3, #12]
 80070a6:	4619      	mov	r1, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80070ae:	4413      	add	r3, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f7ff ff0c 	bl	8006ed0 <move_window>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f040 808c 	bne.w	80071d8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	60fa      	str	r2, [r7, #12]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	8992      	ldrh	r2, [r2, #12]
 80070ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80070ce:	fb01 f202 	mul.w	r2, r1, r2
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4413      	add	r3, r2
 80070d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	899b      	ldrh	r3, [r3, #12]
 80070e6:	4619      	mov	r1, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80070ee:	4413      	add	r3, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	6938      	ldr	r0, [r7, #16]
 80070f4:	f7ff feec 	bl	8006ed0 <move_window>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d16e      	bne.n	80071dc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	899b      	ldrh	r3, [r3, #12]
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	fbb3 f1f2 	udiv	r1, r3, r2
 800710a:	fb01 f202 	mul.w	r2, r1, r2
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4313      	orrs	r3, r2
 800711e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <get_fat+0xe6>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	091b      	lsrs	r3, r3, #4
 800712e:	e002      	b.n	8007136 <get_fat+0xec>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007136:	617b      	str	r3, [r7, #20]
			break;
 8007138:	e055      	b.n	80071e6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	899b      	ldrh	r3, [r3, #12]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	4619      	mov	r1, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	fbb3 f3f1 	udiv	r3, r3, r1
 800714e:	4413      	add	r3, r2
 8007150:	4619      	mov	r1, r3
 8007152:	6938      	ldr	r0, [r7, #16]
 8007154:	f7ff febc 	bl	8006ed0 <move_window>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d140      	bne.n	80071e0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	8992      	ldrh	r2, [r2, #12]
 800716c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007170:	fb00 f202 	mul.w	r2, r0, r2
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	440b      	add	r3, r1
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fbf9 	bl	8006970 <ld_word>
 800717e:	4603      	mov	r3, r0
 8007180:	617b      	str	r3, [r7, #20]
			break;
 8007182:	e030      	b.n	80071e6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	899b      	ldrh	r3, [r3, #12]
 800718c:	089b      	lsrs	r3, r3, #2
 800718e:	b29b      	uxth	r3, r3
 8007190:	4619      	mov	r1, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	fbb3 f3f1 	udiv	r3, r3, r1
 8007198:	4413      	add	r3, r2
 800719a:	4619      	mov	r1, r3
 800719c:	6938      	ldr	r0, [r7, #16]
 800719e:	f7ff fe97 	bl	8006ed0 <move_window>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d11d      	bne.n	80071e4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	8992      	ldrh	r2, [r2, #12]
 80071b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80071ba:	fb00 f202 	mul.w	r2, r0, r2
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	440b      	add	r3, r1
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fbec 	bl	80069a0 <ld_dword>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071ce:	617b      	str	r3, [r7, #20]
			break;
 80071d0:	e009      	b.n	80071e6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80071d2:	2301      	movs	r3, #1
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	e006      	b.n	80071e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071d8:	bf00      	nop
 80071da:	e004      	b.n	80071e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071dc:	bf00      	nop
 80071de:	e002      	b.n	80071e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071e4:	bf00      	nop
		}
	}

	return val;
 80071e6:	697b      	ldr	r3, [r7, #20]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b089      	sub	sp, #36	@ 0x24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80071fc:	2302      	movs	r3, #2
 80071fe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b01      	cmp	r3, #1
 8007204:	f240 8109 	bls.w	800741a <put_fat+0x22a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	f080 8103 	bcs.w	800741a <put_fat+0x22a>
		switch (fs->fs_type) {
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b03      	cmp	r3, #3
 800721a:	f000 80b6 	beq.w	800738a <put_fat+0x19a>
 800721e:	2b03      	cmp	r3, #3
 8007220:	f300 80fb 	bgt.w	800741a <put_fat+0x22a>
 8007224:	2b01      	cmp	r3, #1
 8007226:	d003      	beq.n	8007230 <put_fat+0x40>
 8007228:	2b02      	cmp	r3, #2
 800722a:	f000 8083 	beq.w	8007334 <put_fat+0x144>
 800722e:	e0f4      	b.n	800741a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	4413      	add	r3, r2
 800723c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	899b      	ldrh	r3, [r3, #12]
 8007246:	4619      	mov	r1, r3
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	fbb3 f3f1 	udiv	r3, r3, r1
 800724e:	4413      	add	r3, r2
 8007250:	4619      	mov	r1, r3
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fe3c 	bl	8006ed0 <move_window>
 8007258:	4603      	mov	r3, r0
 800725a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800725c:	7ffb      	ldrb	r3, [r7, #31]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 80d4 	bne.w	800740c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	61ba      	str	r2, [r7, #24]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	8992      	ldrh	r2, [r2, #12]
 8007274:	fbb3 f0f2 	udiv	r0, r3, r2
 8007278:	fb00 f202 	mul.w	r2, r0, r2
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	440b      	add	r3, r1
 8007280:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <put_fat+0xb8>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	b25b      	sxtb	r3, r3
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	b25a      	sxtb	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b25b      	sxtb	r3, r3
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	e001      	b.n	80072ac <put_fat+0xbc>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	899b      	ldrh	r3, [r3, #12]
 80072be:	4619      	mov	r1, r3
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072c6:	4413      	add	r3, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff fe00 	bl	8006ed0 <move_window>
 80072d0:	4603      	mov	r3, r0
 80072d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072d4:	7ffb      	ldrb	r3, [r7, #31]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 809a 	bne.w	8007410 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	899b      	ldrh	r3, [r3, #12]
 80072e6:	461a      	mov	r2, r3
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80072ee:	fb00 f202 	mul.w	r2, r0, r2
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	440b      	add	r3, r1
 80072f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <put_fat+0x11a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	b2db      	uxtb	r3, r3
 8007308:	e00e      	b.n	8007328 <put_fat+0x138>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b25b      	sxtb	r3, r3
 8007310:	f023 030f 	bic.w	r3, r3, #15
 8007314:	b25a      	sxtb	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	b25b      	sxtb	r3, r3
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	b25b      	sxtb	r3, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	b25b      	sxtb	r3, r3
 8007326:	b2db      	uxtb	r3, r3
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	70da      	strb	r2, [r3, #3]
			break;
 8007332:	e072      	b.n	800741a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	899b      	ldrh	r3, [r3, #12]
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	fbb3 f3f1 	udiv	r3, r3, r1
 8007348:	4413      	add	r3, r2
 800734a:	4619      	mov	r1, r3
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff fdbf 	bl	8006ed0 <move_window>
 8007352:	4603      	mov	r3, r0
 8007354:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d15b      	bne.n	8007414 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	8992      	ldrh	r2, [r2, #12]
 800736a:	fbb3 f0f2 	udiv	r0, r3, r2
 800736e:	fb00 f202 	mul.w	r2, r0, r2
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	440b      	add	r3, r1
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	b292      	uxth	r2, r2
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fb32 	bl	80069e6 <st_word>
			fs->wflag = 1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	70da      	strb	r2, [r3, #3]
			break;
 8007388:	e047      	b.n	800741a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	899b      	ldrh	r3, [r3, #12]
 8007392:	089b      	lsrs	r3, r3, #2
 8007394:	b29b      	uxth	r3, r3
 8007396:	4619      	mov	r1, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	fbb3 f3f1 	udiv	r3, r3, r1
 800739e:	4413      	add	r3, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f7ff fd94 	bl	8006ed0 <move_window>
 80073a8:	4603      	mov	r3, r0
 80073aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073ac:	7ffb      	ldrb	r3, [r7, #31]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d132      	bne.n	8007418 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	8992      	ldrh	r2, [r2, #12]
 80073c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80073ca:	fb00 f202 	mul.w	r2, r0, r2
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	440b      	add	r3, r1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fae4 	bl	80069a0 <ld_dword>
 80073d8:	4603      	mov	r3, r0
 80073da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80073de:	4323      	orrs	r3, r4
 80073e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	8992      	ldrh	r2, [r2, #12]
 80073f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f4:	fb00 f202 	mul.w	r2, r0, r2
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	440b      	add	r3, r1
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fb0c 	bl	8006a1c <st_dword>
			fs->wflag = 1;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	70da      	strb	r2, [r3, #3]
			break;
 800740a:	e006      	b.n	800741a <put_fat+0x22a>
			if (res != FR_OK) break;
 800740c:	bf00      	nop
 800740e:	e004      	b.n	800741a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007418:	bf00      	nop
		}
	}
	return res;
 800741a:	7ffb      	ldrb	r3, [r7, #31]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3724      	adds	r7, #36	@ 0x24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd90      	pop	{r4, r7, pc}

08007424 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d904      	bls.n	800744a <remove_chain+0x26>
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	d301      	bcc.n	800744e <remove_chain+0x2a>
 800744a:	2302      	movs	r3, #2
 800744c:	e04b      	b.n	80074e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007454:	f04f 32ff 	mov.w	r2, #4294967295
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	69b8      	ldr	r0, [r7, #24]
 800745c:	f7ff fec8 	bl	80071f0 <put_fat>
 8007460:	4603      	mov	r3, r0
 8007462:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007464:	7ffb      	ldrb	r3, [r7, #31]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <remove_chain+0x4a>
 800746a:	7ffb      	ldrb	r3, [r7, #31]
 800746c:	e03b      	b.n	80074e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7ff fdea 	bl	800704a <get_fat>
 8007476:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d031      	beq.n	80074e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <remove_chain+0x64>
 8007484:	2302      	movs	r3, #2
 8007486:	e02e      	b.n	80074e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d101      	bne.n	8007494 <remove_chain+0x70>
 8007490:	2301      	movs	r3, #1
 8007492:	e028      	b.n	80074e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007494:	2200      	movs	r2, #0
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	69b8      	ldr	r0, [r7, #24]
 800749a:	f7ff fea9 	bl	80071f0 <put_fat>
 800749e:	4603      	mov	r3, r0
 80074a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80074a2:	7ffb      	ldrb	r3, [r7, #31]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <remove_chain+0x88>
 80074a8:	7ffb      	ldrb	r3, [r7, #31]
 80074aa:	e01c      	b.n	80074e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	3b02      	subs	r3, #2
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20b      	bcs.n	80074d2 <remove_chain+0xae>
			fs->free_clst++;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	791b      	ldrb	r3, [r3, #4]
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3c6      	bcc.n	800746e <remove_chain+0x4a>
 80074e0:	e000      	b.n	80074e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80074e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b088      	sub	sp, #32
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <create_chain+0x2c>
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	429a      	cmp	r2, r3
 8007518:	d31b      	bcc.n	8007552 <create_chain+0x64>
 800751a:	2301      	movs	r3, #1
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	e018      	b.n	8007552 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fd91 	bl	800704a <get_fat>
 8007528:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d801      	bhi.n	8007534 <create_chain+0x46>
 8007530:	2301      	movs	r3, #1
 8007532:	e070      	b.n	8007616 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d101      	bne.n	8007540 <create_chain+0x52>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	e06a      	b.n	8007616 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	429a      	cmp	r2, r3
 8007548:	d201      	bcs.n	800754e <create_chain+0x60>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	e063      	b.n	8007616 <create_chain+0x128>
		scl = clst;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	3301      	adds	r3, #1
 800755a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	429a      	cmp	r2, r3
 8007564:	d307      	bcc.n	8007576 <create_chain+0x88>
				ncl = 2;
 8007566:	2302      	movs	r3, #2
 8007568:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	429a      	cmp	r2, r3
 8007570:	d901      	bls.n	8007576 <create_chain+0x88>
 8007572:	2300      	movs	r3, #0
 8007574:	e04f      	b.n	8007616 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007576:	69f9      	ldr	r1, [r7, #28]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff fd66 	bl	800704a <get_fat>
 800757e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00e      	beq.n	80075a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d003      	beq.n	8007594 <create_chain+0xa6>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d101      	bne.n	8007598 <create_chain+0xaa>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	e03e      	b.n	8007616 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	429a      	cmp	r2, r3
 800759e:	d1da      	bne.n	8007556 <create_chain+0x68>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e038      	b.n	8007616 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80075a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	69f9      	ldr	r1, [r7, #28]
 80075ac:	6938      	ldr	r0, [r7, #16]
 80075ae:	f7ff fe1f 	bl	80071f0 <put_fat>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <create_chain+0xe2>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d006      	beq.n	80075d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6938      	ldr	r0, [r7, #16]
 80075c8:	f7ff fe12 	bl	80071f0 <put_fat>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d116      	bne.n	8007604 <create_chain+0x116>
		fs->last_clst = ncl;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	3b02      	subs	r3, #2
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d804      	bhi.n	80075f4 <create_chain+0x106>
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	791b      	ldrb	r3, [r3, #4]
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	711a      	strb	r2, [r3, #4]
 8007602:	e007      	b.n	8007614 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d102      	bne.n	8007610 <create_chain+0x122>
 800760a:	f04f 33ff 	mov.w	r3, #4294967295
 800760e:	e000      	b.n	8007612 <create_chain+0x124>
 8007610:	2301      	movs	r3, #1
 8007612:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007614:	69fb      	ldr	r3, [r7, #28]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800761e:	b480      	push	{r7}
 8007620:	b087      	sub	sp, #28
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	3304      	adds	r3, #4
 8007634:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	899b      	ldrh	r3, [r3, #12]
 800763a:	461a      	mov	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	8952      	ldrh	r2, [r2, #10]
 8007646:	fbb3 f3f2 	udiv	r3, r3, r2
 800764a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	613a      	str	r2, [r7, #16]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <clmt_clust+0x42>
 800765c:	2300      	movs	r3, #0
 800765e:	e010      	b.n	8007682 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	429a      	cmp	r2, r3
 8007666:	d307      	bcc.n	8007678 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	3304      	adds	r3, #4
 8007674:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007676:	e7e9      	b.n	800764c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007678:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	4413      	add	r3, r2
}
 8007682:	4618      	mov	r0, r3
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b086      	sub	sp, #24
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076a4:	d204      	bcs.n	80076b0 <dir_sdi+0x22>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e071      	b.n	8007798 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <dir_sdi+0x46>
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d902      	bls.n	80076d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10c      	bne.n	80076f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	8912      	ldrh	r2, [r2, #8]
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d301      	bcc.n	80076ea <dir_sdi+0x5c>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e056      	b.n	8007798 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	61da      	str	r2, [r3, #28]
 80076f2:	e02d      	b.n	8007750 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	895b      	ldrh	r3, [r3, #10]
 80076f8:	461a      	mov	r2, r3
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	fb02 f303 	mul.w	r3, r2, r3
 8007702:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007704:	e019      	b.n	800773a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6979      	ldr	r1, [r7, #20]
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fc9d 	bl	800704a <get_fat>
 8007710:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d101      	bne.n	800771e <dir_sdi+0x90>
 800771a:	2301      	movs	r3, #1
 800771c:	e03c      	b.n	8007798 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d904      	bls.n	800772e <dir_sdi+0xa0>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	429a      	cmp	r2, r3
 800772c:	d301      	bcc.n	8007732 <dir_sdi+0xa4>
 800772e:	2302      	movs	r3, #2
 8007730:	e032      	b.n	8007798 <dir_sdi+0x10a>
			ofs -= csz;
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	429a      	cmp	r2, r3
 8007740:	d2e1      	bcs.n	8007706 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	6938      	ldr	r0, [r7, #16]
 8007746:	f7ff fc61 	bl	800700c <clust2sect>
 800774a:	4602      	mov	r2, r0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <dir_sdi+0xd4>
 800775e:	2302      	movs	r3, #2
 8007760:	e01a      	b.n	8007798 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	899b      	ldrh	r3, [r3, #12]
 800776a:	4619      	mov	r1, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007772:	441a      	add	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	899b      	ldrh	r3, [r3, #12]
 8007782:	461a      	mov	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	fbb3 f0f2 	udiv	r0, r3, r2
 800778a:	fb00 f202 	mul.w	r2, r0, r2
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	18ca      	adds	r2, r1, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	3320      	adds	r3, #32
 80077b6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <dir_next+0x28>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077c6:	d301      	bcc.n	80077cc <dir_next+0x2c>
 80077c8:	2304      	movs	r3, #4
 80077ca:	e0bb      	b.n	8007944 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	899b      	ldrh	r3, [r3, #12]
 80077d0:	461a      	mov	r2, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80077d8:	fb01 f202 	mul.w	r2, r1, r2
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f040 809d 	bne.w	800791e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	8912      	ldrh	r2, [r2, #8]
 80077fe:	4293      	cmp	r3, r2
 8007800:	f0c0 808d 	bcc.w	800791e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	61da      	str	r2, [r3, #28]
 800780a:	2304      	movs	r3, #4
 800780c:	e09a      	b.n	8007944 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	899b      	ldrh	r3, [r3, #12]
 8007812:	461a      	mov	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	fbb3 f3f2 	udiv	r3, r3, r2
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	8952      	ldrh	r2, [r2, #10]
 800781e:	3a01      	subs	r2, #1
 8007820:	4013      	ands	r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d17b      	bne.n	800791e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7ff fc0b 	bl	800704a <get_fat>
 8007834:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d801      	bhi.n	8007840 <dir_next+0xa0>
 800783c:	2302      	movs	r3, #2
 800783e:	e081      	b.n	8007944 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007846:	d101      	bne.n	800784c <dir_next+0xac>
 8007848:	2301      	movs	r3, #1
 800784a:	e07b      	b.n	8007944 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	429a      	cmp	r2, r3
 8007854:	d359      	bcc.n	800790a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	61da      	str	r2, [r3, #28]
 8007862:	2304      	movs	r3, #4
 8007864:	e06e      	b.n	8007944 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7ff fe3d 	bl	80074ee <create_chain>
 8007874:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <dir_next+0xe0>
 800787c:	2307      	movs	r3, #7
 800787e:	e061      	b.n	8007944 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <dir_next+0xea>
 8007886:	2302      	movs	r3, #2
 8007888:	e05c      	b.n	8007944 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d101      	bne.n	8007896 <dir_next+0xf6>
 8007892:	2301      	movs	r3, #1
 8007894:	e056      	b.n	8007944 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff fad6 	bl	8006e48 <sync_window>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <dir_next+0x106>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e04e      	b.n	8007944 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	899b      	ldrh	r3, [r3, #12]
 80078b0:	461a      	mov	r2, r3
 80078b2:	2100      	movs	r1, #0
 80078b4:	f7ff f8ff 	bl	8006ab6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	6979      	ldr	r1, [r7, #20]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff fba4 	bl	800700c <clust2sect>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80078ca:	e012      	b.n	80078f2 <dir_next+0x152>
						fs->wflag = 1;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff fab8 	bl	8006e48 <sync_window>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <dir_next+0x142>
 80078de:	2301      	movs	r3, #1
 80078e0:	e030      	b.n	8007944 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3301      	adds	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	895b      	ldrh	r3, [r3, #10]
 80078f6:	461a      	mov	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d3e6      	bcc.n	80078cc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad2      	subs	r2, r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff fb7a 	bl	800700c <clust2sect>
 8007918:	4602      	mov	r2, r0
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	899b      	ldrh	r3, [r3, #12]
 800792e:	461a      	mov	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	fbb3 f0f2 	udiv	r0, r3, r2
 8007936:	fb00 f202 	mul.w	r2, r0, r2
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	18ca      	adds	r2, r1, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff fe95 	bl	800768e <dir_sdi>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d12b      	bne.n	80079c6 <dir_alloc+0x7a>
		n = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff faa9 	bl	8006ed0 <move_window>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11d      	bne.n	80079c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2be5      	cmp	r3, #229	@ 0xe5
 8007990:	d004      	beq.n	800799c <dir_alloc+0x50>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d107      	bne.n	80079ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	3301      	adds	r3, #1
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d102      	bne.n	80079b0 <dir_alloc+0x64>
 80079aa:	e00c      	b.n	80079c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80079b0:	2101      	movs	r1, #1
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fef4 	bl	80077a0 <dir_next>
 80079b8:	4603      	mov	r3, r0
 80079ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0d7      	beq.n	8007972 <dir_alloc+0x26>
 80079c2:	e000      	b.n	80079c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80079c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d101      	bne.n	80079d0 <dir_alloc+0x84>
 80079cc:	2307      	movs	r3, #7
 80079ce:	75fb      	strb	r3, [r7, #23]
	return res;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	331a      	adds	r3, #26
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe ffc1 	bl	8006970 <ld_word>
 80079ee:	4603      	mov	r3, r0
 80079f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d109      	bne.n	8007a0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe ffb6 	bl	8006970 <ld_word>
 8007a04:	4603      	mov	r3, r0
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	331a      	adds	r3, #26
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	b292      	uxth	r2, r2
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe ffd9 	bl	80069e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d109      	bne.n	8007a50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f103 0214 	add.w	r2, r3, #20
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f7fe ffcb 	bl	80069e6 <st_word>
	}
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007a58:	b590      	push	{r4, r7, lr}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	331a      	adds	r3, #26
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe ff82 	bl	8006970 <ld_word>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <cmp_lfn+0x1e>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e059      	b.n	8007b2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a7e:	1e5a      	subs	r2, r3, #1
 8007a80:	4613      	mov	r3, r2
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	81fb      	strh	r3, [r7, #14]
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e033      	b.n	8007afe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007a96:	4a27      	ldr	r2, [pc, #156]	@ (8007b34 <cmp_lfn+0xdc>)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe ff63 	bl	8006970 <ld_word>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007aae:	89fb      	ldrh	r3, [r7, #14]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2bfe      	cmp	r3, #254	@ 0xfe
 8007ab8:	d812      	bhi.n	8007ae0 <cmp_lfn+0x88>
 8007aba:	89bb      	ldrh	r3, [r7, #12]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f002 f831 	bl	8009b24 <ff_wtoupper>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	461c      	mov	r4, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	617a      	str	r2, [r7, #20]
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f002 f825 	bl	8009b24 <ff_wtoupper>
 8007ada:	4603      	mov	r3, r0
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d001      	beq.n	8007ae4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e022      	b.n	8007b2a <cmp_lfn+0xd2>
			}
			wc = uc;
 8007ae4:	89bb      	ldrh	r3, [r7, #12]
 8007ae6:	81fb      	strh	r3, [r7, #14]
 8007ae8:	e006      	b.n	8007af8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007aea:	89bb      	ldrh	r3, [r7, #12]
 8007aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d001      	beq.n	8007af8 <cmp_lfn+0xa0>
 8007af4:	2300      	movs	r3, #0
 8007af6:	e018      	b.n	8007b2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	3301      	adds	r3, #1
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d9c8      	bls.n	8007a96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <cmp_lfn+0xd0>
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <cmp_lfn+0xd0>
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <cmp_lfn+0xd0>
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007b28:	2301      	movs	r3, #1
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd90      	pop	{r4, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	08009dc0 	.word	0x08009dc0

08007b38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	460b      	mov	r3, r1
 8007b48:	71fb      	strb	r3, [r7, #7]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	330d      	adds	r3, #13
 8007b52:	79ba      	ldrb	r2, [r7, #6]
 8007b54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	330b      	adds	r3, #11
 8007b5a:	220f      	movs	r2, #15
 8007b5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	330c      	adds	r3, #12
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	331a      	adds	r3, #26
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe ff3a 	bl	80069e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	4613      	mov	r3, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	82fb      	strh	r3, [r7, #22]
 8007b86:	2300      	movs	r3, #0
 8007b88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <put_lfn+0x6c>
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	61fa      	str	r2, [r7, #28]
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007ba4:	4a17      	ldr	r2, [pc, #92]	@ (8007c04 <put_lfn+0xcc>)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	4413      	add	r3, r2
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	8afa      	ldrh	r2, [r7, #22]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe ff15 	bl	80069e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007bbc:	8afb      	ldrh	r3, [r7, #22]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <put_lfn+0x90>
 8007bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007bc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	61bb      	str	r3, [r7, #24]
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b0c      	cmp	r3, #12
 8007bd2:	d9da      	bls.n	8007b8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007bd4:	8afb      	ldrh	r3, [r7, #22]
 8007bd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d006      	beq.n	8007bec <put_lfn+0xb4>
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d103      	bne.n	8007bf4 <put_lfn+0xbc>
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	79fa      	ldrb	r2, [r7, #7]
 8007bf8:	701a      	strb	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	08009dc0 	.word	0x08009dc0

08007c08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	@ 0x30
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007c16:	220b      	movs	r2, #11
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7fe ff2a 	bl	8006a74 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d92b      	bls.n	8007c7e <gen_numname+0x76>
		sr = seq;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007c2a:	e022      	b.n	8007c72 <gen_numname+0x6a>
			wc = *lfn++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007c36:	2300      	movs	r3, #0
 8007c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c3a:	e017      	b.n	8007c6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	005a      	lsls	r2, r3, #1
 8007c40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	4413      	add	r3, r2
 8007c48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007c4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <gen_numname+0x5e>
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007c60:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007c64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	3301      	adds	r3, #1
 8007c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6e:	2b0f      	cmp	r3, #15
 8007c70:	d9e4      	bls.n	8007c3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1d8      	bne.n	8007c2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007c7e:	2307      	movs	r3, #7
 8007c80:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	3330      	adds	r3, #48	@ 0x30
 8007c8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007c92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c96:	2b39      	cmp	r3, #57	@ 0x39
 8007c98:	d904      	bls.n	8007ca4 <gen_numname+0x9c>
 8007c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c9e:	3307      	adds	r3, #7
 8007ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	1e5a      	subs	r2, r3, #1
 8007ca8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007caa:	3330      	adds	r3, #48	@ 0x30
 8007cac:	443b      	add	r3, r7
 8007cae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007cb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	091b      	lsrs	r3, r3, #4
 8007cba:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1df      	bne.n	8007c82 <gen_numname+0x7a>
	ns[i] = '~';
 8007cc2:	f107 0214 	add.w	r2, r7, #20
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	4413      	add	r3, r2
 8007cca:	227e      	movs	r2, #126	@ 0x7e
 8007ccc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd2:	e002      	b.n	8007cda <gen_numname+0xd2>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d205      	bcs.n	8007cee <gen_numname+0xe6>
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce6:	4413      	add	r3, r2
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d1f2      	bne.n	8007cd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	2b07      	cmp	r3, #7
 8007cf2:	d807      	bhi.n	8007d04 <gen_numname+0xfc>
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cfa:	3330      	adds	r3, #48	@ 0x30
 8007cfc:	443b      	add	r3, r7
 8007cfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007d02:	e000      	b.n	8007d06 <gen_numname+0xfe>
 8007d04:	2120      	movs	r1, #32
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	460a      	mov	r2, r1
 8007d12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	2b07      	cmp	r3, #7
 8007d18:	d9e9      	bls.n	8007cee <gen_numname+0xe6>
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	3730      	adds	r7, #48	@ 0x30
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007d30:	230b      	movs	r3, #11
 8007d32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	0852      	lsrs	r2, r2, #1
 8007d3a:	01db      	lsls	r3, r3, #7
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	1c59      	adds	r1, r3, #1
 8007d44:	6079      	str	r1, [r7, #4]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	4413      	add	r3, r2
 8007d4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1ed      	bne.n	8007d34 <sum_sfn+0x10>
	return sum;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b086      	sub	sp, #24
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fc89 	bl	800768e <dir_sdi>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <dir_find+0x24>
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	e0a9      	b.n	8007ede <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007d8a:	23ff      	movs	r3, #255	@ 0xff
 8007d8c:	753b      	strb	r3, [r7, #20]
 8007d8e:	7d3b      	ldrb	r3, [r7, #20]
 8007d90:	757b      	strb	r3, [r7, #21]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6938      	ldr	r0, [r7, #16]
 8007da2:	f7ff f895 	bl	8006ed0 <move_window>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 8090 	bne.w	8007ed2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007dba:	7dbb      	ldrb	r3, [r7, #22]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <dir_find+0x60>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	75fb      	strb	r3, [r7, #23]
 8007dc4:	e08a      	b.n	8007edc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	330b      	adds	r3, #11
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7bfa      	ldrb	r2, [r7, #15]
 8007dd8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007dda:	7dbb      	ldrb	r3, [r7, #22]
 8007ddc:	2be5      	cmp	r3, #229	@ 0xe5
 8007dde:	d007      	beq.n	8007df0 <dir_find+0x8a>
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <dir_find+0x98>
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b0f      	cmp	r3, #15
 8007dee:	d006      	beq.n	8007dfe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007df0:	23ff      	movs	r3, #255	@ 0xff
 8007df2:	757b      	strb	r3, [r7, #21]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8007dfc:	e05e      	b.n	8007ebc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b0f      	cmp	r3, #15
 8007e02:	d136      	bne.n	8007e72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d154      	bne.n	8007ebc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
 8007e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00d      	beq.n	8007e38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	7b5b      	ldrb	r3, [r3, #13]
 8007e22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007e24:	7dbb      	ldrb	r3, [r7, #22]
 8007e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e2a:	75bb      	strb	r3, [r7, #22]
 8007e2c:	7dbb      	ldrb	r3, [r7, #22]
 8007e2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007e38:	7dba      	ldrb	r2, [r7, #22]
 8007e3a:	7d7b      	ldrb	r3, [r7, #21]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d115      	bne.n	8007e6c <dir_find+0x106>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	330d      	adds	r3, #13
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	7d3a      	ldrb	r2, [r7, #20]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d10e      	bne.n	8007e6c <dir_find+0x106>
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f7ff fdfd 	bl	8007a58 <cmp_lfn>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <dir_find+0x106>
 8007e64:	7d7b      	ldrb	r3, [r7, #21]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e000      	b.n	8007e6e <dir_find+0x108>
 8007e6c:	23ff      	movs	r3, #255	@ 0xff
 8007e6e:	757b      	strb	r3, [r7, #21]
 8007e70:	e024      	b.n	8007ebc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007e72:	7d7b      	ldrb	r3, [r7, #21]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <dir_find+0x126>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff ff51 	bl	8007d24 <sum_sfn>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461a      	mov	r2, r3
 8007e86:	7d3b      	ldrb	r3, [r7, #20]
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d024      	beq.n	8007ed6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <dir_find+0x14a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a18      	ldr	r0, [r3, #32]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3324      	adds	r3, #36	@ 0x24
 8007ea2:	220b      	movs	r2, #11
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f7fe fe21 	bl	8006aec <mem_cmp>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d014      	beq.n	8007eda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007eb0:	23ff      	movs	r3, #255	@ 0xff
 8007eb2:	757b      	strb	r3, [r7, #21]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eba:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fc6e 	bl	80077a0 <dir_next>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f43f af65 	beq.w	8007d9a <dir_find+0x34>
 8007ed0:	e004      	b.n	8007edc <dir_find+0x176>
		if (res != FR_OK) break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007eda:	bf00      	nop

	return res;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08c      	sub	sp, #48	@ 0x30
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007efc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <dir_register+0x20>
 8007f04:	2306      	movs	r3, #6
 8007f06:	e0e0      	b.n	80080ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007f08:	2300      	movs	r3, #0
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0c:	e002      	b.n	8007f14 <dir_register+0x2c>
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	3301      	adds	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f4      	bne.n	8007f0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007f2a:	f107 030c 	add.w	r3, r7, #12
 8007f2e:	220c      	movs	r2, #12
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fd9f 	bl	8006a74 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d032      	beq.n	8007fa6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2240      	movs	r2, #64	@ 0x40
 8007f44:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007f48:	2301      	movs	r3, #1
 8007f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f4c:	e016      	b.n	8007f7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	f107 010c 	add.w	r1, r7, #12
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	f7ff fe53 	bl	8007c08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff feff 	bl	8007d66 <dir_find>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	3301      	adds	r3, #1
 8007f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	2b63      	cmp	r3, #99	@ 0x63
 8007f80:	d9e5      	bls.n	8007f4e <dir_register+0x66>
 8007f82:	e000      	b.n	8007f86 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007f84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f88:	2b64      	cmp	r3, #100	@ 0x64
 8007f8a:	d101      	bne.n	8007f90 <dir_register+0xa8>
 8007f8c:	2307      	movs	r3, #7
 8007f8e:	e09c      	b.n	80080ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007f90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d002      	beq.n	8007f9e <dir_register+0xb6>
 8007f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f9c:	e095      	b.n	80080ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007f9e:	7dfa      	ldrb	r2, [r7, #23]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d007      	beq.n	8007fc0 <dir_register+0xd8>
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	4a47      	ldr	r2, [pc, #284]	@ (80080d4 <dir_register+0x1ec>)
 8007fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fba:	089b      	lsrs	r3, r3, #2
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <dir_register+0xda>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007fc4:	6a39      	ldr	r1, [r7, #32]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff fcc0 	bl	800794c <dir_alloc>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d148      	bne.n	800806c <dir_register+0x184>
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	623b      	str	r3, [r7, #32]
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d042      	beq.n	800806c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695a      	ldr	r2, [r3, #20]
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	015b      	lsls	r3, r3, #5
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff fb4b 	bl	800768e <dir_sdi>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008002:	2b00      	cmp	r3, #0
 8008004:	d132      	bne.n	800806c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3324      	adds	r3, #36	@ 0x24
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff fe8a 	bl	8007d24 <sum_sfn>
 8008010:	4603      	mov	r3, r0
 8008012:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	4619      	mov	r1, r3
 800801a:	69f8      	ldr	r0, [r7, #28]
 800801c:	f7fe ff58 	bl	8006ed0 <move_window>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008026:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800802a:	2b00      	cmp	r3, #0
 800802c:	d11d      	bne.n	800806a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	6918      	ldr	r0, [r3, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a19      	ldr	r1, [r3, #32]
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	7efb      	ldrb	r3, [r7, #27]
 800803c:	f7ff fd7c 	bl	8007b38 <put_lfn>
				fs->wflag = 1;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	2201      	movs	r2, #1
 8008044:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008046:	2100      	movs	r1, #0
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fba9 	bl	80077a0 <dir_next>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008054:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d107      	bne.n	800806c <dir_register+0x184>
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	3b01      	subs	r3, #1
 8008060:	623b      	str	r3, [r7, #32]
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1d5      	bne.n	8008014 <dir_register+0x12c>
 8008068:	e000      	b.n	800806c <dir_register+0x184>
				if (res != FR_OK) break;
 800806a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800806c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008070:	2b00      	cmp	r3, #0
 8008072:	d128      	bne.n	80080c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4619      	mov	r1, r3
 800807a:	69f8      	ldr	r0, [r7, #28]
 800807c:	f7fe ff28 	bl	8006ed0 <move_window>
 8008080:	4603      	mov	r3, r0
 8008082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800808a:	2b00      	cmp	r3, #0
 800808c:	d11b      	bne.n	80080c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	2220      	movs	r2, #32
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fd0d 	bl	8006ab6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a18      	ldr	r0, [r3, #32]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3324      	adds	r3, #36	@ 0x24
 80080a4:	220b      	movs	r2, #11
 80080a6:	4619      	mov	r1, r3
 80080a8:	f7fe fce4 	bl	8006a74 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	330c      	adds	r3, #12
 80080b8:	f002 0218 	and.w	r2, r2, #24
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	2201      	movs	r2, #1
 80080c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80080c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3730      	adds	r7, #48	@ 0x30
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	4ec4ec4f 	.word	0x4ec4ec4f

080080d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	@ 0x28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	61ba      	str	r2, [r7, #24]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4413      	add	r3, r2
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008108:	2b1f      	cmp	r3, #31
 800810a:	d940      	bls.n	800818e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800810c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800810e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008110:	d006      	beq.n	8008120 <create_name+0x48>
 8008112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008114:	2b5c      	cmp	r3, #92	@ 0x5c
 8008116:	d110      	bne.n	800813a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008118:	e002      	b.n	8008120 <create_name+0x48>
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	3301      	adds	r3, #1
 800811e:	61bb      	str	r3, [r7, #24]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	4413      	add	r3, r2
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b2f      	cmp	r3, #47	@ 0x2f
 800812a:	d0f6      	beq.n	800811a <create_name+0x42>
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	4413      	add	r3, r2
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b5c      	cmp	r3, #92	@ 0x5c
 8008136:	d0f0      	beq.n	800811a <create_name+0x42>
			break;
 8008138:	e02a      	b.n	8008190 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2bfe      	cmp	r3, #254	@ 0xfe
 800813e:	d901      	bls.n	8008144 <create_name+0x6c>
 8008140:	2306      	movs	r3, #6
 8008142:	e17d      	b.n	8008440 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008146:	b2db      	uxtb	r3, r3
 8008148:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800814a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800814c:	2101      	movs	r1, #1
 800814e:	4618      	mov	r0, r3
 8008150:	f001 fcac 	bl	8009aac <ff_convert>
 8008154:	4603      	mov	r3, r0
 8008156:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <create_name+0x8a>
 800815e:	2306      	movs	r3, #6
 8008160:	e16e      	b.n	8008440 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008164:	2b7f      	cmp	r3, #127	@ 0x7f
 8008166:	d809      	bhi.n	800817c <create_name+0xa4>
 8008168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800816a:	4619      	mov	r1, r3
 800816c:	488d      	ldr	r0, [pc, #564]	@ (80083a4 <create_name+0x2cc>)
 800816e:	f7fe fce4 	bl	8006b3a <chk_chr>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <create_name+0xa4>
 8008178:	2306      	movs	r3, #6
 800817a:	e161      	b.n	8008440 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	617a      	str	r2, [r7, #20]
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800818a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800818c:	e7b4      	b.n	80080f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800818e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	441a      	add	r2, r3
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800819a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800819c:	2b1f      	cmp	r3, #31
 800819e:	d801      	bhi.n	80081a4 <create_name+0xcc>
 80081a0:	2304      	movs	r3, #4
 80081a2:	e000      	b.n	80081a6 <create_name+0xce>
 80081a4:	2300      	movs	r3, #0
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80081aa:	e011      	b.n	80081d0 <create_name+0xf8>
		w = lfn[di - 1];
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80081b2:	3b01      	subs	r3, #1
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80081be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d002      	beq.n	80081ca <create_name+0xf2>
 80081c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081c8:	d106      	bne.n	80081d8 <create_name+0x100>
		di--;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1ea      	bne.n	80081ac <create_name+0xd4>
 80081d6:	e000      	b.n	80081da <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80081d8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <create_name+0x118>
 80081ec:	2306      	movs	r3, #6
 80081ee:	e127      	b.n	8008440 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3324      	adds	r3, #36	@ 0x24
 80081f4:	220b      	movs	r2, #11
 80081f6:	2120      	movs	r1, #32
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fc5c 	bl	8006ab6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80081fe:	2300      	movs	r3, #0
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	e002      	b.n	800820a <create_name+0x132>
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	3301      	adds	r3, #1
 8008208:	61bb      	str	r3, [r7, #24]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	2b20      	cmp	r3, #32
 8008216:	d0f5      	beq.n	8008204 <create_name+0x12c>
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	2b2e      	cmp	r3, #46	@ 0x2e
 8008224:	d0ee      	beq.n	8008204 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <create_name+0x168>
 800822c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008230:	f043 0303 	orr.w	r3, r3, #3
 8008234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008238:	e002      	b.n	8008240 <create_name+0x168>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	3b01      	subs	r3, #1
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <create_name+0x182>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	3b01      	subs	r3, #1
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	2b2e      	cmp	r3, #46	@ 0x2e
 8008258:	d1ef      	bne.n	800823a <create_name+0x162>

	i = b = 0; ni = 8;
 800825a:	2300      	movs	r3, #0
 800825c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008260:	2300      	movs	r3, #0
 8008262:	623b      	str	r3, [r7, #32]
 8008264:	2308      	movs	r3, #8
 8008266:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	61ba      	str	r2, [r7, #24]
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008278:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8090 	beq.w	80083a0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008280:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008282:	2b20      	cmp	r3, #32
 8008284:	d006      	beq.n	8008294 <create_name+0x1bc>
 8008286:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008288:	2b2e      	cmp	r3, #46	@ 0x2e
 800828a:	d10a      	bne.n	80082a2 <create_name+0x1ca>
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	429a      	cmp	r2, r3
 8008292:	d006      	beq.n	80082a2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008298:	f043 0303 	orr.w	r3, r3, #3
 800829c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80082a0:	e07d      	b.n	800839e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80082a2:	6a3a      	ldr	r2, [r7, #32]
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d203      	bcs.n	80082b2 <create_name+0x1da>
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d123      	bne.n	80082fa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	2b0b      	cmp	r3, #11
 80082b6:	d106      	bne.n	80082c6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80082b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082bc:	f043 0303 	orr.w	r3, r3, #3
 80082c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80082c4:	e075      	b.n	80083b2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d005      	beq.n	80082da <create_name+0x202>
 80082ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082d2:	f043 0303 	orr.w	r3, r3, #3
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d866      	bhi.n	80083b0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	2308      	movs	r3, #8
 80082e8:	623b      	str	r3, [r7, #32]
 80082ea:	230b      	movs	r3, #11
 80082ec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80082ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80082f8:	e051      	b.n	800839e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80082fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80082fe:	d914      	bls.n	800832a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008300:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fbd1 	bl	8009aac <ff_convert>
 800830a:	4603      	mov	r3, r0
 800830c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800830e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <create_name+0x246>
 8008314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008316:	3b80      	subs	r3, #128	@ 0x80
 8008318:	4a23      	ldr	r2, [pc, #140]	@ (80083a8 <create_name+0x2d0>)
 800831a:	5cd3      	ldrb	r3, [r2, r3]
 800831c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800831e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008322:	f043 0302 	orr.w	r3, r3, #2
 8008326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800832a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <create_name+0x268>
 8008330:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008332:	4619      	mov	r1, r3
 8008334:	481d      	ldr	r0, [pc, #116]	@ (80083ac <create_name+0x2d4>)
 8008336:	f7fe fc00 	bl	8006b3a <chk_chr>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008340:	235f      	movs	r3, #95	@ 0x5f
 8008342:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008348:	f043 0303 	orr.w	r3, r3, #3
 800834c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008350:	e01b      	b.n	800838a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008354:	2b40      	cmp	r3, #64	@ 0x40
 8008356:	d909      	bls.n	800836c <create_name+0x294>
 8008358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800835a:	2b5a      	cmp	r3, #90	@ 0x5a
 800835c:	d806      	bhi.n	800836c <create_name+0x294>
					b |= 2;
 800835e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008362:	f043 0302 	orr.w	r3, r3, #2
 8008366:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800836a:	e00e      	b.n	800838a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800836c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800836e:	2b60      	cmp	r3, #96	@ 0x60
 8008370:	d90b      	bls.n	800838a <create_name+0x2b2>
 8008372:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008374:	2b7a      	cmp	r3, #122	@ 0x7a
 8008376:	d808      	bhi.n	800838a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008386:	3b20      	subs	r3, #32
 8008388:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	623a      	str	r2, [r7, #32]
 8008390:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008392:	b2d1      	uxtb	r1, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4413      	add	r3, r2
 8008398:	460a      	mov	r2, r1
 800839a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800839e:	e763      	b.n	8008268 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80083a0:	bf00      	nop
 80083a2:	e006      	b.n	80083b2 <create_name+0x2da>
 80083a4:	08009ccc 	.word	0x08009ccc
 80083a8:	08009d40 	.word	0x08009d40
 80083ac:	08009cd8 	.word	0x08009cd8
			if (si > di) break;			/* No extension */
 80083b0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083b8:	2be5      	cmp	r3, #229	@ 0xe5
 80083ba:	d103      	bne.n	80083c4 <create_name+0x2ec>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2205      	movs	r2, #5
 80083c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d104      	bne.n	80083d4 <create_name+0x2fc>
 80083ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80083d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083d8:	f003 030c 	and.w	r3, r3, #12
 80083dc:	2b0c      	cmp	r3, #12
 80083de:	d005      	beq.n	80083ec <create_name+0x314>
 80083e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d105      	bne.n	80083f8 <create_name+0x320>
 80083ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f0:	f043 0302 	orr.w	r3, r3, #2
 80083f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80083f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d117      	bne.n	8008434 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008404:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <create_name+0x344>
 8008410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008414:	f043 0310 	orr.w	r3, r3, #16
 8008418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800841c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b04      	cmp	r3, #4
 8008426:	d105      	bne.n	8008434 <create_name+0x35c>
 8008428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800842c:	f043 0308 	orr.w	r3, r3, #8
 8008430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800843a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800843e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008440:	4618      	mov	r0, r3
 8008442:	3728      	adds	r7, #40	@ 0x28
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800845c:	e002      	b.n	8008464 <follow_path+0x1c>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b2f      	cmp	r3, #47	@ 0x2f
 800846a:	d0f8      	beq.n	800845e <follow_path+0x16>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b5c      	cmp	r3, #92	@ 0x5c
 8008472:	d0f4      	beq.n	800845e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b1f      	cmp	r3, #31
 8008480:	d80a      	bhi.n	8008498 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2280      	movs	r2, #128	@ 0x80
 8008486:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800848a:	2100      	movs	r1, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff f8fe 	bl	800768e <dir_sdi>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]
 8008496:	e048      	b.n	800852a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008498:	463b      	mov	r3, r7
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fe1b 	bl	80080d8 <create_name>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d139      	bne.n	8008520 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fc5a 	bl	8007d66 <dir_find>
 80084b2:	4603      	mov	r3, r0
 80084b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80084bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d12c      	bne.n	8008524 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084ca:	7afb      	ldrb	r3, [r7, #11]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d127      	bne.n	8008524 <follow_path+0xdc>
 80084d4:	2305      	movs	r3, #5
 80084d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80084d8:	e024      	b.n	8008524 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d121      	bne.n	8008528 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	799b      	ldrb	r3, [r3, #6]
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80084f0:	2305      	movs	r3, #5
 80084f2:	75fb      	strb	r3, [r7, #23]
 80084f4:	e019      	b.n	800852a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	8992      	ldrh	r2, [r2, #12]
 8008504:	fbb3 f0f2 	udiv	r0, r3, r2
 8008508:	fb00 f202 	mul.w	r2, r0, r2
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	440b      	add	r3, r1
 8008510:	4619      	mov	r1, r3
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fa61 	bl	80079da <ld_clust>
 8008518:	4602      	mov	r2, r0
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800851e:	e7bb      	b.n	8008498 <follow_path+0x50>
			if (res != FR_OK) break;
 8008520:	bf00      	nop
 8008522:	e002      	b.n	800852a <follow_path+0xe2>
				break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008528:	bf00      	nop
			}
		}
	}

	return res;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800853c:	f04f 33ff 	mov.w	r3, #4294967295
 8008540:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d031      	beq.n	80085ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e002      	b.n	8008558 <get_ldnumber+0x24>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	3301      	adds	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b1f      	cmp	r3, #31
 800855e:	d903      	bls.n	8008568 <get_ldnumber+0x34>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b3a      	cmp	r3, #58	@ 0x3a
 8008566:	d1f4      	bne.n	8008552 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b3a      	cmp	r3, #58	@ 0x3a
 800856e:	d11c      	bne.n	80085aa <get_ldnumber+0x76>
			tp = *path;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	60fa      	str	r2, [r7, #12]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	3b30      	subs	r3, #48	@ 0x30
 8008580:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b09      	cmp	r3, #9
 8008586:	d80e      	bhi.n	80085a6 <get_ldnumber+0x72>
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	429a      	cmp	r2, r3
 800858e:	d10a      	bne.n	80085a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d107      	bne.n	80085a6 <get_ldnumber+0x72>
					vol = (int)i;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	3301      	adds	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	e002      	b.n	80085b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085aa:	2300      	movs	r3, #0
 80085ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085ae:	693b      	ldr	r3, [r7, #16]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	70da      	strb	r2, [r3, #3]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe fc7a 	bl	8006ed0 <move_window>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <check_fs+0x2a>
 80085e2:	2304      	movs	r3, #4
 80085e4:	e038      	b.n	8008658 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3338      	adds	r3, #56	@ 0x38
 80085ea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe f9be 	bl	8006970 <ld_word>
 80085f4:	4603      	mov	r3, r0
 80085f6:	461a      	mov	r2, r3
 80085f8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d001      	beq.n	8008604 <check_fs+0x48>
 8008600:	2303      	movs	r3, #3
 8008602:	e029      	b.n	8008658 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800860a:	2be9      	cmp	r3, #233	@ 0xe9
 800860c:	d009      	beq.n	8008622 <check_fs+0x66>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008614:	2beb      	cmp	r3, #235	@ 0xeb
 8008616:	d11e      	bne.n	8008656 <check_fs+0x9a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800861e:	2b90      	cmp	r3, #144	@ 0x90
 8008620:	d119      	bne.n	8008656 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3338      	adds	r3, #56	@ 0x38
 8008626:	3336      	adds	r3, #54	@ 0x36
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe f9b9 	bl	80069a0 <ld_dword>
 800862e:	4603      	mov	r3, r0
 8008630:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008634:	4a0a      	ldr	r2, [pc, #40]	@ (8008660 <check_fs+0xa4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d101      	bne.n	800863e <check_fs+0x82>
 800863a:	2300      	movs	r3, #0
 800863c:	e00c      	b.n	8008658 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3338      	adds	r3, #56	@ 0x38
 8008642:	3352      	adds	r3, #82	@ 0x52
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe f9ab 	bl	80069a0 <ld_dword>
 800864a:	4603      	mov	r3, r0
 800864c:	4a05      	ldr	r2, [pc, #20]	@ (8008664 <check_fs+0xa8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <check_fs+0x9a>
 8008652:	2300      	movs	r3, #0
 8008654:	e000      	b.n	8008658 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008656:	2302      	movs	r3, #2
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	00544146 	.word	0x00544146
 8008664:	33544146 	.word	0x33544146

08008668 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b096      	sub	sp, #88	@ 0x58
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff ff59 	bl	8008534 <get_ldnumber>
 8008682:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008686:	2b00      	cmp	r3, #0
 8008688:	da01      	bge.n	800868e <find_volume+0x26>
 800868a:	230b      	movs	r3, #11
 800868c:	e265      	b.n	8008b5a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800868e:	4a9f      	ldr	r2, [pc, #636]	@ (800890c <find_volume+0x2a4>)
 8008690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008696:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <find_volume+0x3a>
 800869e:	230c      	movs	r3, #12
 80086a0:	e25b      	b.n	8008b5a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01a      	beq.n	80086ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80086b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ba:	785b      	ldrb	r3, [r3, #1]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe f8b7 	bl	8006830 <disk_status>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80086c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10c      	bne.n	80086ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <find_volume+0x82>
 80086da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80086e6:	230a      	movs	r3, #10
 80086e8:	e237      	b.n	8008b5a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80086ea:	2300      	movs	r3, #0
 80086ec:	e235      	b.n	8008b5a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80086ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80086f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe f8af 	bl	8006864 <disk_initialize>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800870c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008718:	2303      	movs	r3, #3
 800871a:	e21e      	b.n	8008b5a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <find_volume+0xca>
 8008722:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800872e:	230a      	movs	r3, #10
 8008730:	e213      	b.n	8008b5a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008734:	7858      	ldrb	r0, [r3, #1]
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	330c      	adds	r3, #12
 800873a:	461a      	mov	r2, r3
 800873c:	2102      	movs	r1, #2
 800873e:	f7fe f8f9 	bl	8006934 <disk_ioctl>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <find_volume+0xe4>
 8008748:	2301      	movs	r3, #1
 800874a:	e206      	b.n	8008b5a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800874c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874e:	899b      	ldrh	r3, [r3, #12]
 8008750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008754:	d80d      	bhi.n	8008772 <find_volume+0x10a>
 8008756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008758:	899b      	ldrh	r3, [r3, #12]
 800875a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800875e:	d308      	bcc.n	8008772 <find_volume+0x10a>
 8008760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008762:	899b      	ldrh	r3, [r3, #12]
 8008764:	461a      	mov	r2, r3
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	899b      	ldrh	r3, [r3, #12]
 800876a:	3b01      	subs	r3, #1
 800876c:	4013      	ands	r3, r2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <find_volume+0x10e>
 8008772:	2301      	movs	r3, #1
 8008774:	e1f1      	b.n	8008b5a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800877a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800877c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800877e:	f7ff ff1d 	bl	80085bc <check_fs>
 8008782:	4603      	mov	r3, r0
 8008784:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008788:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800878c:	2b02      	cmp	r3, #2
 800878e:	d149      	bne.n	8008824 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008790:	2300      	movs	r3, #0
 8008792:	643b      	str	r3, [r7, #64]	@ 0x40
 8008794:	e01e      	b.n	80087d4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008798:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800879c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80087a4:	4413      	add	r3, r2
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	3304      	adds	r3, #4
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d006      	beq.n	80087c0 <find_volume+0x158>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	3308      	adds	r3, #8
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe f8f2 	bl	80069a0 <ld_dword>
 80087bc:	4602      	mov	r2, r0
 80087be:	e000      	b.n	80087c2 <find_volume+0x15a>
 80087c0:	2200      	movs	r2, #0
 80087c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	3358      	adds	r3, #88	@ 0x58
 80087c8:	443b      	add	r3, r7
 80087ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d0:	3301      	adds	r3, #1
 80087d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80087d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d9dd      	bls.n	8008796 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80087da:	2300      	movs	r3, #0
 80087dc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80087de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <find_volume+0x182>
 80087e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e6:	3b01      	subs	r3, #1
 80087e8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80087ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	3358      	adds	r3, #88	@ 0x58
 80087f0:	443b      	add	r3, r7
 80087f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087f6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80087f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <find_volume+0x1a2>
 80087fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008800:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008802:	f7ff fedb 	bl	80085bc <check_fs>
 8008806:	4603      	mov	r3, r0
 8008808:	e000      	b.n	800880c <find_volume+0x1a4>
 800880a:	2303      	movs	r3, #3
 800880c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008814:	2b01      	cmp	r3, #1
 8008816:	d905      	bls.n	8008824 <find_volume+0x1bc>
 8008818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800881a:	3301      	adds	r3, #1
 800881c:	643b      	str	r3, [r7, #64]	@ 0x40
 800881e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008820:	2b03      	cmp	r3, #3
 8008822:	d9e2      	bls.n	80087ea <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008824:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008828:	2b04      	cmp	r3, #4
 800882a:	d101      	bne.n	8008830 <find_volume+0x1c8>
 800882c:	2301      	movs	r3, #1
 800882e:	e194      	b.n	8008b5a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008834:	2b01      	cmp	r3, #1
 8008836:	d901      	bls.n	800883c <find_volume+0x1d4>
 8008838:	230d      	movs	r3, #13
 800883a:	e18e      	b.n	8008b5a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800883c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883e:	3338      	adds	r3, #56	@ 0x38
 8008840:	330b      	adds	r3, #11
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe f894 	bl	8006970 <ld_word>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884e:	899b      	ldrh	r3, [r3, #12]
 8008850:	429a      	cmp	r2, r3
 8008852:	d001      	beq.n	8008858 <find_volume+0x1f0>
 8008854:	230d      	movs	r3, #13
 8008856:	e180      	b.n	8008b5a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885a:	3338      	adds	r3, #56	@ 0x38
 800885c:	3316      	adds	r3, #22
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe f886 	bl	8006970 <ld_word>
 8008864:	4603      	mov	r3, r0
 8008866:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <find_volume+0x214>
 800886e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008870:	3338      	adds	r3, #56	@ 0x38
 8008872:	3324      	adds	r3, #36	@ 0x24
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe f893 	bl	80069a0 <ld_dword>
 800887a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800887c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008880:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	789b      	ldrb	r3, [r3, #2]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d005      	beq.n	80088a0 <find_volume+0x238>
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	789b      	ldrb	r3, [r3, #2]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d001      	beq.n	80088a0 <find_volume+0x238>
 800889c:	230d      	movs	r3, #13
 800889e:	e15c      	b.n	8008b5a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	789b      	ldrb	r3, [r3, #2]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a8:	fb02 f303 	mul.w	r3, r2, r3
 80088ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80088ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088b4:	461a      	mov	r2, r3
 80088b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80088ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088bc:	895b      	ldrh	r3, [r3, #10]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d008      	beq.n	80088d4 <find_volume+0x26c>
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	895b      	ldrh	r3, [r3, #10]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	895b      	ldrh	r3, [r3, #10]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <find_volume+0x270>
 80088d4:	230d      	movs	r3, #13
 80088d6:	e140      	b.n	8008b5a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	3338      	adds	r3, #56	@ 0x38
 80088dc:	3311      	adds	r3, #17
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe f846 	bl	8006970 <ld_word>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	891b      	ldrh	r3, [r3, #8]
 80088f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088f2:	8992      	ldrh	r2, [r2, #12]
 80088f4:	0952      	lsrs	r2, r2, #5
 80088f6:	b292      	uxth	r2, r2
 80088f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80088fc:	fb01 f202 	mul.w	r2, r1, r2
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <find_volume+0x2a8>
 8008908:	230d      	movs	r3, #13
 800890a:	e126      	b.n	8008b5a <find_volume+0x4f2>
 800890c:	200022b8 	.word	0x200022b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	3338      	adds	r3, #56	@ 0x38
 8008914:	3313      	adds	r3, #19
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe f82a 	bl	8006970 <ld_word>
 800891c:	4603      	mov	r3, r0
 800891e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <find_volume+0x2cc>
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	3338      	adds	r3, #56	@ 0x38
 800892a:	3320      	adds	r3, #32
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe f837 	bl	80069a0 <ld_dword>
 8008932:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	3338      	adds	r3, #56	@ 0x38
 8008938:	330e      	adds	r3, #14
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe f818 	bl	8006970 <ld_word>
 8008940:	4603      	mov	r3, r0
 8008942:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008944:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <find_volume+0x2e6>
 800894a:	230d      	movs	r3, #13
 800894c:	e105      	b.n	8008b5a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800894e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008952:	4413      	add	r3, r2
 8008954:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008956:	8911      	ldrh	r1, [r2, #8]
 8008958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800895a:	8992      	ldrh	r2, [r2, #12]
 800895c:	0952      	lsrs	r2, r2, #5
 800895e:	b292      	uxth	r2, r2
 8008960:	fbb1 f2f2 	udiv	r2, r1, r2
 8008964:	b292      	uxth	r2, r2
 8008966:	4413      	add	r3, r2
 8008968:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800896a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800896c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896e:	429a      	cmp	r2, r3
 8008970:	d201      	bcs.n	8008976 <find_volume+0x30e>
 8008972:	230d      	movs	r3, #13
 8008974:	e0f1      	b.n	8008b5a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800897e:	8952      	ldrh	r2, [r2, #10]
 8008980:	fbb3 f3f2 	udiv	r3, r3, r2
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <find_volume+0x328>
 800898c:	230d      	movs	r3, #13
 800898e:	e0e4      	b.n	8008b5a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008990:	2303      	movs	r3, #3
 8008992:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800899c:	4293      	cmp	r3, r2
 800899e:	d802      	bhi.n	80089a6 <find_volume+0x33e>
 80089a0:	2302      	movs	r3, #2
 80089a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d802      	bhi.n	80089b6 <find_volume+0x34e>
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	1c9a      	adds	r2, r3, #2
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089c2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80089c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80089c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c8:	441a      	add	r2, r3
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80089ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	441a      	add	r2, r3
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80089d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d11e      	bne.n	8008a1e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	3338      	adds	r3, #56	@ 0x38
 80089e4:	332a      	adds	r3, #42	@ 0x2a
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd ffc2 	bl	8006970 <ld_word>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <find_volume+0x38e>
 80089f2:	230d      	movs	r3, #13
 80089f4:	e0b1      	b.n	8008b5a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	891b      	ldrh	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <find_volume+0x39a>
 80089fe:	230d      	movs	r3, #13
 8008a00:	e0ab      	b.n	8008b5a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	3338      	adds	r3, #56	@ 0x38
 8008a06:	332c      	adds	r3, #44	@ 0x2c
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fd ffc9 	bl	80069a0 <ld_dword>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1c:	e01f      	b.n	8008a5e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	891b      	ldrh	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <find_volume+0x3c2>
 8008a26:	230d      	movs	r3, #13
 8008a28:	e097      	b.n	8008b5a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a30:	441a      	add	r2, r3
 8008a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a34:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d103      	bne.n	8008a46 <find_volume+0x3de>
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	e00a      	b.n	8008a5c <find_volume+0x3f4>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	69da      	ldr	r2, [r3, #28]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4413      	add	r3, r2
 8008a50:	085a      	lsrs	r2, r3, #1
 8008a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a5c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	899b      	ldrh	r3, [r3, #12]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a6a:	440b      	add	r3, r1
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a70:	8989      	ldrh	r1, [r1, #12]
 8008a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d201      	bcs.n	8008a7e <find_volume+0x416>
 8008a7a:	230d      	movs	r3, #13
 8008a7c:	e06d      	b.n	8008b5a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	619a      	str	r2, [r3, #24]
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	2280      	movs	r2, #128	@ 0x80
 8008a92:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008a94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d149      	bne.n	8008b30 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	3338      	adds	r3, #56	@ 0x38
 8008aa0:	3330      	adds	r3, #48	@ 0x30
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fd ff64 	bl	8006970 <ld_word>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d140      	bne.n	8008b30 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ab6:	f7fe fa0b 	bl	8006ed0 <move_window>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d137      	bne.n	8008b30 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac8:	3338      	adds	r3, #56	@ 0x38
 8008aca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd ff4e 	bl	8006970 <ld_word>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d127      	bne.n	8008b30 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	3338      	adds	r3, #56	@ 0x38
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fd ff5b 	bl	80069a0 <ld_dword>
 8008aea:	4603      	mov	r3, r0
 8008aec:	4a1d      	ldr	r2, [pc, #116]	@ (8008b64 <find_volume+0x4fc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d11e      	bne.n	8008b30 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	3338      	adds	r3, #56	@ 0x38
 8008af6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fd ff50 	bl	80069a0 <ld_dword>
 8008b00:	4603      	mov	r3, r0
 8008b02:	4a19      	ldr	r2, [pc, #100]	@ (8008b68 <find_volume+0x500>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d113      	bne.n	8008b30 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	3338      	adds	r3, #56	@ 0x38
 8008b0c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd ff45 	bl	80069a0 <ld_dword>
 8008b16:	4602      	mov	r2, r0
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	3338      	adds	r3, #56	@ 0x38
 8008b20:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fd ff3b 	bl	80069a0 <ld_dword>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008b36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b38:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <find_volume+0x504>)
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <find_volume+0x504>)
 8008b42:	801a      	strh	r2, [r3, #0]
 8008b44:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <find_volume+0x504>)
 8008b46:	881a      	ldrh	r2, [r3, #0]
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	4a08      	ldr	r2, [pc, #32]	@ (8008b70 <find_volume+0x508>)
 8008b50:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b54:	f7fe f954 	bl	8006e00 <clear_lock>
#endif
	return FR_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3758      	adds	r7, #88	@ 0x58
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	41615252 	.word	0x41615252
 8008b68:	61417272 	.word	0x61417272
 8008b6c:	200022bc 	.word	0x200022bc
 8008b70:	200022e0 	.word	0x200022e0

08008b74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b7e:	2309      	movs	r3, #9
 8008b80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01c      	beq.n	8008bc2 <validate+0x4e>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d018      	beq.n	8008bc2 <validate+0x4e>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d013      	beq.n	8008bc2 <validate+0x4e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	889a      	ldrh	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	88db      	ldrh	r3, [r3, #6]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d10c      	bne.n	8008bc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fd fe3e 	bl	8006830 <disk_status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <validate+0x4e>
			res = FR_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <validate+0x5a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	e000      	b.n	8008bd0 <validate+0x5c>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	6013      	str	r3, [r2, #0]
	return res;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008bf2:	f107 0310 	add.w	r3, r7, #16
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fc9c 	bl	8008534 <get_ldnumber>
 8008bfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da01      	bge.n	8008c08 <f_mount+0x28>
 8008c04:	230b      	movs	r3, #11
 8008c06:	e02b      	b.n	8008c60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c08:	4a17      	ldr	r2, [pc, #92]	@ (8008c68 <f_mount+0x88>)
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c18:	69b8      	ldr	r0, [r7, #24]
 8008c1a:	f7fe f8f1 	bl	8006e00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	490d      	ldr	r1, [pc, #52]	@ (8008c68 <f_mount+0x88>)
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <f_mount+0x66>
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d001      	beq.n	8008c4a <f_mount+0x6a>
 8008c46:	2300      	movs	r3, #0
 8008c48:	e00a      	b.n	8008c60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c4a:	f107 010c 	add.w	r1, r7, #12
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	2200      	movs	r2, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fd07 	bl	8008668 <find_volume>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3720      	adds	r7, #32
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	200022b8 	.word	0x200022b8

08008c6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b09a      	sub	sp, #104	@ 0x68
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <f_open+0x18>
 8008c80:	2309      	movs	r3, #9
 8008c82:	e1b7      	b.n	8008ff4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008c8c:	79fa      	ldrb	r2, [r7, #7]
 8008c8e:	f107 0114 	add.w	r1, r7, #20
 8008c92:	f107 0308 	add.w	r3, r7, #8
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fce6 	bl	8008668 <find_volume>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008ca2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 819b 	bne.w	8008fe2 <f_open+0x376>
		dj.obj.fs = fs;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	f107 0318 	add.w	r3, r7, #24
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff fbc5 	bl	8008448 <follow_path>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d118      	bne.n	8008cfe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008cd0:	b25b      	sxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da03      	bge.n	8008cde <f_open+0x72>
				res = FR_INVALID_NAME;
 8008cd6:	2306      	movs	r3, #6
 8008cd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008cdc:	e00f      	b.n	8008cfe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	bf8c      	ite	hi
 8008ce4:	2301      	movhi	r3, #1
 8008ce6:	2300      	movls	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	f107 0318 	add.w	r3, r7, #24
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fd ff3c 	bl	8006b70 <chk_lock>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	f003 031c 	and.w	r3, r3, #28
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d07f      	beq.n	8008e08 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008d08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d017      	beq.n	8008d40 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d10e      	bne.n	8008d36 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d18:	f7fd ff86 	bl	8006c28 <enq_lock>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d006      	beq.n	8008d30 <f_open+0xc4>
 8008d22:	f107 0318 	add.w	r3, r7, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff f8de 	bl	8007ee8 <dir_register>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	e000      	b.n	8008d32 <f_open+0xc6>
 8008d30:	2312      	movs	r3, #18
 8008d32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	f043 0308 	orr.w	r3, r3, #8
 8008d3c:	71fb      	strb	r3, [r7, #7]
 8008d3e:	e010      	b.n	8008d62 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d40:	7fbb      	ldrb	r3, [r7, #30]
 8008d42:	f003 0311 	and.w	r3, r3, #17
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <f_open+0xe6>
					res = FR_DENIED;
 8008d4a:	2307      	movs	r3, #7
 8008d4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008d50:	e007      	b.n	8008d62 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <f_open+0xf6>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008d62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d168      	bne.n	8008e3c <f_open+0x1d0>
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d063      	beq.n	8008e3c <f_open+0x1d0>
				dw = GET_FATTIME();
 8008d74:	f7fd fb1a 	bl	80063ac <get_fattime>
 8008d78:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7c:	330e      	adds	r3, #14
 8008d7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fd fe4b 	bl	8006a1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d88:	3316      	adds	r3, #22
 8008d8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fd fe45 	bl	8006a1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	330b      	adds	r3, #11
 8008d96:	2220      	movs	r2, #32
 8008d98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fe1a 	bl	80079da <ld_clust>
 8008da6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008dac:	2200      	movs	r2, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fe32 	bl	8007a18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db6:	331c      	adds	r3, #28
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fd fe2e 	bl	8006a1c <st_dword>
					fs->wflag = 1;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d037      	beq.n	8008e3c <f_open+0x1d0>
						dw = fs->winsect;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008dd2:	f107 0318 	add.w	r3, r7, #24
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fb22 	bl	8007424 <remove_chain>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008de6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d126      	bne.n	8008e3c <f_open+0x1d0>
							res = move_window(fs, dw);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe f86c 	bl	8006ed0 <move_window>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e02:	3a01      	subs	r2, #1
 8008e04:	615a      	str	r2, [r3, #20]
 8008e06:	e019      	b.n	8008e3c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d115      	bne.n	8008e3c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e10:	7fbb      	ldrb	r3, [r7, #30]
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <f_open+0x1b6>
					res = FR_NO_FILE;
 8008e1a:	2304      	movs	r3, #4
 8008e1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008e20:	e00c      	b.n	8008e3c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d007      	beq.n	8008e3c <f_open+0x1d0>
 8008e2c:	7fbb      	ldrb	r3, [r7, #30]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <f_open+0x1d0>
						res = FR_DENIED;
 8008e36:	2307      	movs	r3, #7
 8008e38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d126      	bne.n	8008e92 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008e5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	bf8c      	ite	hi
 8008e6a:	2301      	movhi	r3, #1
 8008e6c:	2300      	movls	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	f107 0318 	add.w	r3, r7, #24
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fd fef7 	bl	8006c6c <inc_lock>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <f_open+0x226>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008e92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 80a3 	bne.w	8008fe2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fd99 	bl	80079da <ld_clust>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	331c      	adds	r3, #28
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fd fd74 	bl	80069a0 <ld_dword>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	88da      	ldrh	r2, [r3, #6]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	79fa      	ldrb	r2, [r7, #7]
 8008ed6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3330      	adds	r3, #48	@ 0x30
 8008eee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd fdde 	bl	8006ab6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	f003 0320 	and.w	r3, r3, #32
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d06e      	beq.n	8008fe2 <f_open+0x376>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d06a      	beq.n	8008fe2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	895b      	ldrh	r3, [r3, #10]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	899b      	ldrh	r3, [r3, #12]
 8008f1e:	fb02 f303 	mul.w	r3, r2, r3
 8008f22:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f30:	e016      	b.n	8008f60 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe f887 	bl	800704a <get_fat>
 8008f3c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d802      	bhi.n	8008f4a <f_open+0x2de>
 8008f44:	2302      	movs	r3, #2
 8008f46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d102      	bne.n	8008f58 <f_open+0x2ec>
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d103      	bne.n	8008f70 <f_open+0x304>
 8008f68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d8e0      	bhi.n	8008f32 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d131      	bne.n	8008fe2 <f_open+0x376>
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	899b      	ldrh	r3, [r3, #12]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f86:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f8a:	fb01 f202 	mul.w	r2, r1, r2
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d026      	beq.n	8008fe2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe f837 	bl	800700c <clust2sect>
 8008f9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d103      	bne.n	8008fae <f_open+0x342>
						res = FR_INT_ERR;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008fac:	e019      	b.n	8008fe2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	899b      	ldrh	r3, [r3, #12]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fbc:	441a      	add	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	7858      	ldrb	r0, [r3, #1]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a1a      	ldr	r2, [r3, #32]
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	f7fd fc6f 	bl	80068b4 <disk_read>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <f_open+0x376>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008fe2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <f_open+0x384>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3768      	adds	r7, #104	@ 0x68
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08c      	sub	sp, #48	@ 0x30
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f107 0210 	add.w	r2, r7, #16
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff fda9 	bl	8008b74 <validate>
 8009022:	4603      	mov	r3, r0
 8009024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <f_write+0x44>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	7d5b      	ldrb	r3, [r3, #21]
 8009034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009038:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <f_write+0x4a>
 8009040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009044:	e16a      	b.n	800931c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	7d1b      	ldrb	r3, [r3, #20]
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <f_write+0x5a>
 8009052:	2307      	movs	r3, #7
 8009054:	e162      	b.n	800931c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	429a      	cmp	r2, r3
 8009064:	f080 814c 	bcs.w	8009300 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	43db      	mvns	r3, r3
 800906e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009070:	e146      	b.n	8009300 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	8992      	ldrh	r2, [r2, #12]
 800907a:	fbb3 f1f2 	udiv	r1, r3, r2
 800907e:	fb01 f202 	mul.w	r2, r1, r2
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 80f1 	bne.w	800926c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	8992      	ldrh	r2, [r2, #12]
 8009092:	fbb3 f3f2 	udiv	r3, r3, r2
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	8952      	ldrh	r2, [r2, #10]
 800909a:	3a01      	subs	r2, #1
 800909c:	4013      	ands	r3, r2
 800909e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d143      	bne.n	800912e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10c      	bne.n	80090c8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d11a      	bne.n	80090f0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fa15 	bl	80074ee <create_chain>
 80090c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80090c6:	e013      	b.n	80090f0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	4619      	mov	r1, r3
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7fe faa1 	bl	800761e <clmt_clust>
 80090dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80090de:	e007      	b.n	80090f0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	4619      	mov	r1, r3
 80090e8:	4610      	mov	r0, r2
 80090ea:	f7fe fa00 	bl	80074ee <create_chain>
 80090ee:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8109 	beq.w	800930a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80090f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d104      	bne.n	8009108 <f_write+0x10c>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2202      	movs	r2, #2
 8009102:	755a      	strb	r2, [r3, #21]
 8009104:	2302      	movs	r3, #2
 8009106:	e109      	b.n	800931c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d104      	bne.n	800911a <f_write+0x11e>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	755a      	strb	r2, [r3, #21]
 8009116:	2301      	movs	r3, #1
 8009118:	e100      	b.n	800931c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800911e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <f_write+0x132>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800912c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	7d1b      	ldrb	r3, [r3, #20]
 8009132:	b25b      	sxtb	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	da18      	bge.n	800916a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	7858      	ldrb	r0, [r3, #1]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1a      	ldr	r2, [r3, #32]
 8009146:	2301      	movs	r3, #1
 8009148:	f7fd fbd4 	bl	80068f4 <disk_write>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d004      	beq.n	800915c <f_write+0x160>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	755a      	strb	r2, [r3, #21]
 8009158:	2301      	movs	r3, #1
 800915a:	e0df      	b.n	800931c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	7d1b      	ldrb	r3, [r3, #20]
 8009160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009164:	b2da      	uxtb	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	4619      	mov	r1, r3
 8009172:	4610      	mov	r0, r2
 8009174:	f7fd ff4a 	bl	800700c <clust2sect>
 8009178:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <f_write+0x18e>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2202      	movs	r2, #2
 8009184:	755a      	strb	r2, [r3, #21]
 8009186:	2302      	movs	r3, #2
 8009188:	e0c8      	b.n	800931c <f_write+0x320>
			sect += csect;
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	4413      	add	r3, r2
 8009190:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	899b      	ldrh	r3, [r3, #12]
 8009196:	461a      	mov	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	fbb3 f3f2 	udiv	r3, r3, r2
 800919e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d043      	beq.n	800922e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	4413      	add	r3, r2
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	8952      	ldrh	r2, [r2, #10]
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d905      	bls.n	80091c0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	895b      	ldrh	r3, [r3, #10]
 80091b8:	461a      	mov	r2, r3
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	7858      	ldrb	r0, [r3, #1]
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	69f9      	ldr	r1, [r7, #28]
 80091ca:	f7fd fb93 	bl	80068f4 <disk_write>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <f_write+0x1e2>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	755a      	strb	r2, [r3, #21]
 80091da:	2301      	movs	r3, #1
 80091dc:	e09e      	b.n	800931c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a1a      	ldr	r2, [r3, #32]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	6a3a      	ldr	r2, [r7, #32]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d918      	bls.n	800921e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6a1a      	ldr	r2, [r3, #32]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	8992      	ldrh	r2, [r2, #12]
 80091fe:	fb02 f303 	mul.w	r3, r2, r3
 8009202:	69fa      	ldr	r2, [r7, #28]
 8009204:	18d1      	adds	r1, r2, r3
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	461a      	mov	r2, r3
 800920c:	f7fd fc32 	bl	8006a74 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	7d1b      	ldrb	r3, [r3, #20]
 8009214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009218:	b2da      	uxtb	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	899b      	ldrh	r3, [r3, #12]
 8009222:	461a      	mov	r2, r3
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	fb02 f303 	mul.w	r3, r2, r3
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800922c:	e04b      	b.n	80092c6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	429a      	cmp	r2, r3
 8009236:	d016      	beq.n	8009266 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009240:	429a      	cmp	r2, r3
 8009242:	d210      	bcs.n	8009266 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	7858      	ldrb	r0, [r3, #1]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800924e:	2301      	movs	r3, #1
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	f7fd fb2f 	bl	80068b4 <disk_read>
 8009256:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	755a      	strb	r2, [r3, #21]
 8009262:	2301      	movs	r3, #1
 8009264:	e05a      	b.n	800931c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	899b      	ldrh	r3, [r3, #12]
 8009270:	4618      	mov	r0, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	8992      	ldrh	r2, [r2, #12]
 800927a:	fbb3 f1f2 	udiv	r1, r3, r2
 800927e:	fb01 f202 	mul.w	r2, r1, r2
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	1ac3      	subs	r3, r0, r3
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	429a      	cmp	r2, r3
 800928e:	d901      	bls.n	8009294 <f_write+0x298>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	8992      	ldrh	r2, [r2, #12]
 80092a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80092a6:	fb00 f202 	mul.w	r2, r0, r2
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	440b      	add	r3, r1
 80092ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092b0:	69f9      	ldr	r1, [r7, #28]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd fbde 	bl	8006a74 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	7d1b      	ldrb	r3, [r3, #20]
 80092bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80092c6:	69fa      	ldr	r2, [r7, #28]
 80092c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ca:	4413      	add	r3, r2
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	441a      	add	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	619a      	str	r2, [r3, #24]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	bf38      	it	cc
 80092e6:	461a      	movcc	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	60da      	str	r2, [r3, #12]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f2:	441a      	add	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f47f aeb5 	bne.w	8009072 <f_write+0x76>
 8009308:	e000      	b.n	800930c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800930a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	7d1b      	ldrb	r3, [r3, #20]
 8009310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009314:	b2da      	uxtb	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3730      	adds	r7, #48	@ 0x30
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f107 0208 	add.w	r2, r7, #8
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fc1d 	bl	8008b74 <validate>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d168      	bne.n	8009416 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7d1b      	ldrb	r3, [r3, #20]
 8009348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800934c:	2b00      	cmp	r3, #0
 800934e:	d062      	beq.n	8009416 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7d1b      	ldrb	r3, [r3, #20]
 8009354:	b25b      	sxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	da15      	bge.n	8009386 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	7858      	ldrb	r0, [r3, #1]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1a      	ldr	r2, [r3, #32]
 8009368:	2301      	movs	r3, #1
 800936a:	f7fd fac3 	bl	80068f4 <disk_write>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <f_sync+0x54>
 8009374:	2301      	movs	r3, #1
 8009376:	e04f      	b.n	8009418 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7d1b      	ldrb	r3, [r3, #20]
 800937c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009380:	b2da      	uxtb	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009386:	f7fd f811 	bl	80063ac <get_fattime>
 800938a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7fd fd9b 	bl	8006ed0 <move_window>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d138      	bne.n	8009416 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	330b      	adds	r3, #11
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	330b      	adds	r3, #11
 80093b4:	f042 0220 	orr.w	r2, r2, #32
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	461a      	mov	r2, r3
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	f7fe fb26 	bl	8007a18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f103 021c 	add.w	r2, r3, #28
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f7fd fb1f 	bl	8006a1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3316      	adds	r3, #22
 80093e2:	6939      	ldr	r1, [r7, #16]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fd fb19 	bl	8006a1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3312      	adds	r3, #18
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fd faf8 	bl	80069e6 <st_word>
					fs->wflag = 1;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2201      	movs	r2, #1
 80093fa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fd fd94 	bl	8006f2c <sync_fs>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009410:	b2da      	uxtb	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009416:	7dfb      	ldrb	r3, [r7, #23]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff7b 	bl	8009324 <f_sync>
 800942e:	4603      	mov	r3, r0
 8009430:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d118      	bne.n	800946a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f107 0208 	add.w	r2, r7, #8
 800943e:	4611      	mov	r1, r2
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fb97 	bl	8008b74 <validate>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10c      	bne.n	800946a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	4618      	mov	r0, r3
 8009456:	f7fd fc97 	bl	8006d88 <dec_lock>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b090      	sub	sp, #64	@ 0x40
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f107 0208 	add.w	r2, r7, #8
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fb74 	bl	8008b74 <validate>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009492:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <f_lseek+0x2e>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7d5b      	ldrb	r3, [r3, #21]
 800949e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80094a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <f_lseek+0x3c>
 80094aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094ae:	e201      	b.n	80098b4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 80d9 	beq.w	800966c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d15a      	bne.n	8009578 <f_lseek+0x104>
			tbl = fp->cltbl;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	1d1a      	adds	r2, r3, #4
 80094cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	2302      	movs	r3, #2
 80094d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80094dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d03a      	beq.n	8009558 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ec:	3302      	adds	r3, #2
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80094f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f6:	3301      	adds	r3, #1
 80094f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fd fda3 	bl	800704a <get_fat>
 8009504:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	2b01      	cmp	r3, #1
 800950a:	d804      	bhi.n	8009516 <f_lseek+0xa2>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	755a      	strb	r2, [r3, #21]
 8009512:	2302      	movs	r3, #2
 8009514:	e1ce      	b.n	80098b4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d104      	bne.n	8009528 <f_lseek+0xb4>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	755a      	strb	r2, [r3, #21]
 8009524:	2301      	movs	r3, #1
 8009526:	e1c5      	b.n	80098b4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800952e:	429a      	cmp	r2, r3
 8009530:	d0de      	beq.n	80094f0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	429a      	cmp	r2, r3
 8009538:	d809      	bhi.n	800954e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	1d1a      	adds	r2, r3, #4
 800953e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	627a      	str	r2, [r7, #36]	@ 0x24
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009554:	429a      	cmp	r2, r3
 8009556:	d3c4      	bcc.n	80094e2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800955e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	429a      	cmp	r2, r3
 8009566:	d803      	bhi.n	8009570 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	e19f      	b.n	80098b0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009570:	2311      	movs	r3, #17
 8009572:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009576:	e19b      	b.n	80098b0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d902      	bls.n	8009588 <f_lseek+0x114>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 818d 	beq.w	80098b0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3b01      	subs	r3, #1
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7fe f83e 	bl	800761e <clmt_clust>
 80095a2:	4602      	mov	r2, r0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fd fd2b 	bl	800700c <clust2sect>
 80095b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d104      	bne.n	80095c8 <f_lseek+0x154>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	755a      	strb	r2, [r3, #21]
 80095c4:	2302      	movs	r3, #2
 80095c6:	e175      	b.n	80098b4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	8992      	ldrh	r2, [r2, #12]
 80095d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	8952      	ldrh	r2, [r2, #10]
 80095d8:	3a01      	subs	r2, #1
 80095da:	4013      	ands	r3, r2
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	4413      	add	r3, r2
 80095e0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	8992      	ldrh	r2, [r2, #12]
 80095ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80095ee:	fb01 f202 	mul.w	r2, r1, r2
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 815b 	beq.w	80098b0 <f_lseek+0x43c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	429a      	cmp	r2, r3
 8009602:	f000 8155 	beq.w	80098b0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7d1b      	ldrb	r3, [r3, #20]
 800960a:	b25b      	sxtb	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	da18      	bge.n	8009642 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	7858      	ldrb	r0, [r3, #1]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1a      	ldr	r2, [r3, #32]
 800961e:	2301      	movs	r3, #1
 8009620:	f7fd f968 	bl	80068f4 <disk_write>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d004      	beq.n	8009634 <f_lseek+0x1c0>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	755a      	strb	r2, [r3, #21]
 8009630:	2301      	movs	r3, #1
 8009632:	e13f      	b.n	80098b4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7d1b      	ldrb	r3, [r3, #20]
 8009638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800963c:	b2da      	uxtb	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	7858      	ldrb	r0, [r3, #1]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800964c:	2301      	movs	r3, #1
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	f7fd f930 	bl	80068b4 <disk_read>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <f_lseek+0x1f0>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	755a      	strb	r2, [r3, #21]
 8009660:	2301      	movs	r3, #1
 8009662:	e127      	b.n	80098b4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	621a      	str	r2, [r3, #32]
 800966a:	e121      	b.n	80098b0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d908      	bls.n	8009688 <f_lseek+0x214>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d102      	bne.n	8009688 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009696:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 80b5 	beq.w	800980a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	895b      	ldrh	r3, [r3, #10]
 80096a4:	461a      	mov	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	899b      	ldrh	r3, [r3, #12]
 80096aa:	fb02 f303 	mul.w	r3, r2, r3
 80096ae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d01b      	beq.n	80096ee <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	1e5a      	subs	r2, r3, #1
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	1e59      	subs	r1, r3, #1
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d30f      	bcc.n	80096ee <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	1e5a      	subs	r2, r3, #1
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	425b      	negs	r3, r3
 80096d6:	401a      	ands	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096ec:	e022      	b.n	8009734 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d119      	bne.n	800972e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2100      	movs	r1, #0
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fd fef5 	bl	80074ee <create_chain>
 8009704:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	2b01      	cmp	r3, #1
 800970a:	d104      	bne.n	8009716 <f_lseek+0x2a2>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	755a      	strb	r2, [r3, #21]
 8009712:	2302      	movs	r3, #2
 8009714:	e0ce      	b.n	80098b4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971c:	d104      	bne.n	8009728 <f_lseek+0x2b4>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	755a      	strb	r2, [r3, #21]
 8009724:	2301      	movs	r3, #1
 8009726:	e0c5      	b.n	80098b4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800972c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009732:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	2b00      	cmp	r3, #0
 8009738:	d067      	beq.n	800980a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800973a:	e03a      	b.n	80097b2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699a      	ldr	r2, [r3, #24]
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	441a      	add	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7d1b      	ldrb	r3, [r3, #20]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009760:	4618      	mov	r0, r3
 8009762:	f7fd fec4 	bl	80074ee <create_chain>
 8009766:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	2b00      	cmp	r3, #0
 800976c:	d108      	bne.n	8009780 <f_lseek+0x30c>
							ofs = 0; break;
 800976e:	2300      	movs	r3, #0
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	e022      	b.n	80097ba <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009778:	4618      	mov	r0, r3
 800977a:	f7fd fc66 	bl	800704a <get_fat>
 800977e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d104      	bne.n	8009792 <f_lseek+0x31e>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	755a      	strb	r2, [r3, #21]
 800978e:	2301      	movs	r3, #1
 8009790:	e090      	b.n	80098b4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009794:	2b01      	cmp	r3, #1
 8009796:	d904      	bls.n	80097a2 <f_lseek+0x32e>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800979e:	429a      	cmp	r2, r3
 80097a0:	d304      	bcc.n	80097ac <f_lseek+0x338>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2202      	movs	r2, #2
 80097a6:	755a      	strb	r2, [r3, #21]
 80097a8:	2302      	movs	r3, #2
 80097aa:	e083      	b.n	80098b4 <f_lseek+0x440>
					fp->clust = clst;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097b0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d8c0      	bhi.n	800973c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	441a      	add	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	899b      	ldrh	r3, [r3, #12]
 80097ca:	461a      	mov	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80097d2:	fb01 f202 	mul.w	r2, r1, r2
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d016      	beq.n	800980a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fd fc13 	bl	800700c <clust2sect>
 80097e6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80097e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d104      	bne.n	80097f8 <f_lseek+0x384>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2202      	movs	r2, #2
 80097f2:	755a      	strb	r2, [r3, #21]
 80097f4:	2302      	movs	r3, #2
 80097f6:	e05d      	b.n	80098b4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	899b      	ldrh	r3, [r3, #12]
 80097fc:	461a      	mov	r2, r3
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	fbb3 f3f2 	udiv	r3, r3, r2
 8009804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009806:	4413      	add	r3, r2
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699a      	ldr	r2, [r3, #24]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	429a      	cmp	r2, r3
 8009814:	d90a      	bls.n	800982c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7d1b      	ldrb	r3, [r3, #20]
 8009822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009826:	b2da      	uxtb	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	8992      	ldrh	r2, [r2, #12]
 8009834:	fbb3 f1f2 	udiv	r1, r3, r2
 8009838:	fb01 f202 	mul.w	r2, r1, r2
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d036      	beq.n	80098b0 <f_lseek+0x43c>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009848:	429a      	cmp	r2, r3
 800984a:	d031      	beq.n	80098b0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	7d1b      	ldrb	r3, [r3, #20]
 8009850:	b25b      	sxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	da18      	bge.n	8009888 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	7858      	ldrb	r0, [r3, #1]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a1a      	ldr	r2, [r3, #32]
 8009864:	2301      	movs	r3, #1
 8009866:	f7fd f845 	bl	80068f4 <disk_write>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <f_lseek+0x406>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	755a      	strb	r2, [r3, #21]
 8009876:	2301      	movs	r3, #1
 8009878:	e01c      	b.n	80098b4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7d1b      	ldrb	r3, [r3, #20]
 800987e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009882:	b2da      	uxtb	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	7858      	ldrb	r0, [r3, #1]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009892:	2301      	movs	r3, #1
 8009894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009896:	f7fd f80d 	bl	80068b4 <disk_read>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <f_lseek+0x436>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	755a      	strb	r2, [r3, #21]
 80098a6:	2301      	movs	r3, #1
 80098a8:	e004      	b.n	80098b4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098ae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80098b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3740      	adds	r7, #64	@ 0x40
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	2b0a      	cmp	r3, #10
 80098cc:	d103      	bne.n	80098d6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80098ce:	210d      	movs	r1, #13
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fff3 	bl	80098bc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	db25      	blt.n	800992e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	60fa      	str	r2, [r7, #12]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b3c      	cmp	r3, #60	@ 0x3c
 80098f4:	dd12      	ble.n	800991c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f103 010c 	add.w	r1, r3, #12
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	f7ff fb79 	bl	8008ffc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	429a      	cmp	r2, r3
 8009910:	d101      	bne.n	8009916 <putc_bfd+0x5a>
 8009912:	2300      	movs	r3, #0
 8009914:	e001      	b.n	800991a <putc_bfd+0x5e>
 8009916:	f04f 33ff 	mov.w	r3, #4294967295
 800991a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	609a      	str	r2, [r3, #8]
 800992c:	e000      	b.n	8009930 <putc_bfd+0x74>
	if (i < 0) return;
 800992e:	bf00      	nop
}
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	db16      	blt.n	8009974 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f103 010c 	add.w	r1, r3, #12
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	461a      	mov	r2, r3
 8009956:	f107 030c 	add.w	r3, r7, #12
 800995a:	f7ff fb4f 	bl	8008ffc <f_write>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d107      	bne.n	8009974 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	4293      	cmp	r3, r2
 800996c:	d102      	bne.n	8009974 <putc_flush+0x3e>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	e001      	b.n	8009978 <putc_flush+0x42>
	return EOF;
 8009974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	609a      	str	r2, [r3, #8]
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b096      	sub	sp, #88	@ 0x58
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80099b4:	f107 030c 	add.w	r3, r7, #12
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff ffe0 	bl	8009980 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80099c0:	e009      	b.n	80099d6 <f_puts+0x2c>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7ff ff73 	bl	80098bc <putc_bfd>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1f1      	bne.n	80099c2 <f_puts+0x18>
	return putc_flush(&pb);
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff ffa7 	bl	8009936 <putc_flush>
 80099e8:	4603      	mov	r3, r0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3758      	adds	r7, #88	@ 0x58
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a02:	2301      	movs	r3, #1
 8009a04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a0c:	7a5b      	ldrb	r3, [r3, #9]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d131      	bne.n	8009a78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a14:	4b1c      	ldr	r3, [pc, #112]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a16:	7a5b      	ldrb	r3, [r3, #9]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a1e:	2100      	movs	r1, #0
 8009a20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a22:	4b19      	ldr	r3, [pc, #100]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a24:	7a5b      	ldrb	r3, [r3, #9]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	4a17      	ldr	r2, [pc, #92]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a32:	4b15      	ldr	r3, [pc, #84]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a34:	7a5b      	ldrb	r3, [r3, #9]
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4b13      	ldr	r3, [pc, #76]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a3c:	4413      	add	r3, r2
 8009a3e:	79fa      	ldrb	r2, [r7, #7]
 8009a40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a42:	4b11      	ldr	r3, [pc, #68]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a44:	7a5b      	ldrb	r3, [r3, #9]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	b2d1      	uxtb	r1, r2
 8009a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009a88 <FATFS_LinkDriverEx+0x94>)
 8009a4e:	7251      	strb	r1, [r2, #9]
 8009a50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a52:	7dbb      	ldrb	r3, [r7, #22]
 8009a54:	3330      	adds	r3, #48	@ 0x30
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	223a      	movs	r2, #58	@ 0x3a
 8009a62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	3302      	adds	r3, #2
 8009a68:	222f      	movs	r2, #47	@ 0x2f
 8009a6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3303      	adds	r3, #3
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	200024e0 	.word	0x200024e0

08009a8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a96:	2200      	movs	r2, #0
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff ffaa 	bl	80099f4 <FATFS_LinkDriverEx>
 8009aa0:	4603      	mov	r3, r0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6039      	str	r1, [r7, #0]
 8009ab6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	2b7f      	cmp	r3, #127	@ 0x7f
 8009abc:	d802      	bhi.n	8009ac4 <ff_convert+0x18>
		c = chr;
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	81fb      	strh	r3, [r7, #14]
 8009ac2:	e025      	b.n	8009b10 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00b      	beq.n	8009ae2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009aca:	88fb      	ldrh	r3, [r7, #6]
 8009acc:	2bff      	cmp	r3, #255	@ 0xff
 8009ace:	d805      	bhi.n	8009adc <ff_convert+0x30>
 8009ad0:	88fb      	ldrh	r3, [r7, #6]
 8009ad2:	3b80      	subs	r3, #128	@ 0x80
 8009ad4:	4a12      	ldr	r2, [pc, #72]	@ (8009b20 <ff_convert+0x74>)
 8009ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ada:	e000      	b.n	8009ade <ff_convert+0x32>
 8009adc:	2300      	movs	r3, #0
 8009ade:	81fb      	strh	r3, [r7, #14]
 8009ae0:	e016      	b.n	8009b10 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	81fb      	strh	r3, [r7, #14]
 8009ae6:	e009      	b.n	8009afc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009ae8:	89fb      	ldrh	r3, [r7, #14]
 8009aea:	4a0d      	ldr	r2, [pc, #52]	@ (8009b20 <ff_convert+0x74>)
 8009aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d006      	beq.n	8009b04 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009af6:	89fb      	ldrh	r3, [r7, #14]
 8009af8:	3301      	adds	r3, #1
 8009afa:	81fb      	strh	r3, [r7, #14]
 8009afc:	89fb      	ldrh	r3, [r7, #14]
 8009afe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b00:	d9f2      	bls.n	8009ae8 <ff_convert+0x3c>
 8009b02:	e000      	b.n	8009b06 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009b04:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009b06:	89fb      	ldrh	r3, [r7, #14]
 8009b08:	3380      	adds	r3, #128	@ 0x80
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009b10:	89fb      	ldrh	r3, [r7, #14]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	08009dd0 	.word	0x08009dd0

08009b24 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009b2e:	88fb      	ldrh	r3, [r7, #6]
 8009b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b34:	d201      	bcs.n	8009b3a <ff_wtoupper+0x16>
 8009b36:	4b3e      	ldr	r3, [pc, #248]	@ (8009c30 <ff_wtoupper+0x10c>)
 8009b38:	e000      	b.n	8009b3c <ff_wtoupper+0x18>
 8009b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c34 <ff_wtoupper+0x110>)
 8009b3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	1c9a      	adds	r2, r3, #2
 8009b42:	617a      	str	r2, [r7, #20]
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009b48:	8a7b      	ldrh	r3, [r7, #18]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d068      	beq.n	8009c20 <ff_wtoupper+0xfc>
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	8a7b      	ldrh	r3, [r7, #18]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d364      	bcc.n	8009c20 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	1c9a      	adds	r2, r3, #2
 8009b5a:	617a      	str	r2, [r7, #20]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	823b      	strh	r3, [r7, #16]
 8009b60:	8a3b      	ldrh	r3, [r7, #16]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	81fb      	strh	r3, [r7, #14]
 8009b66:	8a3b      	ldrh	r3, [r7, #16]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009b6c:	88fa      	ldrh	r2, [r7, #6]
 8009b6e:	8a79      	ldrh	r1, [r7, #18]
 8009b70:	8a3b      	ldrh	r3, [r7, #16]
 8009b72:	440b      	add	r3, r1
 8009b74:	429a      	cmp	r2, r3
 8009b76:	da49      	bge.n	8009c0c <ff_wtoupper+0xe8>
			switch (cmd) {
 8009b78:	89fb      	ldrh	r3, [r7, #14]
 8009b7a:	2b08      	cmp	r3, #8
 8009b7c:	d84f      	bhi.n	8009c1e <ff_wtoupper+0xfa>
 8009b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <ff_wtoupper+0x60>)
 8009b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009bbb 	.word	0x08009bbb
 8009b8c:	08009bd1 	.word	0x08009bd1
 8009b90:	08009bd9 	.word	0x08009bd9
 8009b94:	08009be1 	.word	0x08009be1
 8009b98:	08009be9 	.word	0x08009be9
 8009b9c:	08009bf1 	.word	0x08009bf1
 8009ba0:	08009bf9 	.word	0x08009bf9
 8009ba4:	08009c01 	.word	0x08009c01
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009ba8:	88fa      	ldrh	r2, [r7, #6]
 8009baa:	8a7b      	ldrh	r3, [r7, #18]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	80fb      	strh	r3, [r7, #6]
 8009bb8:	e027      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009bba:	88fa      	ldrh	r2, [r7, #6]
 8009bbc:	8a7b      	ldrh	r3, [r7, #18]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	88fa      	ldrh	r2, [r7, #6]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	80fb      	strh	r3, [r7, #6]
 8009bce:	e01c      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	3b10      	subs	r3, #16
 8009bd4:	80fb      	strh	r3, [r7, #6]
 8009bd6:	e018      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009bd8:	88fb      	ldrh	r3, [r7, #6]
 8009bda:	3b20      	subs	r3, #32
 8009bdc:	80fb      	strh	r3, [r7, #6]
 8009bde:	e014      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	3b30      	subs	r3, #48	@ 0x30
 8009be4:	80fb      	strh	r3, [r7, #6]
 8009be6:	e010      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	3b1a      	subs	r3, #26
 8009bec:	80fb      	strh	r3, [r7, #6]
 8009bee:	e00c      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	80fb      	strh	r3, [r7, #6]
 8009bf6:	e008      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009bf8:	88fb      	ldrh	r3, [r7, #6]
 8009bfa:	3b50      	subs	r3, #80	@ 0x50
 8009bfc:	80fb      	strh	r3, [r7, #6]
 8009bfe:	e004      	b.n	8009c0a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009c00:	88fb      	ldrh	r3, [r7, #6]
 8009c02:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009c06:	80fb      	strh	r3, [r7, #6]
 8009c08:	bf00      	nop
			}
			break;
 8009c0a:	e008      	b.n	8009c1e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d195      	bne.n	8009b3e <ff_wtoupper+0x1a>
 8009c12:	8a3b      	ldrh	r3, [r7, #16]
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	4413      	add	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009c1c:	e78f      	b.n	8009b3e <ff_wtoupper+0x1a>
			break;
 8009c1e:	bf00      	nop
	}

	return chr;
 8009c20:	88fb      	ldrh	r3, [r7, #6]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	08009ed0 	.word	0x08009ed0
 8009c34:	0800a0c4 	.word	0x0800a0c4

08009c38 <memset>:
 8009c38:	4402      	add	r2, r0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d100      	bne.n	8009c42 <memset+0xa>
 8009c40:	4770      	bx	lr
 8009c42:	f803 1b01 	strb.w	r1, [r3], #1
 8009c46:	e7f9      	b.n	8009c3c <memset+0x4>

08009c48 <__libc_init_array>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c80 <__libc_init_array+0x38>)
 8009c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c84 <__libc_init_array+0x3c>)
 8009c4e:	1b64      	subs	r4, r4, r5
 8009c50:	10a4      	asrs	r4, r4, #2
 8009c52:	2600      	movs	r6, #0
 8009c54:	42a6      	cmp	r6, r4
 8009c56:	d109      	bne.n	8009c6c <__libc_init_array+0x24>
 8009c58:	4d0b      	ldr	r5, [pc, #44]	@ (8009c88 <__libc_init_array+0x40>)
 8009c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c8c <__libc_init_array+0x44>)
 8009c5c:	f000 f818 	bl	8009c90 <_init>
 8009c60:	1b64      	subs	r4, r4, r5
 8009c62:	10a4      	asrs	r4, r4, #2
 8009c64:	2600      	movs	r6, #0
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	d105      	bne.n	8009c76 <__libc_init_array+0x2e>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c70:	4798      	blx	r3
 8009c72:	3601      	adds	r6, #1
 8009c74:	e7ee      	b.n	8009c54 <__libc_init_array+0xc>
 8009c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7a:	4798      	blx	r3
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	e7f2      	b.n	8009c66 <__libc_init_array+0x1e>
 8009c80:	0800a188 	.word	0x0800a188
 8009c84:	0800a188 	.word	0x0800a188
 8009c88:	0800a188 	.word	0x0800a188
 8009c8c:	0800a18c 	.word	0x0800a18c

08009c90 <_init>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	bf00      	nop
 8009c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c96:	bc08      	pop	{r3}
 8009c98:	469e      	mov	lr, r3
 8009c9a:	4770      	bx	lr

08009c9c <_fini>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr
