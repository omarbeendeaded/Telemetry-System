
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800380c  0800380c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800380c  0800380c  0000480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003810  08003810  00004810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003814  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003820  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003820  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009123  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f09  00000000  00000000  0000e15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  00010068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c5  00000000  00000000  00010990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebc4  00000000  00000000  00011055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b083  00000000  00000000  0002fc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8611  00000000  00000000  0003ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f32ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b8  00000000  00000000  000f32f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000f56a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080037dc 	.word	0x080037dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080037dc 	.word	0x080037dc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <MX_CAN1_Init+0xac>)
 80004fa:	4a2a      	ldr	r2, [pc, #168]	@ (80005a4 <MX_CAN1_Init+0xb0>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000500:	220a      	movs	r2, #10
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000512:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000520:	2200      	movs	r2, #0
 8000522:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000524:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800052c:	2200      	movs	r2, #0
 800052e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000532:	2200      	movs	r2, #0
 8000534:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000538:	2200      	movs	r2, #0
 800053a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800053e:	2200      	movs	r2, #0
 8000540:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000542:	4817      	ldr	r0, [pc, #92]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000544:	f000 fe52 	bl	80011ec <HAL_CAN_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800054e:	f000 f9cc 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000554:	2201      	movs	r2, #1
 8000556:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800055a:	2201      	movs	r2, #1
 800055c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800055e:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000566:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 800056a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000574:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000578:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000582:	2201      	movs	r2, #1
 8000584:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000586:	4908      	ldr	r1, [pc, #32]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000588:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800058a:	f000 ff2b 	bl	80013e4 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000590:	f001 f808 	bl	80015a4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000594:	2110      	movs	r1, #16
 8000596:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000598:	f001 f96a 	bl	8001870 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000030 	.word	0x20000030
 80005a4:	40006400 	.word	0x40006400
 80005a8:	20000058 	.word	0x20000058

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <HAL_CAN_MspInit+0x94>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d134      	bne.n	8000638 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000606:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000618:	2309      	movs	r3, #9
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	4809      	ldr	r0, [pc, #36]	@ (8000648 <HAL_CAN_MspInit+0x9c>)
 8000624:	f001 fc8c 	bl	8001f40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2015      	movs	r0, #21
 800062e:	f001 fc50 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000632:	2015      	movs	r0, #21
 8000634:	f001 fc69 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40006400 	.word	0x40006400
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000

0800064c <HAL_CAN_RxFifo1MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO1, &RxHeader, RX_Message );
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000656:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 ffe6 	bl	800162c <HAL_CAN_GetRxMessage>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000660:	2104      	movs	r1, #4
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000664:	f001 fe19 	bl	800229a <HAL_GPIO_TogglePin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	20000080 	.word	0x20000080
 8000678:	40020400 	.word	0x40020400

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b43      	ldr	r3, [pc, #268]	@ (80007a4 <MX_GPIO_Init+0x128>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a42      	ldr	r2, [pc, #264]	@ (80007a4 <MX_GPIO_Init+0x128>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b40      	ldr	r3, [pc, #256]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a3b      	ldr	r2, [pc, #236]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b35      	ldr	r3, [pc, #212]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a34      	ldr	r2, [pc, #208]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <MX_GPIO_Init+0x128>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|CE_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f241 0104 	movw	r1, #4100	@ 0x1004
 8000708:	4827      	ldr	r0, [pc, #156]	@ (80007a8 <MX_GPIO_Init+0x12c>)
 800070a:	f001 fdad 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000714:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <MX_GPIO_Init+0x12c>)
 8000716:	f001 fda7 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTT_Pin;
 800071a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTT_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	481f      	ldr	r0, [pc, #124]	@ (80007ac <MX_GPIO_Init+0x130>)
 8000730:	f001 fc06 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000734:	2304      	movs	r3, #4
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0x12c>)
 800074c:	f001 fbf8 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000750:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480f      	ldr	r0, [pc, #60]	@ (80007a8 <MX_GPIO_Init+0x12c>)
 800076a:	f001 fbe9 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800076e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000774:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <MX_GPIO_Init+0x134>)
 8000786:	f001 fbdb 	bl	8001f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2017      	movs	r0, #23
 8000790:	f001 fb9f 	bl	8001ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000794:	2017      	movs	r0, #23
 8000796:	f001 fbb8 	bl	8001f0a <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	@ 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020000 	.word	0x40020000

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fca6 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f81c 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f7ff ff5c 	bl	800067c <MX_GPIO_Init>
  MX_CAN1_Init();
 80007c4:	f7ff fe96 	bl	80004f4 <MX_CAN1_Init>
  MX_SPI2_Init();
 80007c8:	f000 fb5a 	bl	8000e80 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  nrf24l01p_tx_init(2500, _1Mbps);
 80007cc:	2100      	movs	r1, #0
 80007ce:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80007d2:	f000 f915 	bl	8000a00 <nrf24l01p_tx_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(BUTT_GPIO_Port, BUTT_Pin))
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <main+0x3c>)
 80007dc:	f001 fd2c 	bl	8002238 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f7      	beq.n	80007d6 <main+0x22>
	  {
        nrf24l01p_tx_transmit(RX_Message);
 80007e6:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <main+0x40>)
 80007e8:	f000 f935 	bl	8000a56 <nrf24l01p_tx_transmit>
	  if(HAL_GPIO_ReadPin(BUTT_GPIO_Port, BUTT_Pin))
 80007ec:	e7f3      	b.n	80007d6 <main+0x22>
 80007ee:	bf00      	nop
 80007f0:	40020800 	.word	0x40020800
 80007f4:	20000028 	.word	0x20000028

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	@ 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2234      	movs	r2, #52	@ 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f002 ffbc 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <SystemClock_Config+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <SystemClock_Config+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <SystemClock_Config+0xd0>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <SystemClock_Config+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800086c:	2364      	movs	r3, #100	@ 0x64
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ff29 	bl	80026d8 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800088c:	f000 f82d 	bl	80008ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2103      	movs	r1, #3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fd27 	bl	8002300 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008b8:	f000 f817 	bl	80008ea <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008dc:	d101      	bne.n	80008e2 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_tx_irq(); // clear interrupt flag
 80008de:	f000 f8c5 	bl	8000a6c <nrf24l01p_tx_irq>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ee:	b672      	cpsid	i
}
 80008f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <Error_Handler+0x8>
	...

080008f8 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000902:	4802      	ldr	r0, [pc, #8]	@ (800090c <cs_high+0x14>)
 8000904:	f001 fcb0 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40020400 	.word	0x40020400

08000910 <cs_low>:

static void cs_low()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091a:	4802      	ldr	r0, [pc, #8]	@ (8000924 <cs_low+0x14>)
 800091c:	f001 fca4 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40020400 	.word	0x40020400

08000928 <ce_high>:

static void ce_high()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000932:	4802      	ldr	r0, [pc, #8]	@ (800093c <ce_high+0x14>)
 8000934:	f001 fc98 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020400 	.word	0x40020400

08000940 <ce_low>:

static void ce_low()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800094a:	4802      	ldr	r0, [pc, #8]	@ (8000954 <ce_low+0x14>)
 800094c:	f001 fc8c 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020400 	.word	0x40020400

08000958 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000966:	f7ff ffd3 	bl	8000910 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800096a:	f107 020e 	add.w	r2, r7, #14
 800096e:	f107 010f 	add.w	r1, r7, #15
 8000972:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2301      	movs	r3, #1
 800097a:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <read_register+0x48>)
 800097c:	f002 fc16 	bl	80031ac <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000980:	f107 010d 	add.w	r1, r7, #13
 8000984:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000988:	2201      	movs	r2, #1
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <read_register+0x48>)
 800098c:	f002 faf5 	bl	8002f7a <HAL_SPI_Receive>
    cs_high();
 8000990:	f7ff ffb2 	bl	80008f8 <cs_high>

    return read_val;
 8000994:	7b7b      	ldrb	r3, [r7, #13]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000009c 	.word	0x2000009c

080009a4 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	737b      	strb	r3, [r7, #13]

    cs_low();
 80009c2:	f7ff ffa5 	bl	8000910 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80009c6:	f107 020e 	add.w	r2, r7, #14
 80009ca:	f107 010f 	add.w	r1, r7, #15
 80009ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <write_register+0x58>)
 80009d8:	f002 fbe8 	bl	80031ac <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80009dc:	f107 010d 	add.w	r1, r7, #13
 80009e0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009e4:	2201      	movs	r2, #1
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <write_register+0x58>)
 80009e8:	f002 f983 	bl	8002cf2 <HAL_SPI_Transmit>
    cs_high();
 80009ec:	f7ff ff84 	bl	80008f8 <cs_high>

    return write_val;
 80009f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000009c 	.word	0x2000009c

08000a00 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	460a      	mov	r2, r1
 8000a0a:	80fb      	strh	r3, [r7, #6]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000a10:	f000 f850 	bl	8000ab4 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000a14:	f000 f8a2 	bl	8000b5c <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8000a18:	f000 f94c 	bl	8000cb4 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f9d4 	bl	8000dcc <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000a24:	797b      	ldrb	r3, [r7, #5]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fa00 	bl	8000e2c <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f9e0 	bl	8000df2 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 f953 	bl	8000cde <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000a38:	2005      	movs	r0, #5
 8000a3a:	f000 f973 	bl	8000d24 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f000 f980 	bl	8000d44 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000a44:	20fa      	movs	r0, #250	@ 0xfa
 8000a46:	f000 f999 	bl	8000d7c <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000a4a:	f7ff ff6d 	bl	8000928 <ce_high>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f892 	bl	8000b88 <nrf24l01p_write_tx_fifo>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000a72:	f000 f8dd 	bl	8000c30 <nrf24l01p_get_status>
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <nrf24l01p_tx_irq+0x44>)
 8000a8e:	f001 fc04 	bl	800229a <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8000a92:	f000 f8e7 	bl	8000c64 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8000a96:	e007      	b.n	8000aa8 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9e:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <nrf24l01p_tx_irq+0x44>)
 8000aa0:	f001 fbe2 	bl	8002268 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8000aa4:	f000 f8f2 	bl	8000c8c <nrf24l01p_clear_max_rt>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000ab8:	f7ff ff1e 	bl	80008f8 <cs_high>
    ce_low();
 8000abc:	f7ff ff40 	bl	8000940 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff ff6e 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000ac8:	213f      	movs	r1, #63	@ 0x3f
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ff6a 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f7ff ff66 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000ad8:	2103      	movs	r1, #3
 8000ada:	2003      	movs	r0, #3
 8000adc:	f7ff ff62 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	f7ff ff5e 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000ae8:	2102      	movs	r1, #2
 8000aea:	2005      	movs	r0, #5
 8000aec:	f7ff ff5a 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000af0:	2107      	movs	r1, #7
 8000af2:	2006      	movs	r0, #6
 8000af4:	f7ff ff56 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000af8:	217e      	movs	r1, #126	@ 0x7e
 8000afa:	2007      	movs	r0, #7
 8000afc:	f7ff ff52 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2011      	movs	r0, #17
 8000b04:	f7ff ff4e 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2011      	movs	r0, #17
 8000b0c:	f7ff ff4a 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2012      	movs	r0, #18
 8000b14:	f7ff ff46 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2013      	movs	r0, #19
 8000b1c:	f7ff ff42 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2014      	movs	r0, #20
 8000b24:	f7ff ff3e 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2015      	movs	r0, #21
 8000b2c:	f7ff ff3a 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2016      	movs	r0, #22
 8000b34:	f7ff ff36 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000b38:	2111      	movs	r1, #17
 8000b3a:	2017      	movs	r0, #23
 8000b3c:	f7ff ff32 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000b40:	2100      	movs	r1, #0
 8000b42:	201c      	movs	r0, #28
 8000b44:	f7ff ff2e 	bl	80009a4 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201d      	movs	r0, #29
 8000b4c:	f7ff ff2a 	bl	80009a4 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000b50:	f000 f83e 	bl	8000bd0 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000b54:	f000 f854 	bl	8000c00 <nrf24l01p_flush_tx_fifo>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fef8 	bl	8000958 <read_register>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f023 0301 	bic.w	r3, r3, #1
 8000b72:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4619      	mov	r1, r3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ff13 	bl	80009a4 <write_register>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000b90:	23a0      	movs	r3, #160	@ 0xa0
 8000b92:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000b94:	f7ff febc 	bl	8000910 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b98:	f107 020e 	add.w	r2, r7, #14
 8000b9c:	f107 010f 	add.w	r1, r7, #15
 8000ba0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <nrf24l01p_write_tx_fifo+0x44>)
 8000baa:	f002 faff 	bl	80031ac <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000bae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <nrf24l01p_write_tx_fifo+0x44>)
 8000bb8:	f002 f89b 	bl	8002cf2 <HAL_SPI_Transmit>
    cs_high(); 
 8000bbc:	f7ff fe9c 	bl	80008f8 <cs_high>

    return status;
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000009c 	.word	0x2000009c

08000bd0 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000bd6:	23e2      	movs	r3, #226	@ 0xe2
 8000bd8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000bda:	f7ff fe99 	bl	8000910 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000bde:	1dba      	adds	r2, r7, #6
 8000be0:	1df9      	adds	r1, r7, #7
 8000be2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <nrf24l01p_flush_rx_fifo+0x2c>)
 8000bec:	f002 fade 	bl	80031ac <HAL_SPI_TransmitReceive>
    cs_high();
 8000bf0:	f7ff fe82 	bl	80008f8 <cs_high>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000c06:	23e1      	movs	r3, #225	@ 0xe1
 8000c08:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000c0a:	f7ff fe81 	bl	8000910 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c0e:	1dba      	adds	r2, r7, #6
 8000c10:	1df9      	adds	r1, r7, #7
 8000c12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <nrf24l01p_flush_tx_fifo+0x2c>)
 8000c1c:	f002 fac6 	bl	80031ac <HAL_SPI_TransmitReceive>
    cs_high();
 8000c20:	f7ff fe6a 	bl	80008f8 <cs_high>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000009c 	.word	0x2000009c

08000c30 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000c36:	23ff      	movs	r3, #255	@ 0xff
 8000c38:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000c3a:	f7ff fe69 	bl	8000910 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c3e:	1dba      	adds	r2, r7, #6
 8000c40:	1df9      	adds	r1, r7, #7
 8000c42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <nrf24l01p_get_status+0x30>)
 8000c4c:	f002 faae 	bl	80031ac <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000c50:	f7ff fe52 	bl	80008f8 <cs_high>

    return status;
 8000c54:	79bb      	ldrb	r3, [r7, #6]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000009c 	.word	0x2000009c

08000c64 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000c6a:	f7ff ffe1 	bl	8000c30 <nrf24l01p_get_status>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f7ff fe90 	bl	80009a4 <write_register>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000c92:	f7ff ffcd 	bl	8000c30 <nrf24l01p_get_status>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	2007      	movs	r0, #7
 8000ca8:	f7ff fe7c 	bl	80009a4 <write_register>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fe4c 	bl	8000958 <read_register>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fe67 	bl	80009a4 <write_register>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fe35 	bl	8000958 <read_register>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d002      	beq.n	8000cfe <nrf24l01p_set_crc_length+0x20>
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d005      	beq.n	8000d08 <nrf24l01p_set_crc_length+0x2a>
 8000cfc:	e009      	b.n	8000d12 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f023 0304 	bic.w	r3, r3, #4
 8000d04:	73fb      	strb	r3, [r7, #15]
            break;
 8000d06:	e004      	b.n	8000d12 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	73fb      	strb	r3, [r7, #15]
            break;
 8000d10:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4619      	mov	r1, r3
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fe44 	bl	80009a4 <write_register>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	3b02      	subs	r3, #2
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4619      	mov	r1, r3
 8000d36:	2003      	movs	r0, #3
 8000d38:	f7ff fe34 	bl	80009a4 <write_register>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f7ff fe02 	bl	8000958 <read_register>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	f063 030f 	orn	r3, r3, #15
 8000d5e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f7ff fe19 	bl	80009a4 <write_register>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000d86:	2004      	movs	r0, #4
 8000d88:	f7ff fde6 	bl	8000958 <read_register>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	f043 030f 	orr.w	r3, r3, #15
 8000d96:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3b01      	subs	r3, #1
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	4619      	mov	r1, r3
 8000db8:	2004      	movs	r0, #4
 8000dba:	f7ff fdf3 	bl	80009a4 <write_register>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	10624dd3 	.word	0x10624dd3

08000dcc <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000ddc:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	2005      	movs	r0, #5
 8000de6:	f7ff fddd 	bl	80009a4 <write_register>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f7ff fdab 	bl	8000958 <read_register>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f023 0306 	bic.w	r3, r3, #6
 8000e08:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2006      	movs	r0, #6
 8000e20:	f7ff fdc0 	bl	80009a4 <write_register>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000e36:	2006      	movs	r0, #6
 8000e38:	f7ff fd8e 	bl	8000958 <read_register>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000e42:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d00a      	beq.n	8000e60 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	dc0e      	bgt.n	8000e6c <nrf24l01p_set_rf_air_data_rate+0x40>
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10a      	bne.n	8000e6c <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	73fb      	strb	r3, [r7, #15]
            break;
 8000e5e:	e005      	b.n	8000e6c <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	73fb      	strb	r3, [r7, #15]
            break;
 8000e68:	e000      	b.n	8000e6c <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000e6a:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff fd97 	bl	80009a4 <write_register>
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_SPI2_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_SPI2_Init+0x64>)
 8000ed2:	f001 fe85 	bl	8002be0 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000edc:	f7ff fd05 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000009c 	.word	0x2000009c
 8000ee8:	40003800 	.word	0x40003800

08000eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a28      	ldr	r2, [pc, #160]	@ (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d14a      	bne.n	8000fa4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	4a26      	ldr	r2, [pc, #152]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a18      	ldr	r2, [pc, #96]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f62:	230c      	movs	r3, #12
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <HAL_SPI_MspInit+0xc8>)
 8000f7e:	f000 ffdf 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f94:	2305      	movs	r3, #5
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <HAL_SPI_MspInit+0xcc>)
 8000fa0:	f000 ffce 	bl	8001f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	@ 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40003800 	.word	0x40003800
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	4a08      	ldr	r2, [pc, #32]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f8a3 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <CAN1_RX1_IRQHandler+0x10>)
 8001072:	f000 fc23 	bl	80018bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000030 	.word	0x20000030

08001080 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001084:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001088:	f001 f922 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f002 fb57 	bl	8003794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fb65 	bl	80007b4 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010ec:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f8:	08003814 	.word	0x08003814
  ldr r2, =_sbss
 80010fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001100:	200000f8 	.word	0x200000f8

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <HAL_Init+0x40>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_Init+0x40>)
 800111e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <HAL_Init+0x40>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 fec3 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff ff3e 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fedb 	bl	8001f26 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 fea3 	bl	8001ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	200000f4 	.word	0x200000f4

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200000f4 	.word	0x200000f4

080011ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0ed      	b.n	80013da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f9ce 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001220:	f7ff ffd8 	bl	80011d4 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001226:	e012      	b.n	800124e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff ffd4 	bl	80011d4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d90b      	bls.n	800124e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2205      	movs	r2, #5
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0c5      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e5      	beq.n	8001228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0202 	bic.w	r2, r2, #2
 800126a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126c:	f7ff ffb2 	bl	80011d4 <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001272:	e012      	b.n	800129a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001274:	f7ff ffae 	bl	80011d4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d90b      	bls.n	800129a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2205      	movs	r2, #5
 8001292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e09f      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e5      	bne.n	8001274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d108      	bne.n	80012c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e007      	b.n	80012fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e9b      	ldrb	r3, [r3, #26]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e007      	b.n	8001326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0220 	bic.w	r2, r2, #32
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7edb      	ldrb	r3, [r3, #27]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d108      	bne.n	8001340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0210 	bic.w	r2, r2, #16
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e007      	b.n	8001350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0210 	orr.w	r2, r2, #16
 800134e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f1b      	ldrb	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e007      	b.n	800137a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0208 	bic.w	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7f5b      	ldrb	r3, [r3, #29]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e007      	b.n	80013a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	ea42 0103 	orr.w	r1, r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d003      	beq.n	800140a <HAL_CAN_ConfigFilter+0x26>
 8001402:	7cfb      	ldrb	r3, [r7, #19]
 8001404:	2b02      	cmp	r3, #2
 8001406:	f040 80be 	bne.w	8001586 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800140a:	4b65      	ldr	r3, [pc, #404]	@ (80015a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800140c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001414:	f043 0201 	orr.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001424:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	431a      	orrs	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	2201      	movs	r2, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d123      	bne.n	80014b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800148e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3248      	adds	r2, #72	@ 0x48
 8001494:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014aa:	6979      	ldr	r1, [r7, #20]
 80014ac:	3348      	adds	r3, #72	@ 0x48
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d122      	bne.n	8001502 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3248      	adds	r2, #72	@ 0x48
 80014e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014f8:	6979      	ldr	r1, [r7, #20]
 80014fa:	3348      	adds	r3, #72	@ 0x48
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800151c:	e007      	b.n	800152e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	431a      	orrs	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001548:	e007      	b.n	800155a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001578:	f023 0201 	bic.w	r2, r3, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e006      	b.n	8001594 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
  }
}
 8001594:	4618      	mov	r0, r3
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40006400 	.word	0x40006400

080015a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d12e      	bne.n	8001616 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fe00 	bl	80011d4 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d8:	f7ff fdfc 	bl	80011d4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	d90b      	bls.n	80015fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2205      	movs	r2, #5
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e012      	b.n	8001624 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e5      	bne.n	80015d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e006      	b.n	8001624 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d003      	beq.n	8001650 <HAL_CAN_GetRxMessage+0x24>
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b02      	cmp	r3, #2
 800164c:	f040 8103 	bne.w	8001856 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10e      	bne.n	8001674 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d116      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0f7      	b.n	8001864 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d107      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0e8      	b.n	8001864 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	331b      	adds	r3, #27
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0204 	and.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	331b      	adds	r3, #27
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0d5b      	lsrs	r3, r3, #21
 80016c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e00b      	b.n	80016e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	331b      	adds	r3, #27
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	331b      	adds	r3, #27
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0202 	and.w	r2, r3, #2
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	331b      	adds	r3, #27
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2208      	movs	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	e00b      	b.n	8001730 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	331b      	adds	r3, #27
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 020f 	and.w	r2, r3, #15
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	331b      	adds	r3, #27
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0a1a      	lsrs	r2, r3, #8
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0c1a      	lsrs	r2, r3, #16
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3302      	adds	r3, #2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0e1a      	lsrs	r2, r3, #24
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3303      	adds	r3, #3
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3304      	adds	r3, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0a1a      	lsrs	r2, r3, #8
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3305      	adds	r3, #5
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0c1a      	lsrs	r2, r3, #16
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3306      	adds	r3, #6
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0e1a      	lsrs	r2, r3, #24
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3307      	adds	r3, #7
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d108      	bne.n	8001842 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	e007      	b.n	8001852 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e006      	b.n	8001864 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
  }
}
 8001864:	4618      	mov	r0, r3
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d002      	beq.n	800188e <HAL_CAN_ActivateNotification+0x1e>
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d109      	bne.n	80018a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6959      	ldr	r1, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e006      	b.n	80018b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
  }
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d07c      	beq.n	80019fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f983 	bl	8001c2a <HAL_CAN_TxMailbox0CompleteCallback>
 8001924:	e016      	b.n	8001954 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	e00c      	b.n	8001954 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
 800194c:	e002      	b.n	8001954 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f989 	bl	8001c66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001966:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f963 	bl	8001c3e <HAL_CAN_TxMailbox1CompleteCallback>
 8001978:	e016      	b.n	80019a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e00c      	b.n	80019a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a0:	e002      	b.n	80019a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f969 	bl	8001c7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f943 	bl	8001c52 <HAL_CAN_TxMailbox2CompleteCallback>
 80019cc:	e016      	b.n	80019fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e0:	e00c      	b.n	80019fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f4:	e002      	b.n	80019fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f949 	bl	8001c8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00c      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f93a 	bl	8001cb6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f921 	bl	8001ca2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00c      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2210      	movs	r2, #16
 8001a82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f912 	bl	8001cca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe fdc4 	bl	800064c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8fc 	bl	8001cde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2208      	movs	r2, #8
 8001b00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8f5 	bl	8001cf2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d07b      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d072      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d043      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d03e      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b8a:	2b60      	cmp	r3, #96	@ 0x60
 8001b8c:	d02b      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x32a>
 8001b8e:	2b60      	cmp	r3, #96	@ 0x60
 8001b90:	d82e      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001b92:	2b50      	cmp	r3, #80	@ 0x50
 8001b94:	d022      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x320>
 8001b96:	2b50      	cmp	r3, #80	@ 0x50
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001b9a:	2b40      	cmp	r3, #64	@ 0x40
 8001b9c:	d019      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x316>
 8001b9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ba0:	d826      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001ba2:	2b30      	cmp	r3, #48	@ 0x30
 8001ba4:	d010      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x30c>
 8001ba6:	2b30      	cmp	r3, #48	@ 0x30
 8001ba8:	d822      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d002      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x2f8>
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d005      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bb2:	e01d      	b.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bbc:	e019      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f043 0310 	orr.w	r3, r3, #16
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bc6:	e014      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bd0:	e00f      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bda:	e00a      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001be4:	e005      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bee:	e000      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bf0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2204      	movs	r2, #4
 8001c08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f872 	bl	8001d06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4907      	ldr	r1, [pc, #28]	@ (8001db8 <__NVIC_EnableIRQ+0x38>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e88:	d301      	bcc.n	8001e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <SysTick_Config+0x40>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e96:	210f      	movs	r1, #15
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f7ff ff8e 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <SysTick_Config+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <SysTick_Config+0x40>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff29 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff3e 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff8e 	bl	8001e10 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5d 	bl	8001dbc <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff31 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffa2 	bl	8001e78 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e153      	b.n	8002204 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f040 8142 	bne.w	80021fe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d005      	beq.n	8001f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d130      	bne.n	8001ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0201 	and.w	r2, r3, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d017      	beq.n	8002030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d123      	bne.n	8002084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	69b9      	ldr	r1, [r7, #24]
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 809c 	beq.w	80021fe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b54      	ldr	r3, [pc, #336]	@ (800221c <HAL_GPIO_Init+0x2dc>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a53      	ldr	r2, [pc, #332]	@ (800221c <HAL_GPIO_Init+0x2dc>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d6:	4b51      	ldr	r3, [pc, #324]	@ (800221c <HAL_GPIO_Init+0x2dc>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002220 <HAL_GPIO_Init+0x2e0>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a46      	ldr	r2, [pc, #280]	@ (8002224 <HAL_GPIO_Init+0x2e4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0x1f6>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a45      	ldr	r2, [pc, #276]	@ (8002228 <HAL_GPIO_Init+0x2e8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00d      	beq.n	8002132 <HAL_GPIO_Init+0x1f2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a44      	ldr	r2, [pc, #272]	@ (800222c <HAL_GPIO_Init+0x2ec>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <HAL_GPIO_Init+0x1ee>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a43      	ldr	r2, [pc, #268]	@ (8002230 <HAL_GPIO_Init+0x2f0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_GPIO_Init+0x1ea>
 8002126:	2303      	movs	r3, #3
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x1f8>
 800212a:	2307      	movs	r3, #7
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x1f8>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x1f8>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x1f8>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	@ (8002220 <HAL_GPIO_Init+0x2e0>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a2e      	ldr	r2, [pc, #184]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_GPIO_Init+0x2f4>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f aea8 	bls.w	8001f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40013c00 	.word	0x40013c00

08002238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e001      	b.n	800225a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002284:	e003      	b.n	800228e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	041a      	lsls	r2, r3, #16
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	887b      	ldrh	r3, [r7, #2]
 80022ba:	400b      	ands	r3, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe faec 	bl	80008cc <HAL_GPIO_EXTI_Callback>
  }
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40013c00 	.word	0x40013c00

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fef0 	bl	80011d4 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe feec 	bl	80011d4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fe50 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	080037f4 	.word	0x080037f4
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b094      	sub	sp, #80	@ 0x50
 80024d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e4:	4b79      	ldr	r3, [pc, #484]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d00d      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	f200 80e1 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x34>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fe:	e0db      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002502:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002504:	e0db      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002506:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800250a:	e0d8      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002522:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	2200      	movs	r2, #0
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800252c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
 800253a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	6139      	str	r1, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002570:	4659      	mov	r1, fp
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4651      	mov	r1, sl
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4651      	mov	r1, sl
 8002580:	ebb2 0801 	subs.w	r8, r2, r1
 8002584:	4659      	mov	r1, fp
 8002586:	eb63 0901 	sbc.w	r9, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb18 0303 	adds.w	r3, r8, r3
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	462b      	mov	r3, r5
 80025ac:	eb49 0303 	adc.w	r3, r9, r3
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025be:	4629      	mov	r1, r5
 80025c0:	024b      	lsls	r3, r1, #9
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c8:	4621      	mov	r1, r4
 80025ca:	024a      	lsls	r2, r1, #9
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025dc:	f7fd fe12 	bl	8000204 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	e058      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	4611      	mov	r1, r2
 80025f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	f04f 0000 	mov.w	r0, #0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	0159      	lsls	r1, r3, #5
 8002612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002616:	0150      	lsls	r0, r2, #5
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4641      	mov	r1, r8
 800261e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002622:	4649      	mov	r1, r9
 8002624:	eb63 0b01 	sbc.w	fp, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800263c:	ebb2 040a 	subs.w	r4, r2, sl
 8002640:	eb63 050b 	sbc.w	r5, r3, fp
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	61fa      	str	r2, [r7, #28]
 800268c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002690:	f7fd fdb8 	bl	8000204 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3750      	adds	r7, #80	@ 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e273      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d075      	beq.n	80027e2 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f6:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d00c      	beq.n	800271c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002702:	4b85      	ldr	r3, [pc, #532]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
        || \
 800270a:	2b08      	cmp	r3, #8
 800270c:	d112      	bne.n	8002734 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270e:	4b82      	ldr	r3, [pc, #520]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800271a:	d10b      	bne.n	8002734 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	4b7e      	ldr	r3, [pc, #504]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d05b      	beq.n	80027e0 <HAL_RCC_OscConfig+0x108>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d157      	bne.n	80027e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e24e      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x74>
 800273e:	4b76      	ldr	r3, [pc, #472]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a75      	ldr	r2, [pc, #468]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01d      	b.n	8002788 <HAL_RCC_OscConfig+0xb0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x98>
 8002756:	4b70      	ldr	r3, [pc, #448]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6f      	ldr	r2, [pc, #444]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b6d      	ldr	r3, [pc, #436]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6c      	ldr	r2, [pc, #432]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xb0>
 8002770:	4b69      	ldr	r3, [pc, #420]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a68      	ldr	r2, [pc, #416]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b66      	ldr	r3, [pc, #408]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a65      	ldr	r2, [pc, #404]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fd20 	bl	80011d4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fd1c 	bl	80011d4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e213      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0xc0>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd0c 	bl	80011d4 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fd08 	bl	80011d4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	@ 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1ff      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	4b51      	ldr	r3, [pc, #324]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0xe8>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b47      	ldr	r3, [pc, #284]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002802:	2b08      	cmp	r3, #8
 8002804:	d11c      	bne.n	8002840 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002806:	4b44      	ldr	r3, [pc, #272]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d116      	bne.n	8002840 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x152>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e1d3      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b3b      	ldr	r3, [pc, #236]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4937      	ldr	r1, [pc, #220]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	e03a      	b.n	80028b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002848:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HAL_RCC_OscConfig+0x244>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fcc1 	bl	80011d4 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe fcbd 	bl	80011d4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1b4      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	4b28      	ldr	r3, [pc, #160]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4925      	ldr	r1, [pc, #148]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
 8002888:	e015      	b.n	80028b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288a:	4b24      	ldr	r3, [pc, #144]	@ (800291c <HAL_RCC_OscConfig+0x244>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fca0 	bl	80011d4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fc9c 	bl	80011d4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e193      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d036      	beq.n	8002930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_RCC_OscConfig+0x248>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe fc80 	bl	80011d4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d8:	f7fe fc7c 	bl	80011d4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e173      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_RCC_OscConfig+0x240>)
 80028ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x200>
 80028f6:	e01b      	b.n	8002930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_RCC_OscConfig+0x248>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fc69 	bl	80011d4 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	e00e      	b.n	8002924 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002906:	f7fe fc65 	bl	80011d4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d907      	bls.n	8002924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e15c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
 8002918:	40023800 	.word	0x40023800
 800291c:	42470000 	.word	0x42470000
 8002920:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	4b8a      	ldr	r3, [pc, #552]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ea      	bne.n	8002906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8097 	beq.w	8002a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	4b83      	ldr	r3, [pc, #524]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10f      	bne.n	800296e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b7f      	ldr	r3, [pc, #508]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4a7e      	ldr	r2, [pc, #504]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	@ 0x40
 800295e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b79      	ldr	r3, [pc, #484]	@ (8002b54 <HAL_RCC_OscConfig+0x47c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297a:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_OscConfig+0x47c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	@ (8002b54 <HAL_RCC_OscConfig+0x47c>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7fe fc25 	bl	80011d4 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fe fc21 	bl	80011d4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e118      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b54 <HAL_RCC_OscConfig+0x47c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2ea>
 80029b4:	4b66      	ldr	r3, [pc, #408]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	4a65      	ldr	r2, [pc, #404]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c0:	e01c      	b.n	80029fc <HAL_RCC_OscConfig+0x324>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x30c>
 80029ca:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	4a60      	ldr	r2, [pc, #384]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a5d      	ldr	r2, [pc, #372]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0x324>
 80029e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e8:	4a59      	ldr	r2, [pc, #356]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f0:	4b57      	ldr	r3, [pc, #348]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a56      	ldr	r2, [pc, #344]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 80029f6:	f023 0304 	bic.w	r3, r3, #4
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fbe6 	bl	80011d4 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fbe2 	bl	80011d4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0d7      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	4b4b      	ldr	r3, [pc, #300]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ee      	beq.n	8002a0c <HAL_RCC_OscConfig+0x334>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fbd0 	bl	80011d4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fbcc 	bl	80011d4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0c1      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4e:	4b40      	ldr	r3, [pc, #256]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ee      	bne.n	8002a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	4a3a      	ldr	r2, [pc, #232]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80ad 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d060      	beq.n	8002b44 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d145      	bne.n	8002b16 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_RCC_OscConfig+0x480>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fba0 	bl	80011d4 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fb9c 	bl	80011d4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e093      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aaa:	4b29      	ldr	r3, [pc, #164]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	019b      	lsls	r3, r3, #6
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	071b      	lsls	r3, r3, #28
 8002ae2:	491b      	ldr	r1, [pc, #108]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <HAL_RCC_OscConfig+0x480>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fb71 	bl	80011d4 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe fb6d 	bl	80011d4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e064      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x41e>
 8002b14:	e05c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <HAL_RCC_OscConfig+0x480>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fb5a 	bl	80011d4 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fb56 	bl	80011d4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04d      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_RCC_OscConfig+0x478>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x44c>
 8002b42:	e045      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e040      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d030      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d129      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d122      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d119      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10f      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07b      	b.n	8002cea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c02:	d009      	beq.n	8002c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe f95a 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	f003 0104 	and.w	r1, r3, #4
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	f003 0210 	and.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d02:	f7fe fa67 	bl	80011d4 <HAL_GetTick>
 8002d06:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e12a      	b.n	8002f72 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_SPI_Transmit+0x36>
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e122      	b.n	8002f72 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Transmit+0x48>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e11b      	b.n	8002f72 <HAL_SPI_Transmit+0x280>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2203      	movs	r2, #3
 8002d46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	88fa      	ldrh	r2, [r7, #6]
 8002d5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d88:	d10f      	bne.n	8002daa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002da8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db4:	2b40      	cmp	r3, #64	@ 0x40
 8002db6:	d007      	beq.n	8002dc8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dd0:	d152      	bne.n	8002e78 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_Transmit+0xee>
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d145      	bne.n	8002e6c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	1c9a      	adds	r2, r3, #2
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e04:	e032      	b.n	8002e6c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d112      	bne.n	8002e3a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e24:	1c9a      	adds	r2, r3, #2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e38:	e018      	b.n	8002e6c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e3a:	f7fe f9cb 	bl	80011d4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d803      	bhi.n	8002e52 <HAL_SPI_Transmit+0x160>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d102      	bne.n	8002e58 <HAL_SPI_Transmit+0x166>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e082      	b.n	8002f72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1c7      	bne.n	8002e06 <HAL_SPI_Transmit+0x114>
 8002e76:	e053      	b.n	8002f20 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_SPI_Transmit+0x194>
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d147      	bne.n	8002f16 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eac:	e033      	b.n	8002f16 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d113      	bne.n	8002ee4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ee2:	e018      	b.n	8002f16 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee4:	f7fe f976 	bl	80011d4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d803      	bhi.n	8002efc <HAL_SPI_Transmit+0x20a>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d102      	bne.n	8002f02 <HAL_SPI_Transmit+0x210>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e02d      	b.n	8002f72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1c6      	bne.n	8002eae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fbd9 	bl	80036dc <SPI_EndRxTxTransaction>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	e104      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa2:	d112      	bne.n	8002fca <HAL_SPI_Receive+0x50>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8f3 	bl	80031ac <HAL_SPI_TransmitReceive>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	e0ec      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fca:	f7fe f903 	bl	80011d4 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Receive+0x62>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0e1      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_SPI_Receive+0x74>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0da      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303c:	d10f      	bne.n	800305e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800304c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003068:	2b40      	cmp	r3, #64	@ 0x40
 800306a:	d007      	beq.n	800307c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d170      	bne.n	8003166 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003084:	e035      	b.n	80030f2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d115      	bne.n	80030c0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f103 020c 	add.w	r2, r3, #12
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030be:	e018      	b.n	80030f2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c0:	f7fe f888 	bl	80011d4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d803      	bhi.n	80030d8 <HAL_SPI_Receive+0x15e>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d102      	bne.n	80030de <HAL_SPI_Receive+0x164>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e058      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1c4      	bne.n	8003086 <HAL_SPI_Receive+0x10c>
 80030fc:	e038      	b.n	8003170 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d113      	bne.n	8003134 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	b292      	uxth	r2, r2
 8003118:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311e:	1c9a      	adds	r2, r3, #2
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003132:	e018      	b.n	8003166 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003134:	f7fe f84e 	bl	80011d4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d803      	bhi.n	800314c <HAL_SPI_Receive+0x1d2>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d102      	bne.n	8003152 <HAL_SPI_Receive+0x1d8>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e01e      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1c6      	bne.n	80030fe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fa4b 	bl	8003610 <SPI_EndRxTransaction>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031ba:	2301      	movs	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031be:	f7fe f809 	bl	80011d4 <HAL_GetTick>
 80031c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031d2:	887b      	ldrh	r3, [r7, #2]
 80031d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031d6:	7ffb      	ldrb	r3, [r7, #31]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d00c      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x4a>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031e2:	d106      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x46>
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d001      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e17f      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x5c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x5c>
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e174      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_SPI_TransmitReceive+0x6e>
 8003216:	2302      	movs	r3, #2
 8003218:	e16d      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b04      	cmp	r3, #4
 800322c:	d003      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2205      	movs	r2, #5
 8003232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	887a      	ldrh	r2, [r7, #2]
 800325e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b40      	cmp	r3, #64	@ 0x40
 8003278:	d007      	beq.n	800328a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003292:	d17e      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0xf6>
 800329c:	8afb      	ldrh	r3, [r7, #22]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d16c      	bne.n	800337c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c6:	e059      	b.n	800337c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d11b      	bne.n	800330e <HAL_SPI_TransmitReceive+0x162>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d016      	beq.n	800330e <HAL_SPI_TransmitReceive+0x162>
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d113      	bne.n	800330e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d119      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x1a4>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d014      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	b292      	uxth	r2, r2
 8003332:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800334c:	2301      	movs	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003350:	f7fd ff40 	bl	80011d4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800335c:	429a      	cmp	r2, r3
 800335e:	d80d      	bhi.n	800337c <HAL_SPI_TransmitReceive+0x1d0>
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d009      	beq.n	800337c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0bc      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1a0      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x11c>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d19b      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x11c>
 8003390:	e082      	b.n	8003498 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x1f4>
 800339a:	8afb      	ldrh	r3, [r7, #22]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d171      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c6:	e05d      	b.n	8003484 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d11c      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x264>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d017      	beq.n	8003410 <HAL_SPI_TransmitReceive+0x264>
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d114      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d119      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x2a6>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d014      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800344e:	2301      	movs	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003452:	f7fd febf 	bl	80011d4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800345e:	429a      	cmp	r2, r3
 8003460:	d803      	bhi.n	800346a <HAL_SPI_TransmitReceive+0x2be>
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d102      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x2c4>
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e038      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d19c      	bne.n	80033c8 <HAL_SPI_TransmitReceive+0x21c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d197      	bne.n	80033c8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f91d 	bl	80036dc <SPI_EndRxTxTransaction>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e01d      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3728      	adds	r7, #40	@ 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003510:	f7fd fe60 	bl	80011d4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	4413      	add	r3, r2
 800351e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003520:	f7fd fe58 	bl	80011d4 <HAL_GetTick>
 8003524:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003526:	4b39      	ldr	r3, [pc, #228]	@ (800360c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	015b      	lsls	r3, r3, #5
 800352c:	0d1b      	lsrs	r3, r3, #20
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003536:	e054      	b.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d050      	beq.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003540:	f7fd fe48 	bl	80011d4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	429a      	cmp	r2, r3
 800354e:	d902      	bls.n	8003556 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d13d      	bne.n	80035d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800356e:	d111      	bne.n	8003594 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003578:	d004      	beq.n	8003584 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003582:	d107      	bne.n	8003594 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003592:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359c:	d10f      	bne.n	80035be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e017      	b.n	8003602 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3b01      	subs	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d19b      	bne.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000000 	.word	0x20000000

08003610 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003624:	d111      	bne.n	800364a <SPI_EndRxTransaction+0x3a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800362e:	d004      	beq.n	800363a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003638:	d107      	bne.n	800364a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003652:	d12a      	bne.n	80036aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365c:	d012      	beq.n	8003684 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	2180      	movs	r1, #128	@ 0x80
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff ff49 	bl	8003500 <SPI_WaitFlagStateUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02d      	beq.n	80036d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e026      	b.n	80036d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	2101      	movs	r1, #1
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff36 	bl	8003500 <SPI_WaitFlagStateUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01a      	beq.n	80036d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e013      	b.n	80036d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2101      	movs	r1, #1
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff ff23 	bl	8003500 <SPI_WaitFlagStateUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e000      	b.n	80036d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2201      	movs	r2, #1
 80036f0:	2102      	movs	r1, #2
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff04 	bl	8003500 <SPI_WaitFlagStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e032      	b.n	8003774 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800370e:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <SPI_EndRxTxTransaction+0xa0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <SPI_EndRxTxTransaction+0xa4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	0d5b      	lsrs	r3, r3, #21
 800371a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800372c:	d112      	bne.n	8003754 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	2180      	movs	r1, #128	@ 0x80
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fee1 	bl	8003500 <SPI_WaitFlagStateUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d016      	beq.n	8003772 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e00f      	b.n	8003774 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3b01      	subs	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b80      	cmp	r3, #128	@ 0x80
 800376c:	d0f2      	beq.n	8003754 <SPI_EndRxTxTransaction+0x78>
 800376e:	e000      	b.n	8003772 <SPI_EndRxTxTransaction+0x96>
        break;
 8003770:	bf00      	nop
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000000 	.word	0x20000000
 8003780:	165e9f81 	.word	0x165e9f81

08003784 <memset>:
 8003784:	4402      	add	r2, r0
 8003786:	4603      	mov	r3, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <__libc_init_array>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	4d0d      	ldr	r5, [pc, #52]	@ (80037cc <__libc_init_array+0x38>)
 8003798:	4c0d      	ldr	r4, [pc, #52]	@ (80037d0 <__libc_init_array+0x3c>)
 800379a:	1b64      	subs	r4, r4, r5
 800379c:	10a4      	asrs	r4, r4, #2
 800379e:	2600      	movs	r6, #0
 80037a0:	42a6      	cmp	r6, r4
 80037a2:	d109      	bne.n	80037b8 <__libc_init_array+0x24>
 80037a4:	4d0b      	ldr	r5, [pc, #44]	@ (80037d4 <__libc_init_array+0x40>)
 80037a6:	4c0c      	ldr	r4, [pc, #48]	@ (80037d8 <__libc_init_array+0x44>)
 80037a8:	f000 f818 	bl	80037dc <_init>
 80037ac:	1b64      	subs	r4, r4, r5
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	2600      	movs	r6, #0
 80037b2:	42a6      	cmp	r6, r4
 80037b4:	d105      	bne.n	80037c2 <__libc_init_array+0x2e>
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037bc:	4798      	blx	r3
 80037be:	3601      	adds	r6, #1
 80037c0:	e7ee      	b.n	80037a0 <__libc_init_array+0xc>
 80037c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c6:	4798      	blx	r3
 80037c8:	3601      	adds	r6, #1
 80037ca:	e7f2      	b.n	80037b2 <__libc_init_array+0x1e>
 80037cc:	0800380c 	.word	0x0800380c
 80037d0:	0800380c 	.word	0x0800380c
 80037d4:	0800380c 	.word	0x0800380c
 80037d8:	08003810 	.word	0x08003810

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
