
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a08c  0800a08c  0000b08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a564  0800a564  0000c01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a564  0800a564  0000b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a56c  0800a56c  0000c01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a56c  0800a56c  0000b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a570  0800a570  0000b570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800a574  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002554  2000001c  0800a590  0000c01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002570  0800a590  0000c570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d68  00000000  00000000  0000c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d2  00000000  00000000  0001edb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00022588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  000236f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022932  00000000  00000000  00024406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188d5  00000000  00000000  00046d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3072  00000000  00000000  0005f60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012267f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  001226c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00126c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a074 	.word	0x0800a074

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	0800a074 	.word	0x0800a074

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <MX_CAN1_Init+0xac>)
 80004fa:	4a2a      	ldr	r2, [pc, #168]	@ (80005a4 <MX_CAN1_Init+0xb0>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000500:	220a      	movs	r2, #10
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000512:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000520:	2200      	movs	r2, #0
 8000522:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000524:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800052c:	2200      	movs	r2, #0
 800052e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000532:	2200      	movs	r2, #0
 8000534:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000538:	2200      	movs	r2, #0
 800053a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800053e:	2200      	movs	r2, #0
 8000540:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000542:	4817      	ldr	r0, [pc, #92]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000544:	f001 fa8e 	bl	8001a64 <HAL_CAN_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800054e:	f000 faf3 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000554:	2201      	movs	r2, #1
 8000556:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800055a:	2201      	movs	r2, #1
 800055c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800055e:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterIdHigh = 0x6A5<<5;
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000566:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 800056a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000574:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000578:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000582:	2201      	movs	r2, #1
 8000584:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000586:	4908      	ldr	r1, [pc, #32]	@ (80005a8 <MX_CAN1_Init+0xb4>)
 8000588:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <MX_CAN1_Init+0xac>)
 800058a:	f001 fb67 	bl	8001c5c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000590:	f001 fc44 	bl	8001e1c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000594:	2110      	movs	r1, #16
 8000596:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <MX_CAN1_Init+0xac>)
 8000598:	f001 fda6 	bl	80020e8 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000040 	.word	0x20000040
 80005a4:	40006400 	.word	0x40006400
 80005a8:	20000068 	.word	0x20000068

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <HAL_CAN_MspInit+0x94>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d134      	bne.n	8000638 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_CAN_MspInit+0x98>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000606:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000618:	2309      	movs	r3, #9
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	4809      	ldr	r0, [pc, #36]	@ (8000648 <HAL_CAN_MspInit+0x9c>)
 8000624:	f002 fc66 	bl	8002ef4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2015      	movs	r0, #21
 800062e:	f002 f88c 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000632:	2015      	movs	r0, #21
 8000634:	f002 f8a5 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40006400 	.word	0x40006400
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000

0800064c <HAL_CAN_RxFifo1MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO1, &RxHeader, RX_Message );
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000656:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f001 fc22 	bl	8001ea4 <HAL_CAN_GetRxMessage>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000660:	2104      	movs	r1, #4
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000664:	f002 fdf3 	bl	800324e <HAL_GPIO_TogglePin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000038 	.word	0x20000038
 8000674:	20000090 	.word	0x20000090
 8000678:	40020400 	.word	0x40020400

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MX_DMA_Init+0x4c>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	203b      	movs	r0, #59	@ 0x3b
 80006a4:	f002 f851 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006a8:	203b      	movs	r0, #59	@ 0x3b
 80006aa:	f002 f86a 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2045      	movs	r0, #69	@ 0x45
 80006b4:	f002 f849 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006b8:	2045      	movs	r0, #69	@ 0x45
 80006ba:	f002 f862 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b66      	ldr	r3, [pc, #408]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a65      	ldr	r2, [pc, #404]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b63      	ldr	r3, [pc, #396]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b5f      	ldr	r3, [pc, #380]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a5e      	ldr	r2, [pc, #376]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b5c      	ldr	r3, [pc, #368]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b58      	ldr	r3, [pc, #352]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a57      	ldr	r2, [pc, #348]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b55      	ldr	r3, [pc, #340]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b51      	ldr	r3, [pc, #324]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a50      	ldr	r2, [pc, #320]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b4e      	ldr	r3, [pc, #312]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b4a      	ldr	r3, [pc, #296]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a49      	ldr	r2, [pc, #292]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b47      	ldr	r3, [pc, #284]	@ (8000880 <MX_GPIO_Init+0x1b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_2_GPIO_Port, CE_2_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2101      	movs	r1, #1
 8000772:	4844      	ldr	r0, [pc, #272]	@ (8000884 <MX_GPIO_Init+0x1b8>)
 8000774:	f002 fd52 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_2_GPIO_Port, CSN_2_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2102      	movs	r1, #2
 800077c:	4841      	ldr	r0, [pc, #260]	@ (8000884 <MX_GPIO_Init+0x1b8>)
 800077e:	f002 fd4d 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|CE_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f241 0104 	movw	r1, #4100	@ 0x1004
 8000788:	483f      	ldr	r0, [pc, #252]	@ (8000888 <MX_GPIO_Init+0x1bc>)
 800078a:	f002 fd47 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000794:	483c      	ldr	r0, [pc, #240]	@ (8000888 <MX_GPIO_Init+0x1bc>)
 8000796:	f002 fd41 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTT_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTT_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4837      	ldr	r0, [pc, #220]	@ (800088c <MX_GPIO_Init+0x1c0>)
 80007b0:	f002 fba0 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_2_Pin|CSN_2_Pin;
 80007b4:	2303      	movs	r3, #3
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	482e      	ldr	r0, [pc, #184]	@ (8000884 <MX_GPIO_Init+0x1b8>)
 80007cc:	f002 fb92 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_2_Pin;
 80007d0:	2304      	movs	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4827      	ldr	r0, [pc, #156]	@ (8000884 <MX_GPIO_Init+0x1b8>)
 80007e6:	f002 fb85 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80007ea:	2302      	movs	r3, #2
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4822      	ldr	r0, [pc, #136]	@ (8000888 <MX_GPIO_Init+0x1bc>)
 8000800:	f002 fb78 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000804:	2304      	movs	r3, #4
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	@ (8000888 <MX_GPIO_Init+0x1bc>)
 800081c:	f002 fb6a 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000820:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4813      	ldr	r0, [pc, #76]	@ (8000888 <MX_GPIO_Init+0x1bc>)
 800083a:	f002 fb5b 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800083e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_GPIO_Init+0x1b8>)
 8000854:	f002 fb4e 	bl	8002ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2007      	movs	r0, #7
 800085e:	f001 ff74 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000862:	2007      	movs	r0, #7
 8000864:	f001 ff8d 	bl	8002782 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2008      	movs	r0, #8
 800086e:	f001 ff6c 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000872:	2008      	movs	r0, #8
 8000874:	f001 ff85 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	@ 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40020400 	.word	0x40020400
 800088c:	40020800 	.word	0x40020800

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f001 f850 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f84a 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f7ff ff16 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f7ff feec 	bl	800067c <MX_DMA_Init>
  MX_CAN1_Init();
 80008a4:	f7ff fe26 	bl	80004f4 <MX_CAN1_Init>
  MX_SPI2_Init();
 80008a8:	f000 fea8 	bl	80015fc <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 80008ac:	f000 fd38 	bl	8001320 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80008b0:	f005 ff5c 	bl	800676c <MX_FATFS_Init>
  MX_SPI1_Init();
 80008b4:	f000 fe6c 	bl	8001590 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SD_Init();
 80008b8:	f000 f8a4 	bl	8000a04 <SD_Init>
  SD_ClrFile();
 80008bc:	f000 f8f8 	bl	8000ab0 <SD_ClrFile>
  SD_Write("Hello\n");
 80008c0:	4816      	ldr	r0, [pc, #88]	@ (800091c <main+0x8c>)
 80008c2:	f000 f8bd 	bl	8000a40 <SD_Write>
  SD_Write("Full Test\n");
 80008c6:	4816      	ldr	r0, [pc, #88]	@ (8000920 <main+0x90>)
 80008c8:	f000 f8ba 	bl	8000a40 <SD_Write>

  nrf24l01p_rx_init(2500, _1Mbps, SPI_RX);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2100      	movs	r1, #0
 80008d0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80008d4:	f000 fa22 	bl	8000d1c <nrf24l01p_rx_init>
  nrf24l01p_tx_init(2490, _1Mbps, SPI_TX);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	f640 10ba 	movw	r0, #2490	@ 0x9ba
 80008e0:	f000 fa4f 	bl	8000d82 <nrf24l01p_tx_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(BUTT_GPIO_Port, BUTT_Pin))
 80008e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e8:	480e      	ldr	r0, [pc, #56]	@ (8000924 <main+0x94>)
 80008ea:	f002 fc7f 	bl	80031ec <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f7      	beq.n	80008e4 <main+0x54>
	  {
        nrf24l01p_tx_transmit(tx_data, SPI_TX);
 80008f4:	2100      	movs	r1, #0
 80008f6:	480c      	ldr	r0, [pc, #48]	@ (8000928 <main+0x98>)
 80008f8:	f000 fa8e 	bl	8000e18 <nrf24l01p_tx_transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2104      	movs	r1, #4
 8000900:	480a      	ldr	r0, [pc, #40]	@ (800092c <main+0x9c>)
 8000902:	f002 fc8b 	bl	800321c <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000906:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800090a:	f001 f887 	bl	8001a1c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2104      	movs	r1, #4
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <main+0x9c>)
 8000914:	f002 fc82 	bl	800321c <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(BUTT_GPIO_Port, BUTT_Pin))
 8000918:	e7e4      	b.n	80008e4 <main+0x54>
 800091a:	bf00      	nop
 800091c:	0800a08c 	.word	0x0800a08c
 8000920:	0800a094 	.word	0x0800a094
 8000924:	40020800 	.word	0x40020800
 8000928:	20000000 	.word	0x20000000
 800092c:	40020400 	.word	0x40020400

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2234      	movs	r2, #52	@ 0x34
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f009 fb6c 	bl	800a01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <SystemClock_Config+0xd0>)
 800097a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2310      	movs	r3, #16
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a0:	2308      	movs	r3, #8
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009a4:	2364      	movs	r3, #100	@ 0x64
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f835 	bl	8003a28 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c4:	f000 f8b8 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2302      	movs	r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2103      	movs	r1, #3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fc65 	bl	80032b4 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f0:	f000 f8a2 	bl	8000b38 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	@ 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <SD_Init>:

/* USER CODE BEGIN 4 */
static void SD_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	//------------------[ Mount The SD Card ]--------------------
	FR_Status = f_mount(&FatFs, SDPath, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4909      	ldr	r1, [pc, #36]	@ (8000a30 <SD_Init+0x2c>)
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <SD_Init+0x30>)
 8000a0e:	f008 fad9 	bl	8008fc4 <f_mount>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <SD_Init+0x34>)
 8000a18:	701a      	strb	r2, [r3, #0]
	if (FR_Status != FR_OK)
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <SD_Init+0x34>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d004      	beq.n	8000a2c <SD_Init+0x28>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2104      	movs	r1, #4
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <SD_Init+0x38>)
 8000a28:	f002 fbf8 	bl	800321c <HAL_GPIO_WritePin>
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20002330 	.word	0x20002330
 8000a34:	200010dc 	.word	0x200010dc
 8000a38:	20002114 	.word	0x20002114
 8000a3c:	40020400 	.word	0x40020400

08000a40 <SD_Write>:

static void SD_Write(char* data)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "canTest.txt", FA_WRITE | FA_READ | FA_OPEN_ALWAYS);
 8000a48:	2213      	movs	r2, #19
 8000a4a:	4915      	ldr	r1, [pc, #84]	@ (8000aa0 <SD_Write+0x60>)
 8000a4c:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <SD_Write+0x64>)
 8000a4e:	f008 faff 	bl	8009050 <f_open>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <SD_Write+0x68>)
 8000a58:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <SD_Write+0x68>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <SD_Write+0x2c>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	4811      	ldr	r0, [pc, #68]	@ (8000aac <SD_Write+0x6c>)
 8000a68:	f002 fbd8 	bl	800321c <HAL_GPIO_WritePin>
    }

    f_lseek(&Fil, f_size(&Fil));
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <SD_Write+0x64>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <SD_Write+0x64>)
 8000a74:	f008 fef0 	bl	8009858 <f_lseek>
    FR_Status = f_puts(data, &Fil);
 8000a78:	490a      	ldr	r1, [pc, #40]	@ (8000aa4 <SD_Write+0x64>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f009 f987 	bl	8009d8e <f_puts>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <SD_Write+0x68>)
 8000a86:	701a      	strb	r2, [r3, #0]

    FR_Status = f_close(&Fil);
 8000a88:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <SD_Write+0x64>)
 8000a8a:	f008 febb 	bl	8009804 <f_close>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <SD_Write+0x68>)
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	0800a0a0 	.word	0x0800a0a0
 8000aa4:	200000ac 	.word	0x200000ac
 8000aa8:	20002114 	.word	0x20002114
 8000aac:	40020400 	.word	0x40020400

08000ab0 <SD_ClrFile>:

static void SD_ClrFile(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "canTest.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000ab4:	220b      	movs	r2, #11
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <SD_ClrFile+0x3c>)
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <SD_ClrFile+0x40>)
 8000aba:	f008 fac9 	bl	8009050 <f_open>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <SD_ClrFile+0x44>)
 8000ac4:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <SD_ClrFile+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <SD_ClrFile+0x28>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <SD_ClrFile+0x48>)
 8000ad4:	f002 fba2 	bl	800321c <HAL_GPIO_WritePin>
    }

    FR_Status = f_close(&Fil);
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <SD_ClrFile+0x40>)
 8000ada:	f008 fe93 	bl	8009804 <f_close>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SD_ClrFile+0x44>)
 8000ae4:	701a      	strb	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	0800a0a0 	.word	0x0800a0a0
 8000af0:	200000ac 	.word	0x200000ac
 8000af4:	20002114 	.word	0x20002114
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_1_PIN_NUMBER)
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d102      	bne.n	8000b12 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_tx_irq(SPI_TX); // clear interrupt flag
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f995 	bl	8000e3c <nrf24l01p_tx_irq>

	if(GPIO_Pin == NRF24L01P_IRQ_2_PIN_NUMBER)
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d107      	bne.n	8000b28 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		nrf24l01p_rx_receive(rx_data, SPI_RX); // read data when data ready flag is set
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b1c:	f000 f962 	bl	8000de4 <nrf24l01p_rx_receive>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b20:	2104      	movs	r1, #4
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b24:	f002 fb93 	bl	800324e <HAL_GPIO_TogglePin>
	}
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000008 	.word	0x20000008
 8000b34:	40020400 	.word	0x40020400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <switch_spi>:
GPIO_TypeDef* NRF24L01P_IRQ_PIN_PORT;
uint16_t      NRF24L01P_IRQ_PIN_NUMBER;


void switch_spi(uint8_t sel)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	if (sel == SPI_1)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d115      	bne.n	8000b80 <switch_spi+0x3c>
	{
		NRF24L01P_SPI = NRF24L01P_SPI_1;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <switch_spi+0x7c>)
 8000b56:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc4 <switch_spi+0x80>)
 8000b58:	601a      	str	r2, [r3, #0]

		NRF24L01P_SPI_CS_PIN_PORT   = NRF24L01P_SPI_1_CS_PIN_PORT;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <switch_spi+0x84>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <switch_spi+0x88>)
 8000b5e:	601a      	str	r2, [r3, #0]
		NRF24L01P_SPI_CS_PIN_NUMBER = NRF24L01P_SPI_1_CS_PIN_NUMBER;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <switch_spi+0x8c>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	801a      	strh	r2, [r3, #0]

		NRF24L01P_CE_PIN_PORT   = NRF24L01P_CE_1_PIN_PORT;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <switch_spi+0x90>)
 8000b68:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <switch_spi+0x88>)
 8000b6a:	601a      	str	r2, [r3, #0]
		NRF24L01P_CE_PIN_NUMBER = NRF24L01P_CE_1_PIN_NUMBER;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <switch_spi+0x94>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	801a      	strh	r2, [r3, #0]

		NRF24L01P_IRQ_PIN_PORT   = NRF24L01P_IRQ_1_PIN_PORT;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <switch_spi+0x98>)
 8000b74:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <switch_spi+0x88>)
 8000b76:	601a      	str	r2, [r3, #0]
		NRF24L01P_IRQ_PIN_NUMBER = NRF24L01P_IRQ_1_PIN_NUMBER;
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <switch_spi+0x9c>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	801a      	strh	r2, [r3, #0]
		NRF24L01P_CE_PIN_NUMBER = NRF24L01P_CE_2_PIN_NUMBER;

		NRF24L01P_IRQ_PIN_PORT   = NRF24L01P_IRQ_2_PIN_PORT;
		NRF24L01P_IRQ_PIN_NUMBER = NRF24L01P_IRQ_2_PIN_NUMBER;
	}
}
 8000b7e:	e019      	b.n	8000bb4 <switch_spi+0x70>
	else if (sel == SPI_2)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d116      	bne.n	8000bb4 <switch_spi+0x70>
		NRF24L01P_SPI = NRF24L01P_SPI_2;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <switch_spi+0x7c>)
 8000b88:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <switch_spi+0xa0>)
 8000b8a:	601a      	str	r2, [r3, #0]
		NRF24L01P_SPI_CS_PIN_PORT   = NRF24L01P_SPI_2_CS_PIN_PORT;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <switch_spi+0x84>)
 8000b8e:	4a16      	ldr	r2, [pc, #88]	@ (8000be8 <switch_spi+0xa4>)
 8000b90:	601a      	str	r2, [r3, #0]
		NRF24L01P_SPI_CS_PIN_NUMBER = NRF24L01P_SPI_2_CS_PIN_NUMBER;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <switch_spi+0x8c>)
 8000b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b98:	801a      	strh	r2, [r3, #0]
		NRF24L01P_CE_PIN_PORT   = NRF24L01P_CE_2_PIN_PORT;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <switch_spi+0x90>)
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <switch_spi+0xa4>)
 8000b9e:	601a      	str	r2, [r3, #0]
		NRF24L01P_CE_PIN_NUMBER = NRF24L01P_CE_2_PIN_NUMBER;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <switch_spi+0x94>)
 8000ba2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ba6:	801a      	strh	r2, [r3, #0]
		NRF24L01P_IRQ_PIN_PORT   = NRF24L01P_IRQ_2_PIN_PORT;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <switch_spi+0x98>)
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <switch_spi+0xa4>)
 8000bac:	601a      	str	r2, [r3, #0]
		NRF24L01P_IRQ_PIN_NUMBER = NRF24L01P_IRQ_2_PIN_NUMBER;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <switch_spi+0x9c>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	801a      	strh	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	20002118 	.word	0x20002118
 8000bc4:	20002278 	.word	0x20002278
 8000bc8:	2000211c 	.word	0x2000211c
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	20002120 	.word	0x20002120
 8000bd4:	20002124 	.word	0x20002124
 8000bd8:	20002128 	.word	0x20002128
 8000bdc:	2000212c 	.word	0x2000212c
 8000be0:	20002130 	.word	0x20002130
 8000be4:	200022d0 	.word	0x200022d0
 8000be8:	40020400 	.word	0x40020400

08000bec <cs_high>:


static void cs_high()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <cs_high+0x18>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <cs_high+0x1c>)
 8000bf6:	8811      	ldrh	r1, [r2, #0]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 fb0e 	bl	800321c <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000211c 	.word	0x2000211c
 8000c08:	20002120 	.word	0x20002120

08000c0c <cs_low>:

static void cs_low()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <cs_low+0x18>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <cs_low+0x1c>)
 8000c16:	8811      	ldrh	r1, [r2, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fafe 	bl	800321c <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000211c 	.word	0x2000211c
 8000c28:	20002120 	.word	0x20002120

08000c2c <ce_high>:

static void ce_high()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <ce_high+0x18>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <ce_high+0x1c>)
 8000c36:	8811      	ldrh	r1, [r2, #0]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 faee 	bl	800321c <HAL_GPIO_WritePin>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20002124 	.word	0x20002124
 8000c48:	20002128 	.word	0x20002128

08000c4c <ce_low>:

static void ce_low()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <ce_low+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <ce_low+0x1c>)
 8000c56:	8811      	ldrh	r1, [r2, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fade 	bl	800321c <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20002124 	.word	0x20002124
 8000c68:	20002128 	.word	0x20002128

08000c6c <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000c7a:	f7ff ffc7 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <read_register+0x4c>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	f107 020e 	add.w	r2, r7, #14
 8000c86:	f107 010f 	add.w	r1, r7, #15
 8000c8a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	f004 fd4d 	bl	8005730 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <read_register+0x4c>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	f107 010d 	add.w	r1, r7, #13
 8000c9e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f004 fc2b 	bl	80054fe <HAL_SPI_Receive>
    cs_high();
 8000ca8:	f7ff ffa0 	bl	8000bec <cs_high>

    return read_val;
 8000cac:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20002118 	.word	0x20002118

08000cbc <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f043 0320 	orr.w	r3, r3, #32
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000cda:	f7ff ff97 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <write_register+0x5c>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f107 020e 	add.w	r2, r7, #14
 8000ce6:	f107 010f 	add.w	r1, r7, #15
 8000cea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f004 fd1d 	bl	8005730 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <write_register+0x5c>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	f107 010d 	add.w	r1, r7, #13
 8000cfe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d02:	2201      	movs	r2, #1
 8000d04:	f004 fab7 	bl	8005276 <HAL_SPI_Transmit>
    cs_high();
 8000d08:	f7ff ff70 	bl	8000bec <cs_high>

    return write_val;
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20002118 	.word	0x20002118

08000d1c <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps, uint8_t sel)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	460b      	mov	r3, r1
 8000d28:	717b      	strb	r3, [r7, #5]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	713b      	strb	r3, [r7, #4]
	switch_spi(sel);
 8000d2e:	793b      	ldrb	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff07 	bl	8000b44 <switch_spi>

    nrf24l01p_reset();
 8000d36:	f000 f8ab 	bl	8000e90 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000d3a:	f000 f8fd 	bl	8000f38 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000d3e:	f000 fa09 	bl	8001154 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8000d42:	2008      	movs	r0, #8
 8000d44:	f000 f9bc 	bl	80010c0 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa8e 	bl	800126c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 faba 	bl	80012cc <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 fa9a 	bl	8001292 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fa0d 	bl	800117e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000d64:	2005      	movs	r0, #5
 8000d66:	f000 fa2d 	bl	80011c4 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 fa3a 	bl	80011e4 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000d70:	20fa      	movs	r0, #250	@ 0xfa
 8000d72:	f000 fa53 	bl	800121c <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 8000d76:	f7ff ff59 	bl	8000c2c <ce_high>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <nrf24l01p_tx_init>:

void nrf24l01p_tx_init(channel MHz, air_data_rate bps, uint8_t sel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	80fb      	strh	r3, [r7, #6]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	717b      	strb	r3, [r7, #5]
 8000d90:	4613      	mov	r3, r2
 8000d92:	713b      	strb	r3, [r7, #4]
	switch_spi(sel);
 8000d94:	793b      	ldrb	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fed4 	bl	8000b44 <switch_spi>

    nrf24l01p_reset();
 8000d9c:	f000 f878 	bl	8000e90 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000da0:	f000 f8df 	bl	8000f62 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8000da4:	f000 f9d6 	bl	8001154 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fa5e 	bl	800126c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000db0:	797b      	ldrb	r3, [r7, #5]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fa8a 	bl	80012cc <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 fa6a 	bl	8001292 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f9dd 	bl	800117e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f000 f9fd 	bl	80011c4 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 fa0a 	bl	80011e4 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000dd0:	20fa      	movs	r0, #250	@ 0xfa
 8000dd2:	f000 fa23 	bl	800121c <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000dd6:	f7ff ff29 	bl	8000c2c <ce_high>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <nrf24l01p_rx_receive>:

void nrf24l01p_rx_receive(uint8_t* rx_payload, uint8_t sel)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	switch_spi(sel);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fea6 	bl	8000b44 <switch_spi>

    nrf24l01p_read_rx_fifo(rx_payload);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f8c7 	bl	8000f8c <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8000dfe:	f000 f96d 	bl	80010dc <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e06:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <nrf24l01p_rx_receive+0x30>)
 8000e08:	f002 fa21 	bl	800324e <HAL_GPIO_TogglePin>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40020800 	.word	0x40020800

08000e18 <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t* tx_payload, uint8_t sel)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	switch_spi(sel);
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fe8c 	bl	8000b44 <switch_spi>
    nrf24l01p_write_tx_fifo(tx_payload);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f8d3 	bl	8000fd8 <nrf24l01p_write_tx_fifo>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq(uint8_t sel)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	switch_spi(sel);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe7b 	bl	8000b44 <switch_spi>

    uint8_t tx_ds = nrf24l01p_get_status();
 8000e4e:	f000 f91d 	bl	800108c <nrf24l01p_get_status>
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
    tx_ds &= 0x20;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	73fb      	strb	r3, [r7, #15]

    if(tx_ds)
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <nrf24l01p_tx_irq+0x38>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e68:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <nrf24l01p_tx_irq+0x50>)
 8000e6a:	f002 f9f0 	bl	800324e <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8000e6e:	f000 f949 	bl	8001104 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8000e72:	e007      	b.n	8000e84 <nrf24l01p_tx_irq+0x48>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7a:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <nrf24l01p_tx_irq+0x50>)
 8000e7c:	f002 f9ce 	bl	800321c <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8000e80:	f000 f954 	bl	800112c <nrf24l01p_clear_max_rt>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020800 	.word	0x40020800

08000e90 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000e94:	f7ff feaa 	bl	8000bec <cs_high>
    ce_low();
 8000e98:	f7ff fed8 	bl	8000c4c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ff0c 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000ea4:	213f      	movs	r1, #63	@ 0x3f
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff ff08 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000eac:	2103      	movs	r1, #3
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff ff04 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f7ff ff00 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f7ff fefc 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f7ff fef8 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000ecc:	2107      	movs	r1, #7
 8000ece:	2006      	movs	r0, #6
 8000ed0:	f7ff fef4 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000ed4:	217e      	movs	r1, #126	@ 0x7e
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f7ff fef0 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000edc:	2100      	movs	r1, #0
 8000ede:	2011      	movs	r0, #17
 8000ee0:	f7ff feec 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2011      	movs	r0, #17
 8000ee8:	f7ff fee8 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000eec:	2100      	movs	r1, #0
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f7ff fee4 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2013      	movs	r0, #19
 8000ef8:	f7ff fee0 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2014      	movs	r0, #20
 8000f00:	f7ff fedc 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2015      	movs	r0, #21
 8000f08:	f7ff fed8 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2016      	movs	r0, #22
 8000f10:	f7ff fed4 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000f14:	2111      	movs	r1, #17
 8000f16:	2017      	movs	r0, #23
 8000f18:	f7ff fed0 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	201c      	movs	r0, #28
 8000f20:	f7ff fecc 	bl	8000cbc <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000f24:	2100      	movs	r1, #0
 8000f26:	201d      	movs	r0, #29
 8000f28:	f7ff fec8 	bl	8000cbc <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000f2c:	f000 f87a 	bl	8001024 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000f30:	f000 f892 	bl	8001058 <nrf24l01p_flush_tx_fifo>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fe94 	bl	8000c6c <read_register>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4619      	mov	r1, r3
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff feb1 	bl	8000cbc <write_register>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode()
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fe7f 	bl	8000c6c <read_register>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fe9c 	bl	8000cbc <write_register>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000f94:	2361      	movs	r3, #97	@ 0x61
 8000f96:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000f98:	f7ff fe38 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <nrf24l01p_read_rx_fifo+0x48>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f107 020e 	add.w	r2, r7, #14
 8000fa4:	f107 010f 	add.w	r1, r7, #15
 8000fa8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f004 fbbe 	bl	8005730 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <nrf24l01p_read_rx_fifo+0x48>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f004 fa9d 	bl	80054fe <HAL_SPI_Receive>
    cs_high();
 8000fc4:	f7ff fe12 	bl	8000bec <cs_high>

    return status;
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20002118 	.word	0x20002118

08000fd8 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000fe0:	23a0      	movs	r3, #160	@ 0xa0
 8000fe2:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000fe4:	f7ff fe12 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <nrf24l01p_write_tx_fifo+0x48>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f107 020e 	add.w	r2, r7, #14
 8000ff0:	f107 010f 	add.w	r1, r7, #15
 8000ff4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f004 fb98 	bl	8005730 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <nrf24l01p_write_tx_fifo+0x48>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001008:	2208      	movs	r2, #8
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f004 f933 	bl	8005276 <HAL_SPI_Transmit>
    cs_high(); 
 8001010:	f7ff fdec 	bl	8000bec <cs_high>

    return status;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20002118 	.word	0x20002118

08001024 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800102a:	23e2      	movs	r3, #226	@ 0xe2
 800102c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800102e:	f7ff fded 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <nrf24l01p_flush_rx_fifo+0x30>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	1dba      	adds	r2, r7, #6
 8001038:	1df9      	adds	r1, r7, #7
 800103a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	f004 fb75 	bl	8005730 <HAL_SPI_TransmitReceive>
    cs_high();
 8001046:	f7ff fdd1 	bl	8000bec <cs_high>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20002118 	.word	0x20002118

08001058 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800105e:	23e1      	movs	r3, #225	@ 0xe1
 8001060:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001062:	f7ff fdd3 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <nrf24l01p_flush_tx_fifo+0x30>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	1dba      	adds	r2, r7, #6
 800106c:	1df9      	adds	r1, r7, #7
 800106e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	f004 fb5b 	bl	8005730 <HAL_SPI_TransmitReceive>
    cs_high();
 800107a:	f7ff fdb7 	bl	8000bec <cs_high>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20002118 	.word	0x20002118

0800108c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8001092:	23ff      	movs	r3, #255	@ 0xff
 8001094:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001096:	f7ff fdb9 	bl	8000c0c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <nrf24l01p_get_status+0x30>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	1dba      	adds	r2, r7, #6
 80010a0:	1df9      	adds	r1, r7, #7
 80010a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	f004 fb41 	bl	8005730 <HAL_SPI_TransmitReceive>
    cs_high(); 
 80010ae:	f7ff fd9d 	bl	8000bec <cs_high>

    return status;
 80010b2:	79bb      	ldrb	r3, [r7, #6]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20002118 	.word	0x20002118

080010c0 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	4619      	mov	r1, r3
 80010ce:	2011      	movs	r0, #17
 80010d0:	f7ff fdf4 	bl	8000cbc <write_register>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80010e2:	f7ff ffd3 	bl	800108c <nrf24l01p_get_status>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f0:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2007      	movs	r0, #7
 80010f8:	f7ff fde0 	bl	8000cbc <write_register>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <nrf24l01p_clear_tx_ds>:

void nrf24l01p_clear_tx_ds()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800110a:	f7ff ffbf 	bl	800108c <nrf24l01p_get_status>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f043 0320 	orr.w	r3, r3, #32
 8001118:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4619      	mov	r1, r3
 800111e:	2007      	movs	r0, #7
 8001120:	f7ff fdcc 	bl	8000cbc <write_register>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001132:	f7ff ffab 	bl	800108c <nrf24l01p_get_status>
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f043 0310 	orr.w	r3, r3, #16
 8001140:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4619      	mov	r1, r3
 8001146:	2007      	movs	r0, #7
 8001148:	f7ff fdb8 	bl	8000cbc <write_register>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fd86 	bl	8000c6c <read_register>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4619      	mov	r1, r3
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fda3 	bl	8000cbc <write_register>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd6f 	bl	8000c6c <read_register>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d002      	beq.n	800119e <nrf24l01p_set_crc_length+0x20>
 8001198:	2b02      	cmp	r3, #2
 800119a:	d005      	beq.n	80011a8 <nrf24l01p_set_crc_length+0x2a>
 800119c:	e009      	b.n	80011b2 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	73fb      	strb	r3, [r7, #15]
            break;
 80011a6:	e004      	b.n	80011b2 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	73fb      	strb	r3, [r7, #15]
            break;
 80011b0:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fd80 	bl	8000cbc <write_register>
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	3b02      	subs	r3, #2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	2003      	movs	r0, #3
 80011d8:	f7ff fd70 	bl	8000cbc <write_register>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80011ee:	2004      	movs	r0, #4
 80011f0:	f7ff fd3c 	bl	8000c6c <read_register>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f063 030f 	orn	r3, r3, #15
 80011fe:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4313      	orrs	r3, r2
 8001206:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4619      	mov	r1, r3
 800120c:	2004      	movs	r0, #4
 800120e:	f7ff fd55 	bl	8000cbc <write_register>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001226:	2004      	movs	r0, #4
 8001228:	f7ff fd20 	bl	8000c6c <read_register>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	f043 030f 	orr.w	r3, r3, #15
 8001236:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <nrf24l01p_auto_retransmit_delay+0x4c>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	b29b      	uxth	r3, r3
 8001244:	3b01      	subs	r3, #1
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	b25a      	sxtb	r2, r3
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	b25b      	sxtb	r3, r3
 8001252:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4619      	mov	r1, r3
 8001258:	2004      	movs	r0, #4
 800125a:	f7ff fd2f 	bl	8000cbc <write_register>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	10624dd3 	.word	0x10624dd3

0800126c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 800127c:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	2005      	movs	r0, #5
 8001286:	f7ff fd19 	bl	8000cbc <write_register>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 800129c:	2006      	movs	r0, #6
 800129e:	f7ff fce5 	bl	8000c6c <read_register>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f023 0306 	bic.w	r3, r3, #6
 80012a8:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	b25a      	sxtb	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4619      	mov	r1, r3
 80012be:	2006      	movs	r0, #6
 80012c0:	f7ff fcfc 	bl	8000cbc <write_register>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80012d6:	2006      	movs	r0, #6
 80012d8:	f7ff fcc8 	bl	8000c6c <read_register>
 80012dc:	4603      	mov	r3, r0
 80012de:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80012e2:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d00a      	beq.n	8001300 <nrf24l01p_set_rf_air_data_rate+0x34>
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	dc0e      	bgt.n	800130c <nrf24l01p_set_rf_air_data_rate+0x40>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <nrf24l01p_set_rf_air_data_rate+0x3e>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10a      	bne.n	800130c <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	73fb      	strb	r3, [r7, #15]
            break;
 80012fe:	e005      	b.n	800130c <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	73fb      	strb	r3, [r7, #15]
            break;
 8001308:	e000      	b.n	800130c <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 800130a:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	4619      	mov	r1, r3
 8001310:	2006      	movs	r0, #6
 8001312:	f7ff fcd3 	bl	8000cbc <write_register>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 8001326:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <MX_SDIO_SD_Init+0x3c>)
 8001328:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001342:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <MX_SDIO_SD_Init+0x38>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20002134 	.word	0x20002134
 800135c:	40012c00 	.word	0x40012c00

08001360 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09a      	sub	sp, #104	@ 0x68
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	223c      	movs	r2, #60	@ 0x3c
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f008 fe4b 	bl	800a01c <memset>
  if(sdHandle->Instance==SDIO)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a79      	ldr	r2, [pc, #484]	@ (8001570 <HAL_SD_MspInit+0x210>)
 800138c:	4293      	cmp	r3, r2
 800138e:	f040 80ea 	bne.w	8001566 <HAL_SD_MspInit+0x206>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001392:	2360      	movs	r3, #96	@ 0x60
 8001394:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001396:	2300      	movs	r3, #0
 8001398:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800139a:	2300      	movs	r3, #0
 800139c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 f972 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80013ae:	f7ff fbc3 	bl	8000b38 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b68      	ldr	r3, [pc, #416]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a67      	ldr	r2, [pc, #412]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b65      	ldr	r3, [pc, #404]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a60      	ldr	r2, [pc, #384]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001418:	230c      	movs	r3, #12
 800141a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001420:	4619      	mov	r1, r3
 8001422:	4855      	ldr	r0, [pc, #340]	@ (8001578 <HAL_SD_MspInit+0x218>)
 8001424:	f001 fd66 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800143a:	230c      	movs	r3, #12
 800143c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001442:	4619      	mov	r1, r3
 8001444:	484c      	ldr	r0, [pc, #304]	@ (8001578 <HAL_SD_MspInit+0x218>)
 8001446:	f001 fd55 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800144a:	2304      	movs	r3, #4
 800144c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001452:	2301      	movs	r3, #1
 8001454:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800145a:	230c      	movs	r3, #12
 800145c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001462:	4619      	mov	r1, r3
 8001464:	4845      	ldr	r0, [pc, #276]	@ (800157c <HAL_SD_MspInit+0x21c>)
 8001466:	f001 fd45 	bl	8002ef4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800146a:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <HAL_SD_MspInit+0x220>)
 800146c:	4a45      	ldr	r2, [pc, #276]	@ (8001584 <HAL_SD_MspInit+0x224>)
 800146e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001470:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <HAL_SD_MspInit+0x220>)
 8001472:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001476:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001478:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_SD_MspInit+0x220>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147e:	4b40      	ldr	r3, [pc, #256]	@ (8001580 <HAL_SD_MspInit+0x220>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001484:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <HAL_SD_MspInit+0x220>)
 8001486:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800148a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800148c:	4b3c      	ldr	r3, [pc, #240]	@ (8001580 <HAL_SD_MspInit+0x220>)
 800148e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001492:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001494:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <HAL_SD_MspInit+0x220>)
 8001496:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800149a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800149c:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <HAL_SD_MspInit+0x220>)
 800149e:	2220      	movs	r2, #32
 80014a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a2:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014a8:	4b35      	ldr	r3, [pc, #212]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014aa:	2204      	movs	r2, #4
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014b0:	2203      	movs	r2, #3
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014b4:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014bc:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80014c4:	482e      	ldr	r0, [pc, #184]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014c6:	f001 f977 	bl	80027b8 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_SD_MspInit+0x174>
    {
      Error_Handler();
 80014d0:	f7ff fb32 	bl	8000b38 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80014da:	4a29      	ldr	r2, [pc, #164]	@ (8001580 <HAL_SD_MspInit+0x220>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_SD_MspInit+0x228>)
 80014e2:	4a2a      	ldr	r2, [pc, #168]	@ (800158c <HAL_SD_MspInit+0x22c>)
 80014e4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_SD_MspInit+0x228>)
 80014e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ec:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <HAL_SD_MspInit+0x228>)
 80014f0:	2240      	movs	r2, #64	@ 0x40
 80014f2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <HAL_SD_MspInit+0x228>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <HAL_SD_MspInit+0x228>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001500:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <HAL_SD_MspInit+0x228>)
 8001504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001508:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <HAL_SD_MspInit+0x228>)
 800150c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001510:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <HAL_SD_MspInit+0x228>)
 8001514:	2220      	movs	r2, #32
 8001516:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_SD_MspInit+0x228>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_SD_MspInit+0x228>)
 8001520:	2204      	movs	r2, #4
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_SD_MspInit+0x228>)
 8001526:	2203      	movs	r2, #3
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_SD_MspInit+0x228>)
 800152c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_SD_MspInit+0x228>)
 8001534:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001538:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800153a:	4813      	ldr	r0, [pc, #76]	@ (8001588 <HAL_SD_MspInit+0x228>)
 800153c:	f001 f93c 	bl	80027b8 <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_SD_MspInit+0x1ea>
    {
      Error_Handler();
 8001546:	f7ff faf7 	bl	8000b38 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <HAL_SD_MspInit+0x228>)
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <HAL_SD_MspInit+0x228>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2031      	movs	r0, #49	@ 0x31
 800155c:	f001 f8f5 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001560:	2031      	movs	r0, #49	@ 0x31
 8001562:	f001 f90e 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3768      	adds	r7, #104	@ 0x68
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012c00 	.word	0x40012c00
 8001574:	40023800 	.word	0x40023800
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	200021b8 	.word	0x200021b8
 8001584:	40026458 	.word	0x40026458
 8001588:	20002218 	.word	0x20002218
 800158c:	400264a0 	.word	0x400264a0

08001590 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_SPI1_Init+0x64>)
 8001596:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <MX_SPI1_Init+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_SPI1_Init+0x64>)
 800159c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015c4:	2218      	movs	r2, #24
 80015c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015dc:	220a      	movs	r2, #10
 80015de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015e2:	f003 fdbf 	bl	8005164 <HAL_SPI_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ec:	f7ff faa4 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20002278 	.word	0x20002278
 80015f8:	40013000 	.word	0x40013000

080015fc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001602:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <MX_SPI2_Init+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_SPI2_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001630:	2210      	movs	r2, #16
 8001632:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_SPI2_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_SPI2_Init+0x64>)
 8001648:	220a      	movs	r2, #10
 800164a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <MX_SPI2_Init+0x64>)
 800164e:	f003 fd89 	bl	8005164 <HAL_SPI_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001658:	f7ff fa6e 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200022d0 	.word	0x200022d0
 8001664:	40003800 	.word	0x40003800

08001668 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	@ 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a41      	ldr	r2, [pc, #260]	@ (800178c <HAL_SPI_MspInit+0x124>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12c      	bne.n	80016e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b40      	ldr	r3, [pc, #256]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a3f      	ldr	r2, [pc, #252]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b3d      	ldr	r3, [pc, #244]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016c2:	23e0      	movs	r3, #224	@ 0xe0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016d2:	2305      	movs	r3, #5
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	482d      	ldr	r0, [pc, #180]	@ (8001794 <HAL_SPI_MspInit+0x12c>)
 80016de:	f001 fc09 	bl	8002ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016e2:	e04f      	b.n	8001784 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001798 <HAL_SPI_MspInit+0x130>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d14a      	bne.n	8001784 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_SPI_MspInit+0x128>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001742:	230c      	movs	r3, #12
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001752:	2305      	movs	r3, #5
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	480f      	ldr	r0, [pc, #60]	@ (800179c <HAL_SPI_MspInit+0x134>)
 800175e:	f001 fbc9 	bl	8002ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001774:	2305      	movs	r3, #5
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <HAL_SPI_MspInit+0x138>)
 8001780:	f001 fbb8 	bl	8002ef4 <HAL_GPIO_Init>
}
 8001784:	bf00      	nop
 8001786:	3730      	adds	r7, #48	@ 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40013000 	.word	0x40013000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000
 8001798:	40003800 	.word	0x40003800
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184a:	f000 f8c7 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}

08001852 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001856:	2002      	movs	r0, #2
 8001858:	f001 fd14 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_2_Pin);
 8001864:	2004      	movs	r0, #4
 8001866:	f001 fd0d 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <CAN1_RX1_IRQHandler+0x10>)
 8001876:	f000 fc5d 	bl	8002134 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000040 	.word	0x20000040

08001884 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <SDIO_IRQHandler+0x10>)
 800188a:	f002 fdc3 	bl	8004414 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20002134 	.word	0x20002134

08001898 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA2_Stream3_IRQHandler+0x10>)
 800189e:	f001 f8b3 	bl	8002a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200021b8 	.word	0x200021b8

080018ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <DMA2_Stream6_IRQHandler+0x10>)
 80018b2:	f001 f8a9 	bl	8002a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20002218 	.word	0x20002218

080018c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800191c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018e8:	f7ff ffea 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f008 fb8b 	bl	800a02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7fe ffbb 	bl	8000890 <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800191c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001928:	0800a574 	.word	0x0800a574
  ldr r2, =_sbss
 800192c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001930:	20002570 	.word	0x20002570

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <HAL_Init+0x40>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_Init+0x40>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_Init+0x40>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 fee7 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff ff1a 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 feff 	bl	800279e <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 fec7 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000010 	.word	0x20000010
 80019d4:	20000018 	.word	0x20000018
 80019d8:	20000014 	.word	0x20000014

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000018 	.word	0x20000018
 8001a00:	20002328 	.word	0x20002328

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20002328 	.word	0x20002328

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000018 	.word	0x20000018

08001a64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0ed      	b.n	8001c52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fd92 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a98:	f7ff ffb4 	bl	8001a04 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a9e:	e012      	b.n	8001ac6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa0:	f7ff ffb0 	bl	8001a04 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	d90b      	bls.n	8001ac6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0c5      	b.n	8001c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0e5      	beq.n	8001aa0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0202 	bic.w	r2, r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae4:	f7ff ff8e 	bl	8001a04 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aea:	e012      	b.n	8001b12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aec:	f7ff ff8a 	bl	8001a04 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b0a      	cmp	r3, #10
 8001af8:	d90b      	bls.n	8001b12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e09f      	b.n	8001c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e5      	bne.n	8001aec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7e1b      	ldrb	r3, [r3, #24]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e007      	b.n	8001b4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7e5b      	ldrb	r3, [r3, #25]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e9b      	ldrb	r3, [r3, #26]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e007      	b.n	8001b9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0220 	bic.w	r2, r2, #32
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7edb      	ldrb	r3, [r3, #27]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0210 	bic.w	r2, r2, #16
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e007      	b.n	8001bc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0210 	orr.w	r2, r2, #16
 8001bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7f1b      	ldrb	r3, [r3, #28]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d108      	bne.n	8001be2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0208 	orr.w	r2, r2, #8
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e007      	b.n	8001bf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7f5b      	ldrb	r3, [r3, #29]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0204 	orr.w	r2, r2, #4
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	ea42 0103 	orr.w	r1, r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d003      	beq.n	8001c82 <HAL_CAN_ConfigFilter+0x26>
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	f040 80be 	bne.w	8001dfe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c82:	4b65      	ldr	r3, [pc, #404]	@ (8001e18 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c84:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c9c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d123      	bne.n	8001d2c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3248      	adds	r2, #72	@ 0x48
 8001d0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	3348      	adds	r3, #72	@ 0x48
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d122      	bne.n	8001d7a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3248      	adds	r2, #72	@ 0x48
 8001d5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	3348      	adds	r3, #72	@ 0x48
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d94:	e007      	b.n	8001da6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	401a      	ands	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001df0:	f023 0201 	bic.w	r2, r3, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e006      	b.n	8001e0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40006400 	.word	0x40006400

08001e1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d12e      	bne.n	8001e8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fddc 	bl	8001a04 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e4e:	e012      	b.n	8001e76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e50:	f7ff fdd8 	bl	8001a04 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d90b      	bls.n	8001e76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e012      	b.n	8001e9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e5      	bne.n	8001e50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e006      	b.n	8001e9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d003      	beq.n	8001ec8 <HAL_CAN_GetRxMessage+0x24>
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	f040 8103 	bne.w	80020ce <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10e      	bne.n	8001eec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0f7      	b.n	80020dc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d107      	bne.n	8001f0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e8      	b.n	80020dc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	331b      	adds	r3, #27
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0204 	and.w	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10c      	bne.n	8001f42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	331b      	adds	r3, #27
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e00b      	b.n	8001f5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	331b      	adds	r3, #27
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	331b      	adds	r3, #27
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0202 	and.w	r2, r3, #2
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	331b      	adds	r3, #27
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	331b      	adds	r3, #27
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	331b      	adds	r3, #27
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	331b      	adds	r3, #27
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0c1b      	lsrs	r3, r3, #16
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0a1a      	lsrs	r2, r3, #8
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0c1a      	lsrs	r2, r3, #16
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3302      	adds	r3, #2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e1a      	lsrs	r2, r3, #24
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3303      	adds	r3, #3
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	3304      	adds	r3, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0a1a      	lsrs	r2, r3, #8
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3305      	adds	r3, #5
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0c1a      	lsrs	r2, r3, #16
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3306      	adds	r3, #6
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e1a      	lsrs	r2, r3, #24
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3307      	adds	r3, #7
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	e007      	b.n	80020ca <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0220 	orr.w	r2, r2, #32
 80020c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e006      	b.n	80020dc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d002      	beq.n	8002106 <HAL_CAN_ActivateNotification+0x1e>
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d109      	bne.n	800211a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e006      	b.n	8002128 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d07c      	beq.n	8002274 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d023      	beq.n	80021cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f983 	bl	80024a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800219c:	e016      	b.n	80021cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	e00c      	b.n	80021cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c4:	e002      	b.n	80021cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f989 	bl	80024de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d024      	beq.n	8002220 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f963 	bl	80024b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80021f0:	e016      	b.n	8002220 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
 8002204:	e00c      	b.n	8002220 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
 8002218:	e002      	b.n	8002220 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f969 	bl	80024f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d024      	beq.n	8002274 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002232:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f943 	bl	80024ca <HAL_CAN_TxMailbox2CompleteCallback>
 8002244:	e016      	b.n	8002274 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
 8002258:	e00c      	b.n	8002274 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
 800226c:	e002      	b.n	8002274 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f949 	bl	8002506 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2210      	movs	r2, #16
 8002296:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2208      	movs	r2, #8
 80022b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f93a 	bl	800252e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f921 	bl	800251a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2210      	movs	r2, #16
 80022fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2208      	movs	r2, #8
 8002316:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f912 	bl	8002542 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe f988 	bl	800064c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2210      	movs	r2, #16
 8002356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8fc 	bl	8002556 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2208      	movs	r2, #8
 8002378:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8f5 	bl	800256a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d07b      	beq.n	8002482 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d072      	beq.n	800247a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d043      	beq.n	800247a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002402:	2b60      	cmp	r3, #96	@ 0x60
 8002404:	d02b      	beq.n	800245e <HAL_CAN_IRQHandler+0x32a>
 8002406:	2b60      	cmp	r3, #96	@ 0x60
 8002408:	d82e      	bhi.n	8002468 <HAL_CAN_IRQHandler+0x334>
 800240a:	2b50      	cmp	r3, #80	@ 0x50
 800240c:	d022      	beq.n	8002454 <HAL_CAN_IRQHandler+0x320>
 800240e:	2b50      	cmp	r3, #80	@ 0x50
 8002410:	d82a      	bhi.n	8002468 <HAL_CAN_IRQHandler+0x334>
 8002412:	2b40      	cmp	r3, #64	@ 0x40
 8002414:	d019      	beq.n	800244a <HAL_CAN_IRQHandler+0x316>
 8002416:	2b40      	cmp	r3, #64	@ 0x40
 8002418:	d826      	bhi.n	8002468 <HAL_CAN_IRQHandler+0x334>
 800241a:	2b30      	cmp	r3, #48	@ 0x30
 800241c:	d010      	beq.n	8002440 <HAL_CAN_IRQHandler+0x30c>
 800241e:	2b30      	cmp	r3, #48	@ 0x30
 8002420:	d822      	bhi.n	8002468 <HAL_CAN_IRQHandler+0x334>
 8002422:	2b10      	cmp	r3, #16
 8002424:	d002      	beq.n	800242c <HAL_CAN_IRQHandler+0x2f8>
 8002426:	2b20      	cmp	r3, #32
 8002428:	d005      	beq.n	8002436 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800242a:	e01d      	b.n	8002468 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002434:	e019      	b.n	800246a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800243e:	e014      	b.n	800246a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002448:	e00f      	b.n	800246a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002452:	e00a      	b.n	800246a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800245c:	e005      	b.n	800246a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002466:	e000      	b.n	800246a <HAL_CAN_IRQHandler+0x336>
            break;
 8002468:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002478:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f872 	bl	800257e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff f91e 	bl	8001a04 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e099      	b.n	8002908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f4:	e00f      	b.n	8002816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f6:	f7ff f905 	bl	8001a04 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b05      	cmp	r3, #5
 8002802:	d908      	bls.n	8002816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e078      	b.n	8002908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e8      	bne.n	80027f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4b38      	ldr	r3, [pc, #224]	@ (8002910 <HAL_DMA_Init+0x158>)
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	2b04      	cmp	r3, #4
 800286e:	d107      	bne.n	8002880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	4313      	orrs	r3, r2
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0307 	bic.w	r3, r3, #7
 8002896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d117      	bne.n	80028da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fa9d 	bl	8002dfc <DMA_CheckFifoParam>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028d6:	2301      	movs	r3, #1
 80028d8:	e016      	b.n	8002908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa54 	bl	8002d90 <DMA_CalcBaseAndBitshift>
 80028e8:	4603      	mov	r3, r0
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	223f      	movs	r2, #63	@ 0x3f
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	f010803f 	.word	0xf010803f

08002914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_DMA_Start_IT+0x26>
 8002936:	2302      	movs	r3, #2
 8002938:	e040      	b.n	80029bc <HAL_DMA_Start_IT+0xa8>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d12f      	bne.n	80029ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f9e6 	bl	8002d34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	223f      	movs	r2, #63	@ 0x3f
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0216 	orr.w	r2, r2, #22
 8002982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e005      	b.n	80029ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
 80029b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d004      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00c      	b.n	80029fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2205      	movs	r2, #5
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a14:	4b8e      	ldr	r3, [pc, #568]	@ (8002c50 <HAL_DMA_IRQHandler+0x248>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a8e      	ldr	r2, [pc, #568]	@ (8002c54 <HAL_DMA_IRQHandler+0x24c>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a32:	2208      	movs	r2, #8
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	2208      	movs	r2, #8
 8002a62:	409a      	lsls	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	2201      	movs	r2, #1
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	2204      	movs	r2, #4
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	2204      	movs	r2, #4
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d043      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03c      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	2210      	movs	r2, #16
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d018      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d024      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
 8002b36:	e01f      	b.n	8002b78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
 8002b48:	e016      	b.n	8002b78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0208 	bic.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 808f 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8087 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d136      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0216 	bic.w	r2, r2, #22
 8002bc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x1da>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0208 	bic.w	r2, r2, #8
 8002bf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	223f      	movs	r2, #63	@ 0x3f
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d07e      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
        }
        return;
 8002c1e:	e079      	b.n	8002d14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01d      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d031      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
 8002c4c:	e02c      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
 8002c4e:	bf00      	nop
 8002c50:	20000010 	.word	0x20000010
 8002c54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d023      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e01e      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10f      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d032      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d022      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d307      	bcc.n	8002cf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f2      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x2cc>
 8002cee:	e000      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d14:	bf00      	nop
    }
  }
}
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b40      	cmp	r3, #64	@ 0x40
 8002d60:	d108      	bne.n	8002d74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d72:	e007      	b.n	8002d84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3b10      	subs	r3, #16
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x64>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002daa:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <DMA_CalcBaseAndBitshift+0x68>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d909      	bls.n	8002dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd0:	e007      	b.n	8002de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	aaaaaaab 	.word	0xaaaaaaab
 8002df8:	0800a108 	.word	0x0800a108

08002dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11f      	bne.n	8002e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d856      	bhi.n	8002eca <DMA_CheckFifoParam+0xce>
 8002e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <DMA_CheckFifoParam+0x28>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002ecb 	.word	0x08002ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d046      	beq.n	8002ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e043      	b.n	8002ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4e:	d140      	bne.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e03d      	b.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	d121      	bne.n	8002ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d837      	bhi.n	8002ed6 <DMA_CheckFifoParam+0xda>
 8002e66:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <DMA_CheckFifoParam+0x70>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e83 	.word	0x08002e83
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002e95 	.word	0x08002e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e030      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d025      	beq.n	8002eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e92:	e022      	b.n	8002eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ea2:	e01c      	b.n	8002ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d903      	bls.n	8002eb2 <DMA_CheckFifoParam+0xb6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb0:	e018      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb6:	e015      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e00b      	b.n	8002ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e00a      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e008      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e006      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e004      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e153      	b.n	80031b8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 8142 	bne.w	80031b2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d005      	beq.n	8002f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d130      	bne.n	8002fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 809c 	beq.w	80031b2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b54      	ldr	r3, [pc, #336]	@ (80031d0 <HAL_GPIO_Init+0x2dc>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a53      	ldr	r2, [pc, #332]	@ (80031d0 <HAL_GPIO_Init+0x2dc>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b51      	ldr	r3, [pc, #324]	@ (80031d0 <HAL_GPIO_Init+0x2dc>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003096:	4a4f      	ldr	r2, [pc, #316]	@ (80031d4 <HAL_GPIO_Init+0x2e0>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a46      	ldr	r2, [pc, #280]	@ (80031d8 <HAL_GPIO_Init+0x2e4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x1f6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a45      	ldr	r2, [pc, #276]	@ (80031dc <HAL_GPIO_Init+0x2e8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x1f2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a44      	ldr	r2, [pc, #272]	@ (80031e0 <HAL_GPIO_Init+0x2ec>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x1ee>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a43      	ldr	r2, [pc, #268]	@ (80031e4 <HAL_GPIO_Init+0x2f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x1ea>
 80030da:	2303      	movs	r3, #3
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x1f8>
 80030de:	2307      	movs	r3, #7
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x1f8>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x1f8>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x1f8>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	@ (80031d4 <HAL_GPIO_Init+0x2e0>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310a:	4b37      	ldr	r3, [pc, #220]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312e:	4a2e      	ldr	r2, [pc, #184]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003134:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003158:	4a23      	ldr	r2, [pc, #140]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315e:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003182:	4a19      	ldr	r2, [pc, #100]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003188:	4b17      	ldr	r3, [pc, #92]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ac:	4a0e      	ldr	r2, [pc, #56]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f aea8 	bls.w	8002f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40013c00 	.word	0x40013c00

080031ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e001      	b.n	800320e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003238:	e003      	b.n	8003242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	041a      	lsls	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	041a      	lsls	r2, r3, #16
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43d9      	mvns	r1, r3
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	400b      	ands	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329a:	4a05      	ldr	r2, [pc, #20]	@ (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fc2a 	bl	8000afc <HAL_GPIO_EXTI_Callback>
  }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0cc      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b68      	ldr	r3, [pc, #416]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d90c      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b65      	ldr	r3, [pc, #404]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a58      	ldr	r2, [pc, #352]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a52      	ldr	r2, [pc, #328]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800332a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d044      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d119      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d003      	beq.n	8003372 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336e:	2b03      	cmp	r3, #3
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	4b3f      	ldr	r3, [pc, #252]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e067      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003392:	4b37      	ldr	r3, [pc, #220]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 0203 	bic.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4934      	ldr	r1, [pc, #208]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a4:	f7fe fb2e 	bl	8001a04 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe fb2a 	bl	8001a04 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e04f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 020c 	and.w	r2, r3, #12
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1eb      	bne.n	80033ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d4:	4b25      	ldr	r3, [pc, #148]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d20c      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b22      	ldr	r3, [pc, #136]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fa8e 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	0800a0f8 	.word	0x0800a0f8
 8003478:	20000010 	.word	0x20000010
 800347c:	20000014 	.word	0x20000014

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b094      	sub	sp, #80	@ 0x50
 8003486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4b79      	ldr	r3, [pc, #484]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d00d      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x40>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	f200 80e1 	bhi.w	800366c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x3a>
 80034b2:	e0db      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b73      	ldr	r3, [pc, #460]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x204>)
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034b8:	e0db      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ba:	4b73      	ldr	r3, [pc, #460]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x208>)
 80034bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034be:	e0d8      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d063      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0159      	lsls	r1, r3, #5
 8003500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003504:	0150      	lsls	r0, r2, #5
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4621      	mov	r1, r4
 800350c:	1a51      	subs	r1, r2, r1
 800350e:	6139      	str	r1, [r7, #16]
 8003510:	4629      	mov	r1, r5
 8003512:	eb63 0301 	sbc.w	r3, r3, r1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003524:	4659      	mov	r1, fp
 8003526:	018b      	lsls	r3, r1, #6
 8003528:	4651      	mov	r1, sl
 800352a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352e:	4651      	mov	r1, sl
 8003530:	018a      	lsls	r2, r1, #6
 8003532:	4651      	mov	r1, sl
 8003534:	ebb2 0801 	subs.w	r8, r2, r1
 8003538:	4659      	mov	r1, fp
 800353a:	eb63 0901 	sbc.w	r9, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	4623      	mov	r3, r4
 8003558:	eb18 0303 	adds.w	r3, r8, r3
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	462b      	mov	r3, r5
 8003560:	eb49 0303 	adc.w	r3, r9, r3
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003572:	4629      	mov	r1, r5
 8003574:	024b      	lsls	r3, r1, #9
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800357c:	4621      	mov	r1, r4
 800357e:	024a      	lsls	r2, r1, #9
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800358a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800358c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003590:	f7fc fe38 	bl	8000204 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800359c:	e058      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b38      	ldr	r3, [pc, #224]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	2200      	movs	r2, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	4611      	mov	r1, r2
 80035aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	f04f 0000 	mov.w	r0, #0
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	0159      	lsls	r1, r3, #5
 80035c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ca:	0150      	lsls	r0, r2, #5
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4641      	mov	r1, r8
 80035d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035d6:	4649      	mov	r1, r9
 80035d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f0:	ebb2 040a 	subs.w	r4, r2, sl
 80035f4:	eb63 050b 	sbc.w	r5, r3, fp
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	00eb      	lsls	r3, r5, #3
 8003602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003606:	00e2      	lsls	r2, r4, #3
 8003608:	4614      	mov	r4, r2
 800360a:	461d      	mov	r5, r3
 800360c:	4643      	mov	r3, r8
 800360e:	18e3      	adds	r3, r4, r3
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	464b      	mov	r3, r9
 8003614:	eb45 0303 	adc.w	r3, r5, r3
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003626:	4629      	mov	r1, r5
 8003628:	028b      	lsls	r3, r1, #10
 800362a:	4621      	mov	r1, r4
 800362c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003630:	4621      	mov	r1, r4
 8003632:	028a      	lsls	r2, r1, #10
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363a:	2200      	movs	r2, #0
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	61fa      	str	r2, [r7, #28]
 8003640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003644:	f7fc fdde 	bl	8000204 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4613      	mov	r3, r2
 800364e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	3301      	adds	r3, #1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003660:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x204>)
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003674:	4618      	mov	r0, r3
 8003676:	3750      	adds	r7, #80	@ 0x50
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	00f42400 	.word	0x00f42400
 8003688:	007a1200 	.word	0x007a1200

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80036ac:	4b87      	ldr	r3, [pc, #540]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036b2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4984      	ldr	r1, [pc, #528]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80036ca:	2301      	movs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036da:	4b7c      	ldr	r3, [pc, #496]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	4978      	ldr	r1, [pc, #480]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8083 	beq.w	8003810 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b6f      	ldr	r3, [pc, #444]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	4a6e      	ldr	r2, [pc, #440]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	@ 0x40
 800371a:	4b6c      	ldr	r3, [pc, #432]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003726:	4b6a      	ldr	r3, [pc, #424]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a69      	ldr	r2, [pc, #420]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003730:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003732:	f7fe f967 	bl	8001a04 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7fe f963 	bl	8001a04 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e162      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800374c:	4b60      	ldr	r3, [pc, #384]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003758:	4b5c      	ldr	r3, [pc, #368]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003760:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d02f      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	429a      	cmp	r2, r3
 8003774:	d028      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003776:	4b55      	ldr	r3, [pc, #340]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003780:	4b54      	ldr	r3, [pc, #336]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003786:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800378c:	4a4f      	ldr	r2, [pc, #316]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003792:	4b4e      	ldr	r3, [pc, #312]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d114      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800379e:	f7fe f931 	bl	8001a04 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fe f92d 	bl	8001a04 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e12a      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b43      	ldr	r3, [pc, #268]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80037d6:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	4938      	ldr	r1, [pc, #224]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
 80037f0:	e005      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x172>
 80037f2:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4a35      	ldr	r2, [pc, #212]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037f8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037fc:	6093      	str	r3, [r2, #8]
 80037fe:	4b33      	ldr	r3, [pc, #204]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003800:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	4930      	ldr	r1, [pc, #192]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800380c:	4313      	orrs	r3, r2
 800380e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003822:	4b2d      	ldr	r3, [pc, #180]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003824:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003832:	4b26      	ldr	r3, [pc, #152]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003838:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	4922      	ldr	r1, [pc, #136]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d011      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003854:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	491a      	ldr	r1, [pc, #104]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003872:	d101      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8003874:	2301      	movs	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003884:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800388a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	490e      	ldr	r1, [pc, #56]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d004      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b80      	cmp	r3, #128	@ 0x80
 80038a6:	f040 8091 	bne.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fe f8a8 	bl	8001a04 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038b6:	e013      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b8:	f7fe f8a4 	bl	8001a04 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0a3      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42470e40 	.word	0x42470e40
 80038d8:	424711e0 	.word	0x424711e0
 80038dc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e0:	4b4e      	ldr	r3, [pc, #312]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80038ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d023      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d019      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003930:	d00e      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800393a:	2b00      	cmp	r3, #0
 800393c:	d019      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d115      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800394e:	d110      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	492c      	ldr	r1, [pc, #176]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	019b      	lsls	r3, r3, #6
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	071b      	lsls	r3, r3, #28
 8003998:	4920      	ldr	r1, [pc, #128]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039a0:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a6:	f7fe f82d 	bl	8001a04 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ae:	f7fe f829 	bl	8001a04 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e028      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039c0:	4b16      	ldr	r3, [pc, #88]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039d8:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80039da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	490d      	ldr	r1, [pc, #52]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039fa:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80039fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a00:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	4904      	ldr	r1, [pc, #16]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	424710d8 	.word	0x424710d8
 8003a24:	42470068 	.word	0x42470068

08003a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e273      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d075      	beq.n	8003b32 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a46:	4b88      	ldr	r3, [pc, #544]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d00c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b85      	ldr	r3, [pc, #532]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d112      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b82      	ldr	r3, [pc, #520]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05b      	beq.n	8003b30 <HAL_RCC_OscConfig+0x108>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d157      	bne.n	8003b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e24e      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x74>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01d      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x98>
 8003aa6:	4b70      	ldr	r3, [pc, #448]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003ac0:	4b69      	ldr	r3, [pc, #420]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a68      	ldr	r2, [pc, #416]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b66      	ldr	r3, [pc, #408]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a65      	ldr	r2, [pc, #404]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd ff90 	bl	8001a04 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fd ff8c 	bl	8001a04 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	@ 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e213      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xc0>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd ff7c 	bl	8001a04 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd ff78 	bl	8001a04 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	@ 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1ff      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	4b51      	ldr	r3, [pc, #324]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0xe8>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b44      	ldr	r3, [pc, #272]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b41      	ldr	r3, [pc, #260]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x152>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1d3      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4937      	ldr	r1, [pc, #220]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e03a      	b.n	8003c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b34      	ldr	r3, [pc, #208]	@ (8003c6c <HAL_RCC_OscConfig+0x244>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fd ff31 	bl	8001a04 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fd ff2d 	bl	8001a04 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1b4      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4925      	ldr	r1, [pc, #148]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
 8003bd8:	e015      	b.n	8003c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <HAL_RCC_OscConfig+0x244>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd ff10 	bl	8001a04 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fd ff0c 	bl	8001a04 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e193      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d036      	beq.n	8003c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <HAL_RCC_OscConfig+0x248>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fef0 	bl	8001a04 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd feec 	bl	8001a04 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e173      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x200>
 8003c46:	e01b      	b.n	8003c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <HAL_RCC_OscConfig+0x248>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fd fed9 	bl	8001a04 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00e      	b.n	8003c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fd fed5 	bl	8001a04 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d907      	bls.n	8003c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e15c      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470000 	.word	0x42470000
 8003c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b8a      	ldr	r3, [pc, #552]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ea      	bne.n	8003c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8097 	beq.w	8003dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b83      	ldr	r3, [pc, #524]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b79      	ldr	r3, [pc, #484]	@ (8003ea4 <HAL_RCC_OscConfig+0x47c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d118      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cca:	4b76      	ldr	r3, [pc, #472]	@ (8003ea4 <HAL_RCC_OscConfig+0x47c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a75      	ldr	r2, [pc, #468]	@ (8003ea4 <HAL_RCC_OscConfig+0x47c>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd fe95 	bl	8001a04 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fd fe91 	bl	8001a04 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e118      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCC_OscConfig+0x47c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2ea>
 8003d04:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a65      	ldr	r2, [pc, #404]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0x324>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x30c>
 8003d1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a60      	ldr	r2, [pc, #384]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d26:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0x324>
 8003d34:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a59      	ldr	r2, [pc, #356]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d40:	4b57      	ldr	r3, [pc, #348]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a56      	ldr	r2, [pc, #344]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd fe56 	bl	8001a04 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd fe52 	bl	8001a04 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0d7      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RCC_OscConfig+0x334>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fe40 	bl	8001a04 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd fe3c 	bl	8001a04 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0c1      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ee      	bne.n	8003d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80ad 	beq.w	8003f20 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d060      	beq.n	8003e94 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d145      	bne.n	8003e66 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b33      	ldr	r3, [pc, #204]	@ (8003ea8 <HAL_RCC_OscConfig+0x480>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fe10 	bl	8001a04 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fe0c 	bl	8001a04 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e093      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	491b      	ldr	r1, [pc, #108]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCC_OscConfig+0x480>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fde1 	bl	8001a04 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fd fddd 	bl	8001a04 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e064      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x41e>
 8003e64:	e05c      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_RCC_OscConfig+0x480>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fdca 	bl	8001a04 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fdc6 	bl	8001a04 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04d      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_OscConfig+0x478>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x44c>
 8003e92:	e045      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e040      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eac:	4b1f      	ldr	r3, [pc, #124]	@ (8003f2c <HAL_RCC_OscConfig+0x504>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d030      	beq.n	8003f1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d129      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d122      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d119      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d10f      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e022      	b.n	8003f88 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fd fa03 	bl	8001360 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f814 	bl	8003f90 <HAL_SD_InitCard>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00a      	b.n	8003f88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b08e      	sub	sp, #56	@ 0x38
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003fac:	2376      	movs	r3, #118	@ 0x76
 8003fae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681d      	ldr	r5, [r3, #0]
 8003fb4:	466c      	mov	r4, sp
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f001 fe9d 	bl	8005d08 <SDIO_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04f      	b.n	8004080 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003fe0:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <HAL_SD_InitCard+0xf8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fed5 	bl	8005d9a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ff0:	4b25      	ldr	r3, [pc, #148]	@ (8004088 <HAL_SD_InitCard+0xf8>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ff6:	2002      	movs	r0, #2
 8003ff8:	f7fd fd10 	bl	8001a1c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 ff55 	bl	8004eac <SD_PowerON>
 8004002:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e02e      	b.n	8004080 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fe74 	bl	8004d10 <SD_InitCard>
 8004028:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e01b      	b.n	8004080 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004050:	4618      	mov	r0, r3
 8004052:	f001 ff34 	bl	8005ebe <SDMMC_CmdBlockLength>
 8004056:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00f      	beq.n	800407e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <HAL_SD_InitCard+0xfc>)
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	@ 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bdb0      	pop	{r4, r5, r7, pc}
 8004088:	422580a0 	.word	0x422580a0
 800408c:	004005ff 	.word	0x004005ff

08004090 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	@ 0x30
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0be      	b.n	8004236 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	f040 80b7 	bne.w	8004234 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d907      	bls.n	80040ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0a5      	b.n	8004236 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2203      	movs	r2, #3
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004108:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	4a4c      	ldr	r2, [pc, #304]	@ (8004240 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8004110:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	4a4b      	ldr	r2, [pc, #300]	@ (8004244 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004118:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	2200      	movs	r2, #0
 8004120:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3380      	adds	r3, #128	@ 0x80
 8004150:	4619      	mov	r1, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	025b      	lsls	r3, r3, #9
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	f7fe fbdb 	bl	8002914 <HAL_DMA_Start_IT>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d017      	beq.n	8004194 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004172:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a33      	ldr	r2, [pc, #204]	@ (8004248 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800417a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e050      	b.n	8004236 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004194:	4b2d      	ldr	r3, [pc, #180]	@ (800424c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d002      	beq.n	80041a8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	025b      	lsls	r3, r3, #9
 80041b2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80041b4:	2390      	movs	r3, #144	@ 0x90
 80041b6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80041b8:	2302      	movs	r3, #2
 80041ba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80041bc:	2300      	movs	r3, #0
 80041be:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f107 0210 	add.w	r2, r7, #16
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fe49 	bl	8005e66 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d90a      	bls.n	80041f0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2282      	movs	r2, #130	@ 0x82
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fead 	bl	8005f46 <SDMMC_CmdReadMultiBlock>
 80041ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80041ee:	e009      	b.n	8004204 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2281      	movs	r2, #129	@ 0x81
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fe80 	bl	8005f02 <SDMMC_CmdReadSingleBlock>
 8004202:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a0e      	ldr	r2, [pc, #56]	@ (8004248 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e002      	b.n	8004236 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3730      	adds	r7, #48	@ 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	08004b1f 	.word	0x08004b1f
 8004244:	08004b91 	.word	0x08004b91
 8004248:	004005ff 	.word	0x004005ff
 800424c:	4225858c 	.word	0x4225858c

08004250 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	@ 0x30
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0c1      	b.n	80043fc <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	f040 80ba 	bne.w	80043fa <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800428c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	429a      	cmp	r2, r3
 8004298:	d907      	bls.n	80042aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0a8      	b.n	80043fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2203      	movs	r2, #3
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 021a 	orr.w	r2, r2, #26
 80042c8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004404 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80042d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	4a4c      	ldr	r2, [pc, #304]	@ (8004408 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80042d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	2200      	movs	r2, #0
 80042e0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d002      	beq.n	80042f0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	025b      	lsls	r3, r3, #9
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d90a      	bls.n	800430c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22a0      	movs	r2, #160	@ 0xa0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fe63 	bl	8005fce <SDMMC_CmdWriteMultiBlock>
 8004308:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800430a:	e009      	b.n	8004320 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2290      	movs	r2, #144	@ 0x90
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fe36 	bl	8005f8a <SDMMC_CmdWriteSingleBlock>
 800431e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d012      	beq.n	800434c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a38      	ldr	r2, [pc, #224]	@ (800440c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e057      	b.n	80043fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800434c:	4b30      	ldr	r3, [pc, #192]	@ (8004410 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3380      	adds	r3, #128	@ 0x80
 8004382:	461a      	mov	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	025b      	lsls	r3, r3, #9
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	f7fe fac3 	bl	8002914 <HAL_DMA_Start_IT>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 021a 	bic.w	r2, r2, #26
 80043a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a18      	ldr	r2, [pc, #96]	@ (800440c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80043aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e018      	b.n	80043fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295
 80043ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	025b      	lsls	r3, r3, #9
 80043d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80043d6:	2390      	movs	r3, #144	@ 0x90
 80043d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f107 0210 	add.w	r2, r7, #16
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 fd38 	bl	8005e66 <SDIO_ConfigData>

      return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3730      	adds	r7, #48	@ 0x30
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08004af5 	.word	0x08004af5
 8004408:	08004b91 	.word	0x08004b91
 800440c:	004005ff 	.word	0x004005ff
 8004410:	4225858c 	.word	0x4225858c

08004414 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_SD_IRQHandler+0x2e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fdec 	bl	8005018 <SD_Read_IT>
 8004440:	e155      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 808f 	beq.w	8004570 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800445a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800446a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800446e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d039      	beq.n	80044fe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <HAL_SD_IRQHandler+0x8a>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 fdb6 	bl	8006014 <SDMMC_CmdStopTransfer>
 80044a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f91f 	bl	8004700 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_SD_IRQHandler+0xda>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f002 f9d4 	bl	800689c <HAL_SD_RxCpltCallback>
 80044f4:	e0fb      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f002 f9c6 	bl	8006888 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044fc:	e0f7      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80f2 	beq.w	80046ee <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d011      	beq.n	8004538 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f001 fd7b 	bl	8006014 <SDMMC_CmdStopTransfer>
 800451e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8e4 	bl	8004700 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 80d5 	bne.w	80046ee <HAL_SD_IRQHandler+0x2da>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80cf 	bne.w	80046ee <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0208 	bic.w	r2, r2, #8
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f002 f98d 	bl	8006888 <HAL_SD_TxCpltCallback>
}
 800456e:	e0be      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_SD_IRQHandler+0x17c>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fd96 	bl	80050ba <SD_Write_IT>
 800458e:	e0ae      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80a7 	beq.w	80046ee <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	f043 0208 	orr.w	r2, r3, #8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	f043 0210 	orr.w	r2, r3, #16
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004620:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f001 fcf4 	bl	8006014 <SDMMC_CmdStopTransfer>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f855 	bl	8004700 <HAL_SD_ErrorCallback>
}
 8004656:	e04a      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d045      	beq.n	80046ee <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_SD_IRQHandler+0x262>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d011      	beq.n	800469a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	4a1f      	ldr	r2, [pc, #124]	@ (80046f8 <HAL_SD_IRQHandler+0x2e4>)
 800467c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe f99e 	bl	80029c4 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02f      	beq.n	80046ee <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	4618      	mov	r0, r3
 8004694:	f000 face 	bl	8004c34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004698:	e029      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_SD_IRQHandler+0x29a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <HAL_SD_IRQHandler+0x2e8>)
 80046b4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f982 	bl	80029c4 <HAL_DMA_Abort_IT>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fae9 	bl	8004ca2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80046d0:	e00d      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f002 f8c4 	bl	8006874 <HAL_SD_AbortCallback>
}
 80046ec:	e7ff      	b.n	80046ee <HAL_SD_IRQHandler+0x2da>
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	08004c35 	.word	0x08004c35
 80046fc:	08004ca3 	.word	0x08004ca3

08004700 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004722:	0f9b      	lsrs	r3, r3, #30
 8004724:	b2da      	uxtb	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800472e:	0e9b      	lsrs	r3, r3, #26
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	b2da      	uxtb	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004740:	0e1b      	lsrs	r3, r3, #24
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	b2da      	uxtb	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	b2da      	uxtb	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b2da      	uxtb	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004774:	0d1b      	lsrs	r3, r3, #20
 8004776:	b29a      	uxth	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	b2da      	uxtb	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004792:	0bdb      	lsrs	r3, r3, #15
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047a4:	0b9b      	lsrs	r3, r3, #14
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b6:	0b5b      	lsrs	r3, r3, #13
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c8:	0b1b      	lsrs	r3, r3, #12
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2200      	movs	r2, #0
 80047da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d163      	bne.n	80048ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e8:	009a      	lsls	r2, r3, #2
 80047ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047ee:	4013      	ands	r3, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80047f4:	0f92      	lsrs	r2, r2, #30
 80047f6:	431a      	orrs	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004800:	0edb      	lsrs	r3, r3, #27
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	b2da      	uxtb	r2, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004812:	0e1b      	lsrs	r3, r3, #24
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	b2da      	uxtb	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004824:	0d5b      	lsrs	r3, r3, #21
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	b2da      	uxtb	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004836:	0c9b      	lsrs	r3, r3, #18
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	b2da      	uxtb	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004848:	0bdb      	lsrs	r3, r3, #15
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	b2da      	uxtb	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	7e1b      	ldrb	r3, [r3, #24]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	3302      	adds	r3, #2
 800486c:	2201      	movs	r2, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004876:	fb03 f202 	mul.w	r2, r3, r2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	7a1b      	ldrb	r3, [r3, #8]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2201      	movs	r2, #1
 800488a:	409a      	lsls	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004898:	0a52      	lsrs	r2, r2, #9
 800489a:	fb03 f202 	mul.w	r2, r3, r2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80048aa:	e031      	b.n	8004910 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d11d      	bne.n	80048f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	3301      	adds	r3, #1
 80048d0:	029a      	lsls	r2, r3, #10
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80048ee:	e00f      	b.n	8004910 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a58      	ldr	r2, [pc, #352]	@ (8004a58 <HAL_SD_GetCardCSD+0x344>)
 80048f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e09d      	b.n	8004a4c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004914:	0b9b      	lsrs	r3, r3, #14
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	b2da      	uxtb	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004926:	09db      	lsrs	r3, r3, #7
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800492e:	b2da      	uxtb	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800493e:	b2da      	uxtb	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	0fdb      	lsrs	r3, r3, #31
 800494a:	b2da      	uxtb	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004954:	0f5b      	lsrs	r3, r3, #29
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	b2da      	uxtb	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	0e9b      	lsrs	r3, r3, #26
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	b2da      	uxtb	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004978:	0d9b      	lsrs	r3, r3, #22
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	b2da      	uxtb	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	0d5b      	lsrs	r3, r3, #21
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	b2da      	uxtb	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	0bdb      	lsrs	r3, r3, #15
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ce:	0b9b      	lsrs	r3, r3, #14
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e2:	0b5b      	lsrs	r3, r3, #13
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	0b1b      	lsrs	r3, r3, #12
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	0a9b      	lsrs	r3, r3, #10
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	004005ff 	.word	0x004005ff

08004a5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa7e 	bl	8004fc8 <SD_SendStatus>
 8004acc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	0a5b      	lsrs	r3, r3, #9
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004aea:	693b      	ldr	r3, [r7, #16]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b10:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	2b82      	cmp	r3, #130	@ 0x82
 8004b32:	d111      	bne.n	8004b58 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fa6b 	bl	8006014 <SDMMC_CmdStopTransfer>
 8004b3e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff fdd4 	bl	8004700 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0208 	bic.w	r2, r2, #8
 8004b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b70:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f001 fe8b 	bl	800689c <HAL_SD_RxCpltCallback>
#endif
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fe f8bc 	bl	8002d1c <HAL_DMA_GetError>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d03e      	beq.n	8004c28 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d002      	beq.n	8004bc6 <SD_DMAError+0x36>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d12d      	bne.n	8004c22 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <SD_DMAError+0xa0>)
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004bea:	6978      	ldr	r0, [r7, #20]
 8004bec:	f7ff ff62 	bl	8004ab4 <HAL_SD_GetCardState>
 8004bf0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b06      	cmp	r3, #6
 8004bf6:	d002      	beq.n	8004bfe <SD_DMAError+0x6e>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d10a      	bne.n	8004c14 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fa06 	bl	8006014 <SDMMC_CmdStopTransfer>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f7ff fd6c 	bl	8004700 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	004005ff 	.word	0x004005ff

08004c34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004c4a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff ff31 	bl	8004ab4 <HAL_SD_GetCardState>
 8004c52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b06      	cmp	r3, #6
 8004c66:	d002      	beq.n	8004c6e <SD_DMATxAbort+0x3a>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d10a      	bne.n	8004c84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 f9ce 	bl	8006014 <SDMMC_CmdStopTransfer>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f001 fdf1 	bl	8006874 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c92:	e002      	b.n	8004c9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff fd33 	bl	8004700 <HAL_SD_ErrorCallback>
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004cb8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff fefa 	bl	8004ab4 <HAL_SD_GetCardState>
 8004cc0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d002      	beq.n	8004cdc <SD_DMARxAbort+0x3a>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d10a      	bne.n	8004cf2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f997 	bl	8006014 <SDMMC_CmdStopTransfer>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f001 fdba 	bl	8006874 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004d00:	e002      	b.n	8004d08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fcfc 	bl	8004700 <HAL_SD_ErrorCallback>
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d10:	b5b0      	push	{r4, r5, r7, lr}
 8004d12:	b094      	sub	sp, #80	@ 0x50
 8004d14:	af04      	add	r7, sp, #16
 8004d16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f848 	bl	8005db6 <SDIO_GetPowerState>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d2c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004d30:	e0b8      	b.n	8004ea4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d02f      	beq.n	8004d9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 fa2f 	bl	80061a2 <SDMMC_CmdSendCID>
 8004d44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <SD_InitCard+0x40>
    {
      return errorstate;
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d4e:	e0a9      	b.n	8004ea4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f872 	bl	8005e40 <SDIO_GetResponse>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2104      	movs	r1, #4
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 f869 	bl	8005e40 <SDIO_GetResponse>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2108      	movs	r1, #8
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f860 	bl	8005e40 <SDIO_GetResponse>
 8004d80:	4602      	mov	r2, r0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	210c      	movs	r1, #12
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 f857 	bl	8005e40 <SDIO_GetResponse>
 8004d92:	4602      	mov	r2, r0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d00d      	beq.n	8004dbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f107 020e 	add.w	r2, r7, #14
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fa35 	bl	800621c <SDMMC_CmdSetRelAdd>
 8004db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <SD_InitCard+0xae>
    {
      return errorstate;
 8004dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbc:	e072      	b.n	8004ea4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d036      	beq.n	8004e34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004dc6:	89fb      	ldrh	r3, [r7, #14]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f001 f9ff 	bl	80061de <SDMMC_CmdSendCSD>
 8004de0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <SD_InitCard+0xdc>
    {
      return errorstate;
 8004de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dea:	e05b      	b.n	8004ea4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f824 	bl	8005e40 <SDIO_GetResponse>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2104      	movs	r1, #4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f81b 	bl	8005e40 <SDIO_GetResponse>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2108      	movs	r1, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 f812 	bl	8005e40 <SDIO_GetResponse>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	210c      	movs	r1, #12
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 f809 	bl	8005e40 <SDIO_GetResponse>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2104      	movs	r1, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 f800 	bl	8005e40 <SDIO_GetResponse>
 8004e40:	4603      	mov	r3, r0
 8004e42:	0d1a      	lsrs	r2, r3, #20
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fc60 	bl	8004714 <HAL_SD_GetCardCSD>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e5e:	e021      	b.n	8004ea4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	461c      	mov	r4, r3
 8004e6e:	4615      	mov	r5, r2
 8004e70:	4622      	mov	r2, r4
 8004e72:	462b      	mov	r3, r5
 8004e74:	4608      	mov	r0, r1
 8004e76:	f001 f8ef 	bl	8006058 <SDMMC_CmdSelDesel>
 8004e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <SD_InitCard+0x176>
  {
    return errorstate;
 8004e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e84:	e00e      	b.n	8004ea4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	466c      	mov	r4, sp
 8004e8e:	f103 0210 	add.w	r2, r3, #16
 8004e92:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e98:	3304      	adds	r3, #4
 8004e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 ff33 	bl	8005d08 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3740      	adds	r7, #64	@ 0x40
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}

08004eac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f001 f8ea 	bl	800609e <SDMMC_CmdGoIdleState>
 8004eca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	e072      	b.n	8004fbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 f8fd 	bl	80060da <SDMMC_CmdOperCond>
 8004ee0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 f8d3 	bl	800609e <SDMMC_CmdGoIdleState>
 8004ef8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	e05b      	b.n	8004fbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d137      	bne.n	8004f82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f8fd 	bl	8006118 <SDMMC_CmdAppCommand>
 8004f1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d02d      	beq.n	8004f82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f2a:	e047      	b.n	8004fbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f8f0 	bl	8006118 <SDMMC_CmdAppCommand>
 8004f38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <SD_PowerON+0x98>
    {
      return errorstate;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	e03b      	b.n	8004fbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	491e      	ldr	r1, [pc, #120]	@ (8004fc4 <SD_PowerON+0x118>)
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 f906 	bl	800615c <SDMMC_CmdAppOperCommand>
 8004f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f5c:	e02e      	b.n	8004fbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 ff6b 	bl	8005e40 <SDIO_GetResponse>
 8004f6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	0fdb      	lsrs	r3, r3, #31
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <SD_PowerON+0xcc>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <SD_PowerON+0xce>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]

    count++;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d802      	bhi.n	8004f92 <SD_PowerON+0xe6>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0cc      	beq.n	8004f2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d902      	bls.n	8004fa2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004f9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fa0:	e00c      	b.n	8004fbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fb2:	e002      	b.n	8004fba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	c1100000 	.word	0xc1100000

08004fc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004fd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fdc:	e018      	b.n	8005010 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f001 f937 	bl	800625e <SDMMC_CmdSendStatus>
 8004ff0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	e009      	b.n	8005010 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 ff1c 	bl	8005e40 <SDIO_GetResponse>
 8005008:	4602      	mov	r2, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03f      	beq.n	80050b2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e033      	b.n	80050a0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fe8e 	bl	8005d5e <SDIO_ReadFIFO>
 8005042:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3b01      	subs	r3, #1
 8005056:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	3b01      	subs	r3, #1
 800506c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	0e1b      	lsrs	r3, r3, #24
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	3b01      	subs	r3, #1
 8005098:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	3301      	adds	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b07      	cmp	r3, #7
 80050a4:	d9c8      	bls.n	8005038 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d043      	beq.n	800515c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e037      	b.n	800514a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3301      	adds	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	021a      	lsls	r2, r3, #8
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3b01      	subs	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	041a      	lsls	r2, r3, #16
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3301      	adds	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3b01      	subs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	061a      	lsls	r2, r3, #24
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4313      	orrs	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f107 0208 	add.w	r2, r7, #8
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fe1a 	bl	8005d78 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3301      	adds	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b07      	cmp	r3, #7
 800514e:	d9c4      	bls.n	80050da <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800515c:	bf00      	nop
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07b      	b.n	800526e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d108      	bne.n	8005190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005186:	d009      	beq.n	800519c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	61da      	str	r2, [r3, #28]
 800518e:	e005      	b.n	800519c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc fa56 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	ea42 0103 	orr.w	r1, r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0104 	and.w	r1, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f003 0210 	and.w	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800525c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b088      	sub	sp, #32
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005286:	f7fc fbbd 	bl	8001a04 <HAL_GetTick>
 800528a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800529c:	2302      	movs	r3, #2
 800529e:	e12a      	b.n	80054f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x36>
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e122      	b.n	80054f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_SPI_Transmit+0x48>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e11b      	b.n	80054f6 <HAL_SPI_Transmit+0x280>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2203      	movs	r2, #3
 80052ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800530c:	d10f      	bne.n	800532e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800531c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800532c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b40      	cmp	r3, #64	@ 0x40
 800533a:	d007      	beq.n	800534c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800534a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005354:	d152      	bne.n	80053fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_SPI_Transmit+0xee>
 800535e:	8b7b      	ldrh	r3, [r7, #26]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d145      	bne.n	80053f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	881a      	ldrh	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005388:	e032      	b.n	80053f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d112      	bne.n	80053be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053bc:	e018      	b.n	80053f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053be:	f7fc fb21 	bl	8001a04 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d803      	bhi.n	80053d6 <HAL_SPI_Transmit+0x160>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d102      	bne.n	80053dc <HAL_SPI_Transmit+0x166>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e082      	b.n	80054f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1c7      	bne.n	800538a <HAL_SPI_Transmit+0x114>
 80053fa:	e053      	b.n	80054a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_SPI_Transmit+0x194>
 8005404:	8b7b      	ldrh	r3, [r7, #26]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d147      	bne.n	800549a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005430:	e033      	b.n	800549a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b02      	cmp	r3, #2
 800543e:	d113      	bne.n	8005468 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005466:	e018      	b.n	800549a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005468:	f7fc facc 	bl	8001a04 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d803      	bhi.n	8005480 <HAL_SPI_Transmit+0x20a>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d102      	bne.n	8005486 <HAL_SPI_Transmit+0x210>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e02d      	b.n	80054f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1c6      	bne.n	8005432 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fbd9 	bl	8005c60 <SPI_EndRxTxTransaction>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
 800551c:	e104      	b.n	8005728 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005526:	d112      	bne.n	800554e <HAL_SPI_Receive+0x50>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10e      	bne.n	800554e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2204      	movs	r2, #4
 8005534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f8f3 	bl	8005730 <HAL_SPI_TransmitReceive>
 800554a:	4603      	mov	r3, r0
 800554c:	e0ec      	b.n	8005728 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800554e:	f7fc fa59 	bl	8001a04 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Receive+0x62>
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0e1      	b.n	8005728 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_SPI_Receive+0x74>
 800556e:	2302      	movs	r3, #2
 8005570:	e0da      	b.n	8005728 <HAL_SPI_Receive+0x22a>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2204      	movs	r2, #4
 800557e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	88fa      	ldrh	r2, [r7, #6]
 8005598:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c0:	d10f      	bne.n	80055e2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b40      	cmp	r3, #64	@ 0x40
 80055ee:	d007      	beq.n	8005600 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d170      	bne.n	80056ea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005608:	e035      	b.n	8005676 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d115      	bne.n	8005644 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f103 020c 	add.w	r2, r3, #12
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005642:	e018      	b.n	8005676 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005644:	f7fc f9de 	bl	8001a04 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d803      	bhi.n	800565c <HAL_SPI_Receive+0x15e>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d102      	bne.n	8005662 <HAL_SPI_Receive+0x164>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e058      	b.n	8005728 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1c4      	bne.n	800560a <HAL_SPI_Receive+0x10c>
 8005680:	e038      	b.n	80056f4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b01      	cmp	r3, #1
 800568e:	d113      	bne.n	80056b8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	b292      	uxth	r2, r2
 800569c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	1c9a      	adds	r2, r3, #2
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056b6:	e018      	b.n	80056ea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b8:	f7fc f9a4 	bl	8001a04 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d803      	bhi.n	80056d0 <HAL_SPI_Receive+0x1d2>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Receive+0x1d8>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e01e      	b.n	8005728 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1c6      	bne.n	8005682 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fa4b 	bl	8005b94 <SPI_EndRxTransaction>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005726:	2300      	movs	r3, #0
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	@ 0x28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800573e:	2301      	movs	r3, #1
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005742:	f7fc f95f 	bl	8001a04 <HAL_GetTick>
 8005746:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800574e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800575a:	7ffb      	ldrb	r3, [r7, #31]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d00c      	beq.n	800577a <HAL_SPI_TransmitReceive+0x4a>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005766:	d106      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x46>
 8005770:	7ffb      	ldrb	r3, [r7, #31]
 8005772:	2b04      	cmp	r3, #4
 8005774:	d001      	beq.n	800577a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
 8005778:	e17f      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_SPI_TransmitReceive+0x5c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_SPI_TransmitReceive+0x5c>
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e174      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_SPI_TransmitReceive+0x6e>
 800579a:	2302      	movs	r3, #2
 800579c:	e16d      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d003      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2205      	movs	r2, #5
 80057b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	887a      	ldrh	r2, [r7, #2]
 80057ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	887a      	ldrh	r2, [r7, #2]
 80057dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d007      	beq.n	800580e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800580c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005816:	d17e      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_SPI_TransmitReceive+0xf6>
 8005820:	8afb      	ldrh	r3, [r7, #22]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d16c      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	881a      	ldrh	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	1c9a      	adds	r2, r3, #2
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584a:	e059      	b.n	8005900 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d11b      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x162>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d016      	beq.n	8005892 <HAL_SPI_TransmitReceive+0x162>
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	2b01      	cmp	r3, #1
 8005868:	d113      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d119      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x1a4>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d014      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	b292      	uxth	r2, r2
 80058b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058d0:	2301      	movs	r3, #1
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058d4:	f7fc f896 	bl	8001a04 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d80d      	bhi.n	8005900 <HAL_SPI_TransmitReceive+0x1d0>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d009      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e0bc      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1a0      	bne.n	800584c <HAL_SPI_TransmitReceive+0x11c>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d19b      	bne.n	800584c <HAL_SPI_TransmitReceive+0x11c>
 8005914:	e082      	b.n	8005a1c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x1f4>
 800591e:	8afb      	ldrh	r3, [r7, #22]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d171      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594a:	e05d      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d11c      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x264>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d017      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x264>
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	2b01      	cmp	r3, #1
 8005968:	d114      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d119      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x2a6>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d014      	beq.n	80059d6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059d2:	2301      	movs	r3, #1
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059d6:	f7fc f815 	bl	8001a04 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d803      	bhi.n	80059ee <HAL_SPI_TransmitReceive+0x2be>
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d102      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x2c4>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e038      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d19c      	bne.n	800594c <HAL_SPI_TransmitReceive+0x21c>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d197      	bne.n	800594c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a1c:	6a3a      	ldr	r2, [r7, #32]
 8005a1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f91d 	bl	8005c60 <SPI_EndRxTxTransaction>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e01d      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
  }
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3728      	adds	r7, #40	@ 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a94:	f7fb ffb6 	bl	8001a04 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005aa4:	f7fb ffae 	bl	8001a04 <HAL_GetTick>
 8005aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aaa:	4b39      	ldr	r3, [pc, #228]	@ (8005b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	015b      	lsls	r3, r3, #5
 8005ab0:	0d1b      	lsrs	r3, r3, #20
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aba:	e054      	b.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d050      	beq.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ac4:	f7fb ff9e 	bl	8001a04 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d902      	bls.n	8005ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d13d      	bne.n	8005b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af2:	d111      	bne.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afc:	d004      	beq.n	8005b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b06:	d107      	bne.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b20:	d10f      	bne.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e017      	b.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d19b      	bne.n	8005abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000010 	.word	0x20000010

08005b94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba8:	d111      	bne.n	8005bce <SPI_EndRxTransaction+0x3a>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb2:	d004      	beq.n	8005bbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bbc:	d107      	bne.n	8005bce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd6:	d12a      	bne.n	8005c2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be0:	d012      	beq.n	8005c08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2180      	movs	r1, #128	@ 0x80
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ff49 	bl	8005a84 <SPI_WaitFlagStateUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02d      	beq.n	8005c54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	f043 0220 	orr.w	r2, r3, #32
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e026      	b.n	8005c56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2101      	movs	r1, #1
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff ff36 	bl	8005a84 <SPI_WaitFlagStateUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01a      	beq.n	8005c54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e013      	b.n	8005c56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2101      	movs	r1, #1
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff ff23 	bl	8005a84 <SPI_WaitFlagStateUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e000      	b.n	8005c56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2201      	movs	r2, #1
 8005c74:	2102      	movs	r1, #2
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff ff04 	bl	8005a84 <SPI_WaitFlagStateUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e032      	b.n	8005cf8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c92:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <SPI_EndRxTxTransaction+0xa0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <SPI_EndRxTxTransaction+0xa4>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	0d5b      	lsrs	r3, r3, #21
 8005c9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb0:	d112      	bne.n	8005cd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2180      	movs	r1, #128	@ 0x80
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff fee1 	bl	8005a84 <SPI_WaitFlagStateUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d016      	beq.n	8005cf6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e00f      	b.n	8005cf8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b80      	cmp	r3, #128	@ 0x80
 8005cf0:	d0f2      	beq.n	8005cd8 <SPI_EndRxTxTransaction+0x78>
 8005cf2:	e000      	b.n	8005cf6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005cf4:	bf00      	nop
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000010 	.word	0x20000010
 8005d04:	165e9f81 	.word	0x165e9f81

08005d08 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d08:	b084      	sub	sp, #16
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	f107 001c 	add.w	r0, r7, #28
 8005d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005d1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005d20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005d22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005d26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005d2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005d2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005d32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005d42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	b004      	add	sp, #16
 8005d5c:	4770      	bx	lr

08005d5e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2203      	movs	r2, #3
 8005da6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005df0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005df6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005dfc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005e0c:	f023 030f 	bic.w	r3, r3, #15
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	b2db      	uxtb	r3, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	461a      	mov	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
}  
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e8c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e92:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0

}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005ecc:	2310      	movs	r3, #16
 8005ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed0:	2340      	movs	r3, #64	@ 0x40
 8005ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff74 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eee:	2110      	movs	r1, #16
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9d7 	bl	80062a4 <SDMMC_GetCmdResp1>
 8005ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b088      	sub	sp, #32
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005f10:	2311      	movs	r3, #17
 8005f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f14:	2340      	movs	r3, #64	@ 0x40
 8005f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff52 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f32:	2111      	movs	r1, #17
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f9b5 	bl	80062a4 <SDMMC_GetCmdResp1>
 8005f3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f54:	2312      	movs	r3, #18
 8005f56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f58:	2340      	movs	r3, #64	@ 0x40
 8005f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f66:	f107 0308 	add.w	r3, r7, #8
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ff30 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f76:	2112      	movs	r1, #18
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f993 	bl	80062a4 <SDMMC_GetCmdResp1>
 8005f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f80:	69fb      	ldr	r3, [r7, #28]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b088      	sub	sp, #32
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f98:	2318      	movs	r3, #24
 8005f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f9c:	2340      	movs	r3, #64	@ 0x40
 8005f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005faa:	f107 0308 	add.w	r3, r7, #8
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ff0e 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fba:	2118      	movs	r1, #24
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f971 	bl	80062a4 <SDMMC_GetCmdResp1>
 8005fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b088      	sub	sp, #32
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005fdc:	2319      	movs	r3, #25
 8005fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe0:	2340      	movs	r3, #64	@ 0x40
 8005fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff feec 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffe:	2119      	movs	r1, #25
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f94f 	bl	80062a4 <SDMMC_GetCmdResp1>
 8006006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006008:	69fb      	ldr	r3, [r7, #28]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006020:	230c      	movs	r3, #12
 8006022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006024:	2340      	movs	r3, #64	@ 0x40
 8006026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff feca 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800603e:	4a05      	ldr	r2, [pc, #20]	@ (8006054 <SDMMC_CmdStopTransfer+0x40>)
 8006040:	210c      	movs	r1, #12
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f92e 	bl	80062a4 <SDMMC_GetCmdResp1>
 8006048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800604a:	69fb      	ldr	r3, [r7, #28]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3720      	adds	r7, #32
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	05f5e100 	.word	0x05f5e100

08006058 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	@ 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006068:	2307      	movs	r3, #7
 800606a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800606c:	2340      	movs	r3, #64	@ 0x40
 800606e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006078:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800607a:	f107 0310 	add.w	r3, r7, #16
 800607e:	4619      	mov	r1, r3
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff fea6 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608a:	2107      	movs	r1, #7
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f909 	bl	80062a4 <SDMMC_GetCmdResp1>
 8006092:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006096:	4618      	mov	r0, r3
 8006098:	3728      	adds	r7, #40	@ 0x28
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060bc:	f107 0308 	add.w	r3, r7, #8
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fe85 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fb23 	bl	8006714 <SDMMC_GetCmdError>
 80060ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060d0:	69fb      	ldr	r3, [r7, #28]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b088      	sub	sp, #32
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80060e2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80060e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80060e8:	2308      	movs	r3, #8
 80060ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060fa:	f107 0308 	add.w	r3, r7, #8
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fe66 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fab6 	bl	8006678 <SDMMC_GetCmdResp7>
 800610c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800610e:	69fb      	ldr	r3, [r7, #28]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006126:	2337      	movs	r3, #55	@ 0x37
 8006128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800612a:	2340      	movs	r3, #64	@ 0x40
 800612c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fe47 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006148:	2137      	movs	r1, #55	@ 0x37
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f8aa 	bl	80062a4 <SDMMC_GetCmdResp1>
 8006150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006152:	69fb      	ldr	r3, [r7, #28]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800616c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006172:	2329      	movs	r3, #41	@ 0x29
 8006174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006176:	2340      	movs	r3, #64	@ 0x40
 8006178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800617e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006184:	f107 0308 	add.w	r3, r7, #8
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fe21 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9bd 	bl	8006510 <SDMMC_GetCmdResp3>
 8006196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006198:	69fb      	ldr	r3, [r7, #28]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061ae:	2302      	movs	r3, #2
 80061b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061b2:	23c0      	movs	r3, #192	@ 0xc0
 80061b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff fe03 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f957 	bl	8006480 <SDMMC_GetCmdResp2>
 80061d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061d4:	69fb      	ldr	r3, [r7, #28]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b088      	sub	sp, #32
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80061ec:	2309      	movs	r3, #9
 80061ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061f0:	23c0      	movs	r3, #192	@ 0xc0
 80061f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff fde4 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f938 	bl	8006480 <SDMMC_GetCmdResp2>
 8006210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006212:	69fb      	ldr	r3, [r7, #28]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800622a:	2303      	movs	r3, #3
 800622c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800622e:	2340      	movs	r3, #64	@ 0x40
 8006230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800623a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800623c:	f107 0308 	add.w	r3, r7, #8
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fdc5 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	2103      	movs	r1, #3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f99d 	bl	800658c <SDMMC_GetCmdResp6>
 8006252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006254:	69fb      	ldr	r3, [r7, #28]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800626c:	230d      	movs	r3, #13
 800626e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006270:	2340      	movs	r3, #64	@ 0x40
 8006272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800627c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fda4 	bl	8005dd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800628a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800628e:	210d      	movs	r1, #13
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f807 	bl	80062a4 <SDMMC_GetCmdResp1>
 8006296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006298:	69fb      	ldr	r3, [r7, #28]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	460b      	mov	r3, r1
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80062b2:	4b70      	ldr	r3, [pc, #448]	@ (8006474 <SDMMC_GetCmdResp1+0x1d0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a70      	ldr	r2, [pc, #448]	@ (8006478 <SDMMC_GetCmdResp1+0x1d4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	0a5a      	lsrs	r2, r3, #9
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
 80062c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	1e5a      	subs	r2, r3, #1
 80062ca:	61fa      	str	r2, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062d4:	e0c9      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ef      	beq.n	80062c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ea      	bne.n	80062c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2204      	movs	r2, #4
 8006300:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006302:	2304      	movs	r3, #4
 8006304:	e0b1      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d004      	beq.n	800631c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006318:	2301      	movs	r3, #1
 800631a:	e0a6      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	22c5      	movs	r2, #197	@ 0xc5
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff fd7f 	bl	8005e26 <SDIO_GetCommandResponse>
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	4293      	cmp	r3, r2
 8006330:	d001      	beq.n	8006336 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006332:	2301      	movs	r3, #1
 8006334:	e099      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006336:	2100      	movs	r1, #0
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7ff fd81 	bl	8005e40 <SDIO_GetResponse>
 800633e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4b4e      	ldr	r3, [pc, #312]	@ (800647c <SDMMC_GetCmdResp1+0x1d8>)
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800634a:	2300      	movs	r3, #0
 800634c:	e08d      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	da02      	bge.n	800635a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006354:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006358:	e087      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006364:	2340      	movs	r3, #64	@ 0x40
 8006366:	e080      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006372:	2380      	movs	r3, #128	@ 0x80
 8006374:	e079      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006384:	e071      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006390:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006394:	e069      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063a4:	e061      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063b4:	e059      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063c4:	e051      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80063d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063d4:	e049      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80063e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063e4:	e041      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80063f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063f4:	e039      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006404:	e031      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006410:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006414:	e029      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006420:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006424:	e021      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006430:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006434:	e019      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006440:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006444:	e011      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006450:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006454:	e009      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006460:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006464:	e001      	b.n	800646a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006466:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000010 	.word	0x20000010
 8006478:	10624dd3 	.word	0x10624dd3
 800647c:	fdffe008 	.word	0xfdffe008

08006480 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006488:	4b1f      	ldr	r3, [pc, #124]	@ (8006508 <SDMMC_GetCmdResp2+0x88>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <SDMMC_GetCmdResp2+0x8c>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	0a5b      	lsrs	r3, r3, #9
 8006494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006498:	fb02 f303 	mul.w	r3, r2, r3
 800649c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1e5a      	subs	r2, r3, #1
 80064a2:	60fa      	str	r2, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064ac:	e026      	b.n	80064fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0ef      	beq.n	800649e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1ea      	bne.n	800649e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2204      	movs	r2, #4
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064da:	2304      	movs	r3, #4
 80064dc:	e00e      	b.n	80064fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e003      	b.n	80064fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	22c5      	movs	r2, #197	@ 0xc5
 80064f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	20000010 	.word	0x20000010
 800650c:	10624dd3 	.word	0x10624dd3

08006510 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006518:	4b1a      	ldr	r3, [pc, #104]	@ (8006584 <SDMMC_GetCmdResp3+0x74>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1a      	ldr	r2, [pc, #104]	@ (8006588 <SDMMC_GetCmdResp3+0x78>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	0a5b      	lsrs	r3, r3, #9
 8006524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1e5a      	subs	r2, r3, #1
 8006532:	60fa      	str	r2, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006538:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800653c:	e01b      	b.n	8006576 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006542:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0ef      	beq.n	800652e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ea      	bne.n	800652e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2204      	movs	r2, #4
 8006568:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800656a:	2304      	movs	r3, #4
 800656c:	e003      	b.n	8006576 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	22c5      	movs	r2, #197	@ 0xc5
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000010 	.word	0x20000010
 8006588:	10624dd3 	.word	0x10624dd3

0800658c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	460b      	mov	r3, r1
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800659a:	4b35      	ldr	r3, [pc, #212]	@ (8006670 <SDMMC_GetCmdResp6+0xe4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a35      	ldr	r2, [pc, #212]	@ (8006674 <SDMMC_GetCmdResp6+0xe8>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	0a5b      	lsrs	r3, r3, #9
 80065a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	1e5a      	subs	r2, r3, #1
 80065b4:	61fa      	str	r2, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80065be:	e052      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ef      	beq.n	80065b0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1ea      	bne.n	80065b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2204      	movs	r2, #4
 80065ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ec:	2304      	movs	r3, #4
 80065ee:	e03a      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006602:	2301      	movs	r3, #1
 8006604:	e02f      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fc0d 	bl	8005e26 <SDIO_GetCommandResponse>
 800660c:	4603      	mov	r3, r0
 800660e:	461a      	mov	r2, r3
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	4293      	cmp	r3, r2
 8006614:	d001      	beq.n	800661a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006616:	2301      	movs	r3, #1
 8006618:	e025      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22c5      	movs	r2, #197	@ 0xc5
 800661e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006620:	2100      	movs	r1, #0
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fc0c 	bl	8005e40 <SDIO_GetResponse>
 8006628:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800663e:	2300      	movs	r3, #0
 8006640:	e011      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800664c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006650:	e009      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800665c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006660:	e001      	b.n	8006666 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006662:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000010 	.word	0x20000010
 8006674:	10624dd3 	.word	0x10624dd3

08006678 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006680:	4b22      	ldr	r3, [pc, #136]	@ (800670c <SDMMC_GetCmdResp7+0x94>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a22      	ldr	r2, [pc, #136]	@ (8006710 <SDMMC_GetCmdResp7+0x98>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006690:	fb02 f303 	mul.w	r3, r2, r3
 8006694:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	60fa      	str	r2, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80066a4:	e02c      	b.n	8006700 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0ef      	beq.n	8006696 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ea      	bne.n	8006696 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066d2:	2304      	movs	r3, #4
 80066d4:	e014      	b.n	8006700 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e009      	b.n	8006700 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2240      	movs	r2, #64	@ 0x40
 80066fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066fe:	2300      	movs	r3, #0
  
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000010 	.word	0x20000010
 8006710:	10624dd3 	.word	0x10624dd3

08006714 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800671c:	4b11      	ldr	r3, [pc, #68]	@ (8006764 <SDMMC_GetCmdError+0x50>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a11      	ldr	r2, [pc, #68]	@ (8006768 <SDMMC_GetCmdError+0x54>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	0a5b      	lsrs	r3, r3, #9
 8006728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1e5a      	subs	r2, r3, #1
 8006736:	60fa      	str	r2, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800673c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006740:	e009      	b.n	8006756 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f1      	beq.n	8006732 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	22c5      	movs	r2, #197	@ 0xc5
 8006752:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000010 	.word	0x20000010
 8006768:	10624dd3 	.word	0x10624dd3

0800676c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006770:	4904      	ldr	r1, [pc, #16]	@ (8006784 <MX_FATFS_Init+0x18>)
 8006772:	4805      	ldr	r0, [pc, #20]	@ (8006788 <MX_FATFS_Init+0x1c>)
 8006774:	f003 fb7c 	bl	8009e70 <FATFS_LinkDriver>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	4b03      	ldr	r3, [pc, #12]	@ (800678c <MX_FATFS_Init+0x20>)
 800677e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006780:	bf00      	nop
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20002330 	.word	0x20002330
 8006788:	0800a110 	.word	0x0800a110
 800678c:	2000232c 	.word	0x2000232c

08006790 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006794:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006796:	4618      	mov	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067aa:	f000 f888 	bl	80068be <BSP_SD_IsDetected>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d001      	beq.n	80067b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e005      	b.n	80067c4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80067b8:	4804      	ldr	r0, [pc, #16]	@ (80067cc <BSP_SD_Init+0x2c>)
 80067ba:	f7fd fbb9 	bl	8003f30 <HAL_SD_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80067c2:	79fb      	ldrb	r3, [r7, #7]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20002134 	.word	0x20002134

080067d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	68f9      	ldr	r1, [r7, #12]
 80067e6:	4806      	ldr	r0, [pc, #24]	@ (8006800 <BSP_SD_ReadBlocks_DMA+0x30>)
 80067e8:	f7fd fc52 	bl	8004090 <HAL_SD_ReadBlocks_DMA>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20002134 	.word	0x20002134

08006804 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	4806      	ldr	r0, [pc, #24]	@ (8006834 <BSP_SD_WriteBlocks_DMA+0x30>)
 800681c:	f7fd fd18 	bl	8004250 <HAL_SD_WriteBlocks_DMA>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20002134 	.word	0x20002134

08006838 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800683c:	4805      	ldr	r0, [pc, #20]	@ (8006854 <BSP_SD_GetCardState+0x1c>)
 800683e:	f7fe f939 	bl	8004ab4 <HAL_SD_GetCardState>
 8006842:	4603      	mov	r3, r0
 8006844:	2b04      	cmp	r3, #4
 8006846:	bf14      	ite	ne
 8006848:	2301      	movne	r3, #1
 800684a:	2300      	moveq	r3, #0
 800684c:	b2db      	uxtb	r3, r3
}
 800684e:	4618      	mov	r0, r3
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20002134 	.word	0x20002134

08006858 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4803      	ldr	r0, [pc, #12]	@ (8006870 <BSP_SD_GetCardInfo+0x18>)
 8006864:	f7fe f8fa 	bl	8004a5c <HAL_SD_GetCardInfo>
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20002134 	.word	0x20002134

08006874 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800687c:	f000 f818 	bl	80068b0 <BSP_SD_AbortCallback>
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006890:	f000 f9a8 	bl	8006be4 <BSP_SD_WriteCpltCallback>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80068a4:	f000 f9aa 	bl	8006bfc <BSP_SD_ReadCpltCallback>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0

}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80068c4:	2301      	movs	r3, #1
 80068c6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80068c8:	f000 f80c 	bl	80068e4 <BSP_PlatformIsDetected>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80068d2:	2300      	movs	r3, #0
 80068d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	b2db      	uxtb	r3, r3
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80068ea:	2301      	movs	r3, #1
 80068ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80068ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068f2:	4806      	ldr	r0, [pc, #24]	@ (800690c <BSP_PlatformIsDetected+0x28>)
 80068f4:	f7fc fc7a 	bl	80031ec <HAL_GPIO_ReadPin>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80068fe:	2300      	movs	r3, #0
 8006900:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006902:	79fb      	ldrb	r3, [r7, #7]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40020000 	.word	0x40020000

08006910 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006918:	f7fb f874 	bl	8001a04 <HAL_GetTick>
 800691c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800691e:	e006      	b.n	800692e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006920:	f7ff ff8a 	bl	8006838 <BSP_SD_GetCardState>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800692a:	2300      	movs	r3, #0
 800692c:	e009      	b.n	8006942 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800692e:	f7fb f869 	bl	8001a04 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	429a      	cmp	r2, r3
 800693c:	d8f0      	bhi.n	8006920 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800693e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <SD_CheckStatus+0x38>)
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800695c:	f7ff ff6c 	bl	8006838 <BSP_SD_GetCardState>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006966:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <SD_CheckStatus+0x38>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <SD_CheckStatus+0x38>)
 8006974:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006976:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <SD_CheckStatus+0x38>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000019 	.word	0x20000019

08006988 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006992:	f7ff ff05 	bl	80067a0 <BSP_SD_Init>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d107      	bne.n	80069ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff ffd4 	bl	800694c <SD_CheckStatus>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	4b04      	ldr	r3, [pc, #16]	@ (80069bc <SD_initialize+0x34>)
 80069aa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80069ac:	4b03      	ldr	r3, [pc, #12]	@ (80069bc <SD_initialize+0x34>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b2db      	uxtb	r3, r3
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000019 	.word	0x20000019

080069c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ffbd 	bl	800694c <SD_CheckStatus>
 80069d2:	4603      	mov	r3, r0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80069f0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80069f4:	f7ff ff8c 	bl	8006910 <SD_CheckStatusWithTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da01      	bge.n	8006a02 <SD_read+0x26>
  {
    return res;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	e03b      	b.n	8006a7a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	68b8      	ldr	r0, [r7, #8]
 8006a08:	f7ff fee2 	bl	80067d0 <BSP_SD_ReadBlocks_DMA>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d132      	bne.n	8006a78 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006a12:	4b1c      	ldr	r3, [pc, #112]	@ (8006a84 <SD_read+0xa8>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006a18:	f7fa fff4 	bl	8001a04 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006a1e:	bf00      	nop
 8006a20:	4b18      	ldr	r3, [pc, #96]	@ (8006a84 <SD_read+0xa8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d108      	bne.n	8006a3a <SD_read+0x5e>
 8006a28:	f7fa ffec 	bl	8001a04 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d9f2      	bls.n	8006a20 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <SD_read+0xa8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	75fb      	strb	r3, [r7, #23]
 8006a46:	e017      	b.n	8006a78 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006a48:	4b0e      	ldr	r3, [pc, #56]	@ (8006a84 <SD_read+0xa8>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006a4e:	f7fa ffd9 	bl	8001a04 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006a54:	e007      	b.n	8006a66 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a56:	f7ff feef 	bl	8006838 <BSP_SD_GetCardState>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <SD_read+0x8a>
          {
            res = RES_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006a64:	e008      	b.n	8006a78 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006a66:	f7fa ffcd 	bl	8001a04 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d9ee      	bls.n	8006a56 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20002338 	.word	0x20002338

08006a88 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006a9c:	4b24      	ldr	r3, [pc, #144]	@ (8006b30 <SD_write+0xa8>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006aa2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006aa6:	f7ff ff33 	bl	8006910 <SD_CheckStatusWithTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da01      	bge.n	8006ab4 <SD_write+0x2c>
  {
    return res;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	e038      	b.n	8006b26 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	68b8      	ldr	r0, [r7, #8]
 8006aba:	f7ff fea3 	bl	8006804 <BSP_SD_WriteBlocks_DMA>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d12f      	bne.n	8006b24 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006ac4:	f7fa ff9e 	bl	8001a04 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006aca:	bf00      	nop
 8006acc:	4b18      	ldr	r3, [pc, #96]	@ (8006b30 <SD_write+0xa8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d108      	bne.n	8006ae6 <SD_write+0x5e>
 8006ad4:	f7fa ff96 	bl	8001a04 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d9f2      	bls.n	8006acc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006ae6:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <SD_write+0xa8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
 8006af2:	e017      	b.n	8006b24 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006af4:	4b0e      	ldr	r3, [pc, #56]	@ (8006b30 <SD_write+0xa8>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006afa:	f7fa ff83 	bl	8001a04 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b00:	e007      	b.n	8006b12 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b02:	f7ff fe99 	bl	8006838 <BSP_SD_GetCardState>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <SD_write+0x8a>
          {
            res = RES_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
            break;
 8006b10:	e008      	b.n	8006b24 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b12:	f7fa ff77 	bl	8001a04 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d9ee      	bls.n	8006b02 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20002334 	.word	0x20002334

08006b34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08c      	sub	sp, #48	@ 0x30
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	603a      	str	r2, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
 8006b40:	460b      	mov	r3, r1
 8006b42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b4a:	4b25      	ldr	r3, [pc, #148]	@ (8006be0 <SD_ioctl+0xac>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <SD_ioctl+0x28>
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e03c      	b.n	8006bd6 <SD_ioctl+0xa2>

  switch (cmd)
 8006b5c:	79bb      	ldrb	r3, [r7, #6]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d834      	bhi.n	8006bcc <SD_ioctl+0x98>
 8006b62:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <SD_ioctl+0x34>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b81 	.word	0x08006b81
 8006b70:	08006b99 	.word	0x08006b99
 8006b74:	08006bb3 	.word	0x08006bb3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006b7e:	e028      	b.n	8006bd2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fe67 	bl	8006858 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006b96:	e01c      	b.n	8006bd2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b98:	f107 030c 	add.w	r3, r7, #12
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fe5b 	bl	8006858 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006bb0:	e00f      	b.n	8006bd2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bb2:	f107 030c 	add.w	r3, r7, #12
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fe4e 	bl	8006858 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	0a5a      	lsrs	r2, r3, #9
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006bca:	e002      	b.n	8006bd2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3730      	adds	r7, #48	@ 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000019 	.word	0x20000019

08006be4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006be8:	4b03      	ldr	r3, [pc, #12]	@ (8006bf8 <BSP_SD_WriteCpltCallback+0x14>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	20002334 	.word	0x20002334

08006bfc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006c00:	4b03      	ldr	r3, [pc, #12]	@ (8006c10 <BSP_SD_ReadCpltCallback+0x14>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20002338 	.word	0x20002338

08006c14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	4a08      	ldr	r2, [pc, #32]	@ (8006c44 <disk_status+0x30>)
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	79fa      	ldrb	r2, [r7, #7]
 8006c2c:	4905      	ldr	r1, [pc, #20]	@ (8006c44 <disk_status+0x30>)
 8006c2e:	440a      	add	r2, r1
 8006c30:	7a12      	ldrb	r2, [r2, #8]
 8006c32:	4610      	mov	r0, r2
 8006c34:	4798      	blx	r3
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20002564 	.word	0x20002564

08006c48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	4a0e      	ldr	r2, [pc, #56]	@ (8006c94 <disk_initialize+0x4c>)
 8006c5a:	5cd3      	ldrb	r3, [r2, r3]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d114      	bne.n	8006c8a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	4a0c      	ldr	r2, [pc, #48]	@ (8006c94 <disk_initialize+0x4c>)
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	79fa      	ldrb	r2, [r7, #7]
 8006c6e:	4909      	ldr	r1, [pc, #36]	@ (8006c94 <disk_initialize+0x4c>)
 8006c70:	440a      	add	r2, r1
 8006c72:	7a12      	ldrb	r2, [r2, #8]
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	4a03      	ldr	r2, [pc, #12]	@ (8006c94 <disk_initialize+0x4c>)
 8006c86:	2101      	movs	r1, #1
 8006c88:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20002564 	.word	0x20002564

08006c98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c98:	b590      	push	{r4, r7, lr}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd4 <disk_read+0x3c>)
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	689c      	ldr	r4, [r3, #8]
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	4a07      	ldr	r2, [pc, #28]	@ (8006cd4 <disk_read+0x3c>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	7a18      	ldrb	r0, [r3, #8]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	47a0      	blx	r4
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd90      	pop	{r4, r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20002564 	.word	0x20002564

08006cd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006cd8:	b590      	push	{r4, r7, lr}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	4a0a      	ldr	r2, [pc, #40]	@ (8006d14 <disk_write+0x3c>)
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68dc      	ldr	r4, [r3, #12]
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	4a07      	ldr	r2, [pc, #28]	@ (8006d14 <disk_write+0x3c>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	7a18      	ldrb	r0, [r3, #8]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	47a0      	blx	r4
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd90      	pop	{r4, r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20002564 	.word	0x20002564

08006d18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	603a      	str	r2, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
 8006d24:	460b      	mov	r3, r1
 8006d26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	4a09      	ldr	r2, [pc, #36]	@ (8006d50 <disk_ioctl+0x38>)
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	79fa      	ldrb	r2, [r7, #7]
 8006d36:	4906      	ldr	r1, [pc, #24]	@ (8006d50 <disk_ioctl+0x38>)
 8006d38:	440a      	add	r2, r1
 8006d3a:	7a10      	ldrb	r0, [r2, #8]
 8006d3c:	79b9      	ldrb	r1, [r7, #6]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20002564 	.word	0x20002564

08006d54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d64:	89fb      	ldrh	r3, [r7, #14]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	b21a      	sxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b21b      	sxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b21b      	sxth	r3, r3
 8006d74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d76:	89fb      	ldrh	r3, [r7, #14]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3303      	adds	r3, #3
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	3202      	adds	r2, #2
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	3201      	adds	r2, #1
 8006daa:	7812      	ldrb	r2, [r2, #0]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
	return rv;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	887a      	ldrh	r2, [r7, #2]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	887b      	ldrh	r3, [r7, #2]
 8006de4:	0a1b      	lsrs	r3, r3, #8
 8006de6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	1c53      	adds	r3, r2, #1
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	6179      	str	r1, [r7, #20]
 8006e7e:	7812      	ldrb	r2, [r2, #0]
 8006e80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	607b      	str	r3, [r7, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f1      	bne.n	8006e72 <mem_cpy+0x1a>
	}
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	617a      	str	r2, [r7, #20]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f3      	bne.n	8006eaa <mem_set+0x10>
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	@ 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	61fa      	str	r2, [r7, #28]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	61ba      	str	r2, [r7, #24]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	1acb      	subs	r3, r1, r3
 8006efc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <mem_cmp+0x40>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0eb      	beq.n	8006ee8 <mem_cmp+0x18>

	return r;
 8006f10:	697b      	ldr	r3, [r7, #20]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3724      	adds	r7, #36	@ 0x24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f28:	e002      	b.n	8006f30 <chk_chr+0x12>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	607b      	str	r3, [r7, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <chk_chr+0x26>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d1f2      	bne.n	8006f2a <chk_chr+0xc>
	return *str;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	781b      	ldrb	r3, [r3, #0]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e029      	b.n	8006fbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f68:	4a27      	ldr	r2, [pc, #156]	@ (8007008 <chk_lock+0xb4>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	4413      	add	r3, r2
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01d      	beq.n	8006fb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f76:	4a24      	ldr	r2, [pc, #144]	@ (8007008 <chk_lock+0xb4>)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	4413      	add	r3, r2
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d116      	bne.n	8006fb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f88:	4a1f      	ldr	r2, [pc, #124]	@ (8007008 <chk_lock+0xb4>)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d10c      	bne.n	8006fb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8007008 <chk_lock+0xb4>)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d102      	bne.n	8006fb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006fb0:	e007      	b.n	8006fc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d9d2      	bls.n	8006f68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d109      	bne.n	8006fdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d102      	bne.n	8006fd4 <chk_lock+0x80>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d101      	bne.n	8006fd8 <chk_lock+0x84>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e010      	b.n	8006ffa <chk_lock+0xa6>
 8006fd8:	2312      	movs	r3, #18
 8006fda:	e00e      	b.n	8006ffa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d108      	bne.n	8006ff4 <chk_lock+0xa0>
 8006fe2:	4a09      	ldr	r2, [pc, #36]	@ (8007008 <chk_lock+0xb4>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	4413      	add	r3, r2
 8006fea:	330c      	adds	r3, #12
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff2:	d101      	bne.n	8006ff8 <chk_lock+0xa4>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	e000      	b.n	8006ffa <chk_lock+0xa6>
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20002344 	.word	0x20002344

0800700c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007012:	2300      	movs	r3, #0
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	e002      	b.n	800701e <enq_lock+0x12>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3301      	adds	r3, #1
 800701c:	607b      	str	r3, [r7, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d806      	bhi.n	8007032 <enq_lock+0x26>
 8007024:	4a09      	ldr	r2, [pc, #36]	@ (800704c <enq_lock+0x40>)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	4413      	add	r3, r2
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f2      	bne.n	8007018 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b02      	cmp	r3, #2
 8007036:	bf14      	ite	ne
 8007038:	2301      	movne	r3, #1
 800703a:	2300      	moveq	r3, #0
 800703c:	b2db      	uxtb	r3, r3
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20002344 	.word	0x20002344

08007050 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e01f      	b.n	80070a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007060:	4a41      	ldr	r2, [pc, #260]	@ (8007168 <inc_lock+0x118>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	4413      	add	r3, r2
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d113      	bne.n	800709a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007072:	4a3d      	ldr	r2, [pc, #244]	@ (8007168 <inc_lock+0x118>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	4413      	add	r3, r2
 800707a:	3304      	adds	r3, #4
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007082:	429a      	cmp	r2, r3
 8007084:	d109      	bne.n	800709a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007086:	4a38      	ldr	r2, [pc, #224]	@ (8007168 <inc_lock+0x118>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	4413      	add	r3, r2
 800708e:	3308      	adds	r3, #8
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007096:	429a      	cmp	r2, r3
 8007098:	d006      	beq.n	80070a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d9dc      	bls.n	8007060 <inc_lock+0x10>
 80070a6:	e000      	b.n	80070aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80070a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d132      	bne.n	8007116 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e002      	b.n	80070bc <inc_lock+0x6c>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d806      	bhi.n	80070d0 <inc_lock+0x80>
 80070c2:	4a29      	ldr	r2, [pc, #164]	@ (8007168 <inc_lock+0x118>)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	4413      	add	r3, r2
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f2      	bne.n	80070b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d101      	bne.n	80070da <inc_lock+0x8a>
 80070d6:	2300      	movs	r3, #0
 80070d8:	e040      	b.n	800715c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4922      	ldr	r1, [pc, #136]	@ (8007168 <inc_lock+0x118>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	440b      	add	r3, r1
 80070e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	491e      	ldr	r1, [pc, #120]	@ (8007168 <inc_lock+0x118>)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	440b      	add	r3, r1
 80070f4:	3304      	adds	r3, #4
 80070f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695a      	ldr	r2, [r3, #20]
 80070fc:	491a      	ldr	r1, [pc, #104]	@ (8007168 <inc_lock+0x118>)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	440b      	add	r3, r1
 8007104:	3308      	adds	r3, #8
 8007106:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007108:	4a17      	ldr	r2, [pc, #92]	@ (8007168 <inc_lock+0x118>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	4413      	add	r3, r2
 8007110:	330c      	adds	r3, #12
 8007112:	2200      	movs	r2, #0
 8007114:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <inc_lock+0xe0>
 800711c:	4a12      	ldr	r2, [pc, #72]	@ (8007168 <inc_lock+0x118>)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	4413      	add	r3, r2
 8007124:	330c      	adds	r3, #12
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <inc_lock+0xe0>
 800712c:	2300      	movs	r3, #0
 800712e:	e015      	b.n	800715c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d108      	bne.n	8007148 <inc_lock+0xf8>
 8007136:	4a0c      	ldr	r2, [pc, #48]	@ (8007168 <inc_lock+0x118>)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	4413      	add	r3, r2
 800713e:	330c      	adds	r3, #12
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	e001      	b.n	800714c <inc_lock+0xfc>
 8007148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800714c:	4906      	ldr	r1, [pc, #24]	@ (8007168 <inc_lock+0x118>)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	440b      	add	r3, r1
 8007154:	330c      	adds	r3, #12
 8007156:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3301      	adds	r3, #1
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20002344 	.word	0x20002344

0800716c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3b01      	subs	r3, #1
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d825      	bhi.n	80071cc <dec_lock+0x60>
		n = Files[i].ctr;
 8007180:	4a17      	ldr	r2, [pc, #92]	@ (80071e0 <dec_lock+0x74>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	4413      	add	r3, r2
 8007188:	330c      	adds	r3, #12
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800718e:	89fb      	ldrh	r3, [r7, #14]
 8007190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007194:	d101      	bne.n	800719a <dec_lock+0x2e>
 8007196:	2300      	movs	r3, #0
 8007198:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800719a:	89fb      	ldrh	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <dec_lock+0x3a>
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80071a6:	4a0e      	ldr	r2, [pc, #56]	@ (80071e0 <dec_lock+0x74>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	4413      	add	r3, r2
 80071ae:	330c      	adds	r3, #12
 80071b0:	89fa      	ldrh	r2, [r7, #14]
 80071b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071b4:	89fb      	ldrh	r3, [r7, #14]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <dec_lock+0x5a>
 80071ba:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <dec_lock+0x74>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	4413      	add	r3, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	737b      	strb	r3, [r7, #13]
 80071ca:	e001      	b.n	80071d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80071cc:	2302      	movs	r3, #2
 80071ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80071d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20002344 	.word	0x20002344

080071e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e010      	b.n	8007214 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007228 <clear_lock+0x44>)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	4413      	add	r3, r2
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d105      	bne.n	800720e <clear_lock+0x2a>
 8007202:	4a09      	ldr	r2, [pc, #36]	@ (8007228 <clear_lock+0x44>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3301      	adds	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d9eb      	bls.n	80071f2 <clear_lock+0xe>
	}
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20002344 	.word	0x20002344

0800722c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	78db      	ldrb	r3, [r3, #3]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d034      	beq.n	80072aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007244:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7858      	ldrb	r0, [r3, #1]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007250:	2301      	movs	r3, #1
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	f7ff fd40 	bl	8006cd8 <disk_write>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <sync_window+0x38>
			res = FR_DISK_ERR;
 800725e:	2301      	movs	r3, #1
 8007260:	73fb      	strb	r3, [r7, #15]
 8007262:	e022      	b.n	80072aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	429a      	cmp	r2, r3
 8007278:	d217      	bcs.n	80072aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	789b      	ldrb	r3, [r3, #2]
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	e010      	b.n	80072a4 <sync_window+0x78>
					wsect += fs->fsize;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4413      	add	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	7858      	ldrb	r0, [r3, #1]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007296:	2301      	movs	r3, #1
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	f7ff fd1d 	bl	8006cd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d8eb      	bhi.n	8007282 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d01b      	beq.n	8007304 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ffad 	bl	800722c <sync_window>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d113      	bne.n	8007304 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7858      	ldrb	r0, [r3, #1]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80072e6:	2301      	movs	r3, #1
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	f7ff fcd5 	bl	8006c98 <disk_read>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ff87 	bl	800722c <sync_window>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d159      	bne.n	80073dc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b03      	cmp	r3, #3
 800732e:	d149      	bne.n	80073c4 <sync_fs+0xb4>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	791b      	ldrb	r3, [r3, #4]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d145      	bne.n	80073c4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	899b      	ldrh	r3, [r3, #12]
 8007342:	461a      	mov	r2, r3
 8007344:	2100      	movs	r1, #0
 8007346:	f7ff fda8 	bl	8006e9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3338      	adds	r3, #56	@ 0x38
 800734e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007352:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fd37 	bl	8006dca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3338      	adds	r3, #56	@ 0x38
 8007360:	4921      	ldr	r1, [pc, #132]	@ (80073e8 <sync_fs+0xd8>)
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fd4c 	bl	8006e00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3338      	adds	r3, #56	@ 0x38
 800736c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007370:	491e      	ldr	r1, [pc, #120]	@ (80073ec <sync_fs+0xdc>)
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fd44 	bl	8006e00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3338      	adds	r3, #56	@ 0x38
 800737c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7ff fd3a 	bl	8006e00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3338      	adds	r3, #56	@ 0x38
 8007390:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7ff fd30 	bl	8006e00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7858      	ldrb	r0, [r3, #1]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b8:	2301      	movs	r3, #1
 80073ba:	f7ff fc8d 	bl	8006cd8 <disk_write>
			fs->fsi_flag = 0;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fca3 	bl	8006d18 <disk_ioctl>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <sync_fs+0xcc>
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	41615252 	.word	0x41615252
 80073ec:	61417272 	.word	0x61417272

080073f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	3b02      	subs	r3, #2
 80073fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	3b02      	subs	r3, #2
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d301      	bcc.n	8007410 <clust2sect+0x20>
 800740c:	2300      	movs	r3, #0
 800740e:	e008      	b.n	8007422 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	895b      	ldrh	r3, [r3, #10]
 8007414:	461a      	mov	r2, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	fb03 f202 	mul.w	r2, r3, r2
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007420:	4413      	add	r3, r2
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d904      	bls.n	800744e <get_fat+0x20>
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <get_fat+0x26>
		val = 1;	/* Internal error */
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e0ba      	b.n	80075ca <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b03      	cmp	r3, #3
 8007460:	f000 8082 	beq.w	8007568 <get_fat+0x13a>
 8007464:	2b03      	cmp	r3, #3
 8007466:	f300 80a6 	bgt.w	80075b6 <get_fat+0x188>
 800746a:	2b01      	cmp	r3, #1
 800746c:	d002      	beq.n	8007474 <get_fat+0x46>
 800746e:	2b02      	cmp	r3, #2
 8007470:	d055      	beq.n	800751e <get_fat+0xf0>
 8007472:	e0a0      	b.n	80075b6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	899b      	ldrh	r3, [r3, #12]
 800748a:	4619      	mov	r1, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007492:	4413      	add	r3, r2
 8007494:	4619      	mov	r1, r3
 8007496:	6938      	ldr	r0, [r7, #16]
 8007498:	f7ff ff0c 	bl	80072b4 <move_window>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 808c 	bne.w	80075bc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	60fa      	str	r2, [r7, #12]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	8992      	ldrh	r2, [r2, #12]
 80074ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80074b2:	fb01 f202 	mul.w	r2, r1, r2
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4413      	add	r3, r2
 80074bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	899b      	ldrh	r3, [r3, #12]
 80074ca:	4619      	mov	r1, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80074d2:	4413      	add	r3, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	6938      	ldr	r0, [r7, #16]
 80074d8:	f7ff feec 	bl	80072b4 <move_window>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d16e      	bne.n	80075c0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	899b      	ldrh	r3, [r3, #12]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ee:	fb01 f202 	mul.w	r2, r1, r2
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4313      	orrs	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <get_fat+0xe6>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	e002      	b.n	800751a <get_fat+0xec>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800751a:	617b      	str	r3, [r7, #20]
			break;
 800751c:	e055      	b.n	80075ca <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	899b      	ldrh	r3, [r3, #12]
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	b29b      	uxth	r3, r3
 800752a:	4619      	mov	r1, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007532:	4413      	add	r3, r2
 8007534:	4619      	mov	r1, r3
 8007536:	6938      	ldr	r0, [r7, #16]
 8007538:	f7ff febc 	bl	80072b4 <move_window>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d140      	bne.n	80075c4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	8992      	ldrh	r2, [r2, #12]
 8007550:	fbb3 f0f2 	udiv	r0, r3, r2
 8007554:	fb00 f202 	mul.w	r2, r0, r2
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	440b      	add	r3, r1
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff fbf9 	bl	8006d54 <ld_word>
 8007562:	4603      	mov	r3, r0
 8007564:	617b      	str	r3, [r7, #20]
			break;
 8007566:	e030      	b.n	80075ca <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	899b      	ldrh	r3, [r3, #12]
 8007570:	089b      	lsrs	r3, r3, #2
 8007572:	b29b      	uxth	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	fbb3 f3f1 	udiv	r3, r3, r1
 800757c:	4413      	add	r3, r2
 800757e:	4619      	mov	r1, r3
 8007580:	6938      	ldr	r0, [r7, #16]
 8007582:	f7ff fe97 	bl	80072b4 <move_window>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11d      	bne.n	80075c8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	8992      	ldrh	r2, [r2, #12]
 800759a:	fbb3 f0f2 	udiv	r0, r3, r2
 800759e:	fb00 f202 	mul.w	r2, r0, r2
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	440b      	add	r3, r1
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff fbec 	bl	8006d84 <ld_dword>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80075b2:	617b      	str	r3, [r7, #20]
			break;
 80075b4:	e009      	b.n	80075ca <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075b6:	2301      	movs	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e006      	b.n	80075ca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075bc:	bf00      	nop
 80075be:	e004      	b.n	80075ca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075c0:	bf00      	nop
 80075c2:	e002      	b.n	80075ca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075c8:	bf00      	nop
		}
	}

	return val;
 80075ca:	697b      	ldr	r3, [r7, #20]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b089      	sub	sp, #36	@ 0x24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80075e0:	2302      	movs	r3, #2
 80075e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	f240 8109 	bls.w	80077fe <put_fat+0x22a>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	f080 8103 	bcs.w	80077fe <put_fat+0x22a>
		switch (fs->fs_type) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	f000 80b6 	beq.w	800776e <put_fat+0x19a>
 8007602:	2b03      	cmp	r3, #3
 8007604:	f300 80fb 	bgt.w	80077fe <put_fat+0x22a>
 8007608:	2b01      	cmp	r3, #1
 800760a:	d003      	beq.n	8007614 <put_fat+0x40>
 800760c:	2b02      	cmp	r3, #2
 800760e:	f000 8083 	beq.w	8007718 <put_fat+0x144>
 8007612:	e0f4      	b.n	80077fe <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4413      	add	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	899b      	ldrh	r3, [r3, #12]
 800762a:	4619      	mov	r1, r3
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007632:	4413      	add	r3, r2
 8007634:	4619      	mov	r1, r3
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fe3c 	bl	80072b4 <move_window>
 800763c:	4603      	mov	r3, r0
 800763e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007640:	7ffb      	ldrb	r3, [r7, #31]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 80d4 	bne.w	80077f0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	61ba      	str	r2, [r7, #24]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	8992      	ldrh	r2, [r2, #12]
 8007658:	fbb3 f0f2 	udiv	r0, r3, r2
 800765c:	fb00 f202 	mul.w	r2, r0, r2
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	440b      	add	r3, r1
 8007664:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00d      	beq.n	800768c <put_fat+0xb8>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b25b      	sxtb	r3, r3
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	b25a      	sxtb	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	b25b      	sxtb	r3, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	b25b      	sxtb	r3, r3
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e001      	b.n	8007690 <put_fat+0xbc>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	899b      	ldrh	r3, [r3, #12]
 80076a2:	4619      	mov	r1, r3
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076aa:	4413      	add	r3, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fe00 	bl	80072b4 <move_window>
 80076b4:	4603      	mov	r3, r0
 80076b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076b8:	7ffb      	ldrb	r3, [r7, #31]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f040 809a 	bne.w	80077f4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	899b      	ldrh	r3, [r3, #12]
 80076ca:	461a      	mov	r2, r3
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80076d2:	fb00 f202 	mul.w	r2, r0, r2
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	440b      	add	r3, r1
 80076da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <put_fat+0x11a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	e00e      	b.n	800770c <put_fat+0x138>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	f023 030f 	bic.w	r3, r3, #15
 80076f8:	b25a      	sxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	b25b      	sxtb	r3, r3
 8007706:	4313      	orrs	r3, r2
 8007708:	b25b      	sxtb	r3, r3
 800770a:	b2db      	uxtb	r3, r3
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	70da      	strb	r2, [r3, #3]
			break;
 8007716:	e072      	b.n	80077fe <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	899b      	ldrh	r3, [r3, #12]
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	b29b      	uxth	r3, r3
 8007724:	4619      	mov	r1, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	fbb3 f3f1 	udiv	r3, r3, r1
 800772c:	4413      	add	r3, r2
 800772e:	4619      	mov	r1, r3
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fdbf 	bl	80072b4 <move_window>
 8007736:	4603      	mov	r3, r0
 8007738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d15b      	bne.n	80077f8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	8992      	ldrh	r2, [r2, #12]
 800774e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007752:	fb00 f202 	mul.w	r2, r0, r2
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	440b      	add	r3, r1
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	b292      	uxth	r2, r2
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fb32 	bl	8006dca <st_word>
			fs->wflag = 1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	70da      	strb	r2, [r3, #3]
			break;
 800776c:	e047      	b.n	80077fe <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	899b      	ldrh	r3, [r3, #12]
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	b29b      	uxth	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007782:	4413      	add	r3, r2
 8007784:	4619      	mov	r1, r3
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff fd94 	bl	80072b4 <move_window>
 800778c:	4603      	mov	r3, r0
 800778e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007790:	7ffb      	ldrb	r3, [r7, #31]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d132      	bne.n	80077fc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	8992      	ldrh	r2, [r2, #12]
 80077aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80077ae:	fb00 f202 	mul.w	r2, r0, r2
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	440b      	add	r3, r1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff fae4 	bl	8006d84 <ld_dword>
 80077bc:	4603      	mov	r3, r0
 80077be:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80077c2:	4323      	orrs	r3, r4
 80077c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	8992      	ldrh	r2, [r2, #12]
 80077d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80077d8:	fb00 f202 	mul.w	r2, r0, r2
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	440b      	add	r3, r1
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fb0c 	bl	8006e00 <st_dword>
			fs->wflag = 1;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	70da      	strb	r2, [r3, #3]
			break;
 80077ee:	e006      	b.n	80077fe <put_fat+0x22a>
			if (res != FR_OK) break;
 80077f0:	bf00      	nop
 80077f2:	e004      	b.n	80077fe <put_fat+0x22a>
			if (res != FR_OK) break;
 80077f4:	bf00      	nop
 80077f6:	e002      	b.n	80077fe <put_fat+0x22a>
			if (res != FR_OK) break;
 80077f8:	bf00      	nop
 80077fa:	e000      	b.n	80077fe <put_fat+0x22a>
			if (res != FR_OK) break;
 80077fc:	bf00      	nop
		}
	}
	return res;
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3724      	adds	r7, #36	@ 0x24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd90      	pop	{r4, r7, pc}

08007808 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d904      	bls.n	800782e <remove_chain+0x26>
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d301      	bcc.n	8007832 <remove_chain+0x2a>
 800782e:	2302      	movs	r3, #2
 8007830:	e04b      	b.n	80078ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007838:	f04f 32ff 	mov.w	r2, #4294967295
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	69b8      	ldr	r0, [r7, #24]
 8007840:	f7ff fec8 	bl	80075d4 <put_fat>
 8007844:	4603      	mov	r3, r0
 8007846:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007848:	7ffb      	ldrb	r3, [r7, #31]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <remove_chain+0x4a>
 800784e:	7ffb      	ldrb	r3, [r7, #31]
 8007850:	e03b      	b.n	80078ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff fdea 	bl	800742e <get_fat>
 800785a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d031      	beq.n	80078c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <remove_chain+0x64>
 8007868:	2302      	movs	r3, #2
 800786a:	e02e      	b.n	80078ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d101      	bne.n	8007878 <remove_chain+0x70>
 8007874:	2301      	movs	r3, #1
 8007876:	e028      	b.n	80078ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007878:	2200      	movs	r2, #0
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	69b8      	ldr	r0, [r7, #24]
 800787e:	f7ff fea9 	bl	80075d4 <put_fat>
 8007882:	4603      	mov	r3, r0
 8007884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007886:	7ffb      	ldrb	r3, [r7, #31]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <remove_chain+0x88>
 800788c:	7ffb      	ldrb	r3, [r7, #31]
 800788e:	e01c      	b.n	80078ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	3b02      	subs	r3, #2
 800789a:	429a      	cmp	r2, r3
 800789c:	d20b      	bcs.n	80078b6 <remove_chain+0xae>
			fs->free_clst++;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	791b      	ldrb	r3, [r3, #4]
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3c6      	bcc.n	8007852 <remove_chain+0x4a>
 80078c4:	e000      	b.n	80078c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80078c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b088      	sub	sp, #32
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10d      	bne.n	8007904 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <create_chain+0x2c>
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d31b      	bcc.n	8007936 <create_chain+0x64>
 80078fe:	2301      	movs	r3, #1
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	e018      	b.n	8007936 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fd91 	bl	800742e <get_fat>
 800790c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d801      	bhi.n	8007918 <create_chain+0x46>
 8007914:	2301      	movs	r3, #1
 8007916:	e070      	b.n	80079fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d101      	bne.n	8007924 <create_chain+0x52>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	e06a      	b.n	80079fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	429a      	cmp	r2, r3
 800792c:	d201      	bcs.n	8007932 <create_chain+0x60>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	e063      	b.n	80079fa <create_chain+0x128>
		scl = clst;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	3301      	adds	r3, #1
 800793e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	429a      	cmp	r2, r3
 8007948:	d307      	bcc.n	800795a <create_chain+0x88>
				ncl = 2;
 800794a:	2302      	movs	r3, #2
 800794c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	429a      	cmp	r2, r3
 8007954:	d901      	bls.n	800795a <create_chain+0x88>
 8007956:	2300      	movs	r3, #0
 8007958:	e04f      	b.n	80079fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800795a:	69f9      	ldr	r1, [r7, #28]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff fd66 	bl	800742e <get_fat>
 8007962:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00e      	beq.n	8007988 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d003      	beq.n	8007978 <create_chain+0xa6>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d101      	bne.n	800797c <create_chain+0xaa>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e03e      	b.n	80079fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	429a      	cmp	r2, r3
 8007982:	d1da      	bne.n	800793a <create_chain+0x68>
 8007984:	2300      	movs	r3, #0
 8007986:	e038      	b.n	80079fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007988:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800798a:	f04f 32ff 	mov.w	r2, #4294967295
 800798e:	69f9      	ldr	r1, [r7, #28]
 8007990:	6938      	ldr	r0, [r7, #16]
 8007992:	f7ff fe1f 	bl	80075d4 <put_fat>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d109      	bne.n	80079b4 <create_chain+0xe2>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d006      	beq.n	80079b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6938      	ldr	r0, [r7, #16]
 80079ac:	f7ff fe12 	bl	80075d4 <put_fat>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d116      	bne.n	80079e8 <create_chain+0x116>
		fs->last_clst = ncl;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	3b02      	subs	r3, #2
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d804      	bhi.n	80079d8 <create_chain+0x106>
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	1e5a      	subs	r2, r3, #1
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	791b      	ldrb	r3, [r3, #4]
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	711a      	strb	r2, [r3, #4]
 80079e6:	e007      	b.n	80079f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d102      	bne.n	80079f4 <create_chain+0x122>
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295
 80079f2:	e000      	b.n	80079f6 <create_chain+0x124>
 80079f4:	2301      	movs	r3, #1
 80079f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079f8:	69fb      	ldr	r3, [r7, #28]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	3304      	adds	r3, #4
 8007a18:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	899b      	ldrh	r3, [r3, #12]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	8952      	ldrh	r2, [r2, #10]
 8007a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1d1a      	adds	r2, r3, #4
 8007a34:	613a      	str	r2, [r7, #16]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <clmt_clust+0x42>
 8007a40:	2300      	movs	r3, #0
 8007a42:	e010      	b.n	8007a66 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d307      	bcc.n	8007a5c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	3304      	adds	r3, #4
 8007a58:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a5a:	e7e9      	b.n	8007a30 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007a5c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	4413      	add	r3, r2
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a88:	d204      	bcs.n	8007a94 <dir_sdi+0x22>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a94:	2302      	movs	r3, #2
 8007a96:	e071      	b.n	8007b7c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <dir_sdi+0x46>
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d902      	bls.n	8007ab8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10c      	bne.n	8007ad8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	095b      	lsrs	r3, r3, #5
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	8912      	ldrh	r2, [r2, #8]
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d301      	bcc.n	8007ace <dir_sdi+0x5c>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e056      	b.n	8007b7c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	61da      	str	r2, [r3, #28]
 8007ad6:	e02d      	b.n	8007b34 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	895b      	ldrh	r3, [r3, #10]
 8007adc:	461a      	mov	r2, r3
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	899b      	ldrh	r3, [r3, #12]
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ae8:	e019      	b.n	8007b1e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6979      	ldr	r1, [r7, #20]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fc9d 	bl	800742e <get_fat>
 8007af4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d101      	bne.n	8007b02 <dir_sdi+0x90>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e03c      	b.n	8007b7c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d904      	bls.n	8007b12 <dir_sdi+0xa0>
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d301      	bcc.n	8007b16 <dir_sdi+0xa4>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e032      	b.n	8007b7c <dir_sdi+0x10a>
			ofs -= csz;
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d2e1      	bcs.n	8007aea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007b26:	6979      	ldr	r1, [r7, #20]
 8007b28:	6938      	ldr	r0, [r7, #16]
 8007b2a:	f7ff fc61 	bl	80073f0 <clust2sect>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <dir_sdi+0xd4>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e01a      	b.n	8007b7c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69da      	ldr	r2, [r3, #28]
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	899b      	ldrh	r3, [r3, #12]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b56:	441a      	add	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	899b      	ldrh	r3, [r3, #12]
 8007b66:	461a      	mov	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b6e:	fb00 f202 	mul.w	r2, r0, r2
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	18ca      	adds	r2, r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	3320      	adds	r3, #32
 8007b9a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <dir_next+0x28>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007baa:	d301      	bcc.n	8007bb0 <dir_next+0x2c>
 8007bac:	2304      	movs	r3, #4
 8007bae:	e0bb      	b.n	8007d28 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	899b      	ldrh	r3, [r3, #12]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bbc:	fb01 f202 	mul.w	r2, r1, r2
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 809d 	bne.w	8007d02 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	8912      	ldrh	r2, [r2, #8]
 8007be2:	4293      	cmp	r3, r2
 8007be4:	f0c0 808d 	bcc.w	8007d02 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	61da      	str	r2, [r3, #28]
 8007bee:	2304      	movs	r3, #4
 8007bf0:	e09a      	b.n	8007d28 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	899b      	ldrh	r3, [r3, #12]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	8952      	ldrh	r2, [r2, #10]
 8007c02:	3a01      	subs	r2, #1
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d17b      	bne.n	8007d02 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7ff fc0b 	bl	800742e <get_fat>
 8007c18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d801      	bhi.n	8007c24 <dir_next+0xa0>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e081      	b.n	8007d28 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d101      	bne.n	8007c30 <dir_next+0xac>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e07b      	b.n	8007d28 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d359      	bcc.n	8007cee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	61da      	str	r2, [r3, #28]
 8007c46:	2304      	movs	r3, #4
 8007c48:	e06e      	b.n	8007d28 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7ff fe3d 	bl	80078d2 <create_chain>
 8007c58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <dir_next+0xe0>
 8007c60:	2307      	movs	r3, #7
 8007c62:	e061      	b.n	8007d28 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <dir_next+0xea>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e05c      	b.n	8007d28 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d101      	bne.n	8007c7a <dir_next+0xf6>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e056      	b.n	8007d28 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff fad6 	bl	800722c <sync_window>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <dir_next+0x106>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e04e      	b.n	8007d28 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	899b      	ldrh	r3, [r3, #12]
 8007c94:	461a      	mov	r2, r3
 8007c96:	2100      	movs	r1, #0
 8007c98:	f7ff f8ff 	bl	8006e9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	613b      	str	r3, [r7, #16]
 8007ca0:	6979      	ldr	r1, [r7, #20]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff fba4 	bl	80073f0 <clust2sect>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	635a      	str	r2, [r3, #52]	@ 0x34
 8007cae:	e012      	b.n	8007cd6 <dir_next+0x152>
						fs->wflag = 1;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fab8 	bl	800722c <sync_window>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <dir_next+0x142>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e030      	b.n	8007d28 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	895b      	ldrh	r3, [r3, #10]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d3e6      	bcc.n	8007cb0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1ad2      	subs	r2, r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007cf4:	6979      	ldr	r1, [r7, #20]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fb7a 	bl	80073f0 <clust2sect>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	899b      	ldrh	r3, [r3, #12]
 8007d12:	461a      	mov	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d1a:	fb00 f202 	mul.w	r2, r0, r2
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	18ca      	adds	r2, r1, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007d40:	2100      	movs	r1, #0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fe95 	bl	8007a72 <dir_sdi>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d12b      	bne.n	8007daa <dir_alloc+0x7a>
		n = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff faa9 	bl	80072b4 <move_window>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d11d      	bne.n	8007da8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2be5      	cmp	r3, #229	@ 0xe5
 8007d74:	d004      	beq.n	8007d80 <dir_alloc+0x50>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d107      	bne.n	8007d90 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	3301      	adds	r3, #1
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d102      	bne.n	8007d94 <dir_alloc+0x64>
 8007d8e:	e00c      	b.n	8007daa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d94:	2101      	movs	r1, #1
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fef4 	bl	8007b84 <dir_next>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0d7      	beq.n	8007d56 <dir_alloc+0x26>
 8007da6:	e000      	b.n	8007daa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007da8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d101      	bne.n	8007db4 <dir_alloc+0x84>
 8007db0:	2307      	movs	r3, #7
 8007db2:	75fb      	strb	r3, [r7, #23]
	return res;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	331a      	adds	r3, #26
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe ffc1 	bl	8006d54 <ld_word>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d109      	bne.n	8007df2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	3314      	adds	r3, #20
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe ffb6 	bl	8006d54 <ld_word>
 8007de8:	4603      	mov	r3, r0
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007df2:	68fb      	ldr	r3, [r7, #12]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	331a      	adds	r3, #26
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe ffd9 	bl	8006dca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d109      	bne.n	8007e34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f103 0214 	add.w	r2, r3, #20
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0c1b      	lsrs	r3, r3, #16
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7fe ffcb 	bl	8006dca <st_word>
	}
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007e3c:	b590      	push	{r4, r7, lr}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	331a      	adds	r3, #26
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe ff82 	bl	8006d54 <ld_word>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <cmp_lfn+0x1e>
 8007e56:	2300      	movs	r3, #0
 8007e58:	e059      	b.n	8007f0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	4613      	mov	r3, r2
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e70:	2301      	movs	r3, #1
 8007e72:	81fb      	strh	r3, [r7, #14]
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	e033      	b.n	8007ee2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007e7a:	4a27      	ldr	r2, [pc, #156]	@ (8007f18 <cmp_lfn+0xdc>)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4413      	add	r3, r2
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	4413      	add	r3, r2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe ff63 	bl	8006d54 <ld_word>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01a      	beq.n	8007ece <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8007e9c:	d812      	bhi.n	8007ec4 <cmp_lfn+0x88>
 8007e9e:	89bb      	ldrh	r3, [r7, #12]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f002 f831 	bl	8009f08 <ff_wtoupper>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	617a      	str	r2, [r7, #20]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 f825 	bl	8009f08 <ff_wtoupper>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	d001      	beq.n	8007ec8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e022      	b.n	8007f0e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007ec8:	89bb      	ldrh	r3, [r7, #12]
 8007eca:	81fb      	strh	r3, [r7, #14]
 8007ecc:	e006      	b.n	8007edc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007ece:	89bb      	ldrh	r3, [r7, #12]
 8007ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d001      	beq.n	8007edc <cmp_lfn+0xa0>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e018      	b.n	8007f0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b0c      	cmp	r3, #12
 8007ee6:	d9c8      	bls.n	8007e7a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <cmp_lfn+0xd0>
 8007ef4:	89fb      	ldrh	r3, [r7, #14]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <cmp_lfn+0xd0>
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <cmp_lfn+0xd0>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007f0c:	2301      	movs	r3, #1
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd90      	pop	{r4, r7, pc}
 8007f16:	bf00      	nop
 8007f18:	0800a1a4 	.word	0x0800a1a4

08007f1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4611      	mov	r1, r2
 8007f28:	461a      	mov	r2, r3
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	71fb      	strb	r3, [r7, #7]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	330d      	adds	r3, #13
 8007f36:	79ba      	ldrb	r2, [r7, #6]
 8007f38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	330b      	adds	r3, #11
 8007f3e:	220f      	movs	r2, #15
 8007f40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	330c      	adds	r3, #12
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	331a      	adds	r3, #26
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe ff3a 	bl	8006dca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	1e5a      	subs	r2, r3, #1
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	82fb      	strh	r3, [r7, #22]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007f6e:	8afb      	ldrh	r3, [r7, #22]
 8007f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d007      	beq.n	8007f88 <put_lfn+0x6c>
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	61fa      	str	r2, [r7, #28]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007f88:	4a17      	ldr	r2, [pc, #92]	@ (8007fe8 <put_lfn+0xcc>)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	4413      	add	r3, r2
 8007f96:	8afa      	ldrh	r2, [r7, #22]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe ff15 	bl	8006dca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007fa0:	8afb      	ldrh	r3, [r7, #22]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <put_lfn+0x90>
 8007fa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007faa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b0c      	cmp	r3, #12
 8007fb6:	d9da      	bls.n	8007f6e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007fb8:	8afb      	ldrh	r3, [r7, #22]
 8007fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d006      	beq.n	8007fd0 <put_lfn+0xb4>
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d103      	bne.n	8007fd8 <put_lfn+0xbc>
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	79fa      	ldrb	r2, [r7, #7]
 8007fdc:	701a      	strb	r2, [r3, #0]
}
 8007fde:	bf00      	nop
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	0800a1a4 	.word	0x0800a1a4

08007fec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08c      	sub	sp, #48	@ 0x30
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007ffa:	220b      	movs	r2, #11
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7fe ff2a 	bl	8006e58 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b05      	cmp	r3, #5
 8008008:	d92b      	bls.n	8008062 <gen_numname+0x76>
		sr = seq;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800800e:	e022      	b.n	8008056 <gen_numname+0x6a>
			wc = *lfn++;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	1c9a      	adds	r2, r3, #2
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800801a:	2300      	movs	r3, #0
 800801c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800801e:	e017      	b.n	8008050 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	005a      	lsls	r2, r3, #1
 8008024:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	4413      	add	r3, r2
 800802c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800802e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <gen_numname+0x5e>
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008044:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008048:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	3301      	adds	r3, #1
 800804e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	2b0f      	cmp	r3, #15
 8008054:	d9e4      	bls.n	8008020 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1d8      	bne.n	8008010 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008062:	2307      	movs	r3, #7
 8008064:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	b2db      	uxtb	r3, r3
 8008070:	3330      	adds	r3, #48	@ 0x30
 8008072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800807a:	2b39      	cmp	r3, #57	@ 0x39
 800807c:	d904      	bls.n	8008088 <gen_numname+0x9c>
 800807e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008082:	3307      	adds	r3, #7
 8008084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800808e:	3330      	adds	r3, #48	@ 0x30
 8008090:	443b      	add	r3, r7
 8008092:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008096:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	091b      	lsrs	r3, r3, #4
 800809e:	603b      	str	r3, [r7, #0]
	} while (seq);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1df      	bne.n	8008066 <gen_numname+0x7a>
	ns[i] = '~';
 80080a6:	f107 0214 	add.w	r2, r7, #20
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	4413      	add	r3, r2
 80080ae:	227e      	movs	r2, #126	@ 0x7e
 80080b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80080b2:	2300      	movs	r3, #0
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b6:	e002      	b.n	80080be <gen_numname+0xd2>
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d205      	bcs.n	80080d2 <gen_numname+0xe6>
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	4413      	add	r3, r2
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d1f2      	bne.n	80080b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	2b07      	cmp	r3, #7
 80080d6:	d807      	bhi.n	80080e8 <gen_numname+0xfc>
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080de:	3330      	adds	r3, #48	@ 0x30
 80080e0:	443b      	add	r3, r7
 80080e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80080e6:	e000      	b.n	80080ea <gen_numname+0xfe>
 80080e8:	2120      	movs	r1, #32
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	460a      	mov	r2, r1
 80080f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	2b07      	cmp	r3, #7
 80080fc:	d9e9      	bls.n	80080d2 <gen_numname+0xe6>
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	3730      	adds	r7, #48	@ 0x30
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008114:	230b      	movs	r3, #11
 8008116:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	b2da      	uxtb	r2, r3
 800811c:	0852      	lsrs	r2, r2, #1
 800811e:	01db      	lsls	r3, r3, #7
 8008120:	4313      	orrs	r3, r2
 8008122:	b2da      	uxtb	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	1c59      	adds	r1, r3, #1
 8008128:	6079      	str	r1, [r7, #4]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4413      	add	r3, r2
 800812e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3b01      	subs	r3, #1
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1ed      	bne.n	8008118 <sum_sfn+0x10>
	return sum;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b086      	sub	sp, #24
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fc89 	bl	8007a72 <dir_sdi>
 8008160:	4603      	mov	r3, r0
 8008162:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <dir_find+0x24>
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	e0a9      	b.n	80082c2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800816e:	23ff      	movs	r3, #255	@ 0xff
 8008170:	753b      	strb	r3, [r7, #20]
 8008172:	7d3b      	ldrb	r3, [r7, #20]
 8008174:	757b      	strb	r3, [r7, #21]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4619      	mov	r1, r3
 8008184:	6938      	ldr	r0, [r7, #16]
 8008186:	f7ff f895 	bl	80072b4 <move_window>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f040 8090 	bne.w	80082b6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800819e:	7dbb      	ldrb	r3, [r7, #22]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <dir_find+0x60>
 80081a4:	2304      	movs	r3, #4
 80081a6:	75fb      	strb	r3, [r7, #23]
 80081a8:	e08a      	b.n	80082c0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	330b      	adds	r3, #11
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b6:	73fb      	strb	r3, [r7, #15]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7bfa      	ldrb	r2, [r7, #15]
 80081bc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80081be:	7dbb      	ldrb	r3, [r7, #22]
 80081c0:	2be5      	cmp	r3, #229	@ 0xe5
 80081c2:	d007      	beq.n	80081d4 <dir_find+0x8a>
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <dir_find+0x98>
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	2b0f      	cmp	r3, #15
 80081d2:	d006      	beq.n	80081e2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081d4:	23ff      	movs	r3, #255	@ 0xff
 80081d6:	757b      	strb	r3, [r7, #21]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f04f 32ff 	mov.w	r2, #4294967295
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30
 80081e0:	e05e      	b.n	80082a0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b0f      	cmp	r3, #15
 80081e6:	d136      	bne.n	8008256 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80081ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d154      	bne.n	80082a0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80081f6:	7dbb      	ldrb	r3, [r7, #22]
 80081f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	7b5b      	ldrb	r3, [r3, #13]
 8008206:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008208:	7dbb      	ldrb	r3, [r7, #22]
 800820a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800820e:	75bb      	strb	r3, [r7, #22]
 8008210:	7dbb      	ldrb	r3, [r7, #22]
 8008212:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695a      	ldr	r2, [r3, #20]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800821c:	7dba      	ldrb	r2, [r7, #22]
 800821e:	7d7b      	ldrb	r3, [r7, #21]
 8008220:	429a      	cmp	r2, r3
 8008222:	d115      	bne.n	8008250 <dir_find+0x106>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	330d      	adds	r3, #13
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	7d3a      	ldrb	r2, [r7, #20]
 800822e:	429a      	cmp	r2, r3
 8008230:	d10e      	bne.n	8008250 <dir_find+0x106>
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7ff fdfd 	bl	8007e3c <cmp_lfn>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <dir_find+0x106>
 8008248:	7d7b      	ldrb	r3, [r7, #21]
 800824a:	3b01      	subs	r3, #1
 800824c:	b2db      	uxtb	r3, r3
 800824e:	e000      	b.n	8008252 <dir_find+0x108>
 8008250:	23ff      	movs	r3, #255	@ 0xff
 8008252:	757b      	strb	r3, [r7, #21]
 8008254:	e024      	b.n	80082a0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008256:	7d7b      	ldrb	r3, [r7, #21]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <dir_find+0x126>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff ff51 	bl	8008108 <sum_sfn>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	7d3b      	ldrb	r3, [r7, #20]
 800826c:	4293      	cmp	r3, r2
 800826e:	d024      	beq.n	80082ba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <dir_find+0x14a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a18      	ldr	r0, [r3, #32]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3324      	adds	r3, #36	@ 0x24
 8008286:	220b      	movs	r2, #11
 8008288:	4619      	mov	r1, r3
 800828a:	f7fe fe21 	bl	8006ed0 <mem_cmp>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d014      	beq.n	80082be <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008294:	23ff      	movs	r3, #255	@ 0xff
 8008296:	757b      	strb	r3, [r7, #21]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f04f 32ff 	mov.w	r2, #4294967295
 800829e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80082a0:	2100      	movs	r1, #0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7ff fc6e 	bl	8007b84 <dir_next>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f43f af65 	beq.w	800817e <dir_find+0x34>
 80082b4:	e004      	b.n	80082c0 <dir_find+0x176>
		if (res != FR_OK) break;
 80082b6:	bf00      	nop
 80082b8:	e002      	b.n	80082c0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80082ba:	bf00      	nop
 80082bc:	e000      	b.n	80082c0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80082be:	bf00      	nop

	return res;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08c      	sub	sp, #48	@ 0x30
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80082e0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <dir_register+0x20>
 80082e8:	2306      	movs	r3, #6
 80082ea:	e0e0      	b.n	80084ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80082ec:	2300      	movs	r3, #0
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f0:	e002      	b.n	80082f8 <dir_register+0x2c>
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	3301      	adds	r3, #1
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1f4      	bne.n	80082f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	220c      	movs	r2, #12
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fd9f 	bl	8006e58 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d032      	beq.n	800838a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2240      	movs	r2, #64	@ 0x40
 8008328:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800832c:	2301      	movs	r3, #1
 800832e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008330:	e016      	b.n	8008360 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	f107 010c 	add.w	r1, r7, #12
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	f7ff fe53 	bl	8007fec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff feff 	bl	800814a <dir_find>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008352:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	3301      	adds	r3, #1
 800835e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008362:	2b63      	cmp	r3, #99	@ 0x63
 8008364:	d9e5      	bls.n	8008332 <dir_register+0x66>
 8008366:	e000      	b.n	800836a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008368:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	2b64      	cmp	r3, #100	@ 0x64
 800836e:	d101      	bne.n	8008374 <dir_register+0xa8>
 8008370:	2307      	movs	r3, #7
 8008372:	e09c      	b.n	80084ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008374:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008378:	2b04      	cmp	r3, #4
 800837a:	d002      	beq.n	8008382 <dir_register+0xb6>
 800837c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008380:	e095      	b.n	80084ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008382:	7dfa      	ldrb	r2, [r7, #23]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <dir_register+0xd8>
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	330c      	adds	r3, #12
 8008398:	4a47      	ldr	r2, [pc, #284]	@ (80084b8 <dir_register+0x1ec>)
 800839a:	fba2 2303 	umull	r2, r3, r2, r3
 800839e:	089b      	lsrs	r3, r3, #2
 80083a0:	3301      	adds	r3, #1
 80083a2:	e000      	b.n	80083a6 <dir_register+0xda>
 80083a4:	2301      	movs	r3, #1
 80083a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80083a8:	6a39      	ldr	r1, [r7, #32]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fcc0 	bl	8007d30 <dir_alloc>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80083b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d148      	bne.n	8008450 <dir_register+0x184>
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	623b      	str	r3, [r7, #32]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d042      	beq.n	8008450 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	015b      	lsls	r3, r3, #5
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fb4b 	bl	8007a72 <dir_sdi>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80083e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d132      	bne.n	8008450 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3324      	adds	r3, #36	@ 0x24
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fe8a 	bl	8008108 <sum_sfn>
 80083f4:	4603      	mov	r3, r0
 80083f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	4619      	mov	r1, r3
 80083fe:	69f8      	ldr	r0, [r7, #28]
 8008400:	f7fe ff58 	bl	80072b4 <move_window>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800840a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800840e:	2b00      	cmp	r3, #0
 8008410:	d11d      	bne.n	800844e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	6918      	ldr	r0, [r3, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a19      	ldr	r1, [r3, #32]
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	b2da      	uxtb	r2, r3
 800841e:	7efb      	ldrb	r3, [r7, #27]
 8008420:	f7ff fd7c 	bl	8007f1c <put_lfn>
				fs->wflag = 1;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2201      	movs	r2, #1
 8008428:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fba9 	bl	8007b84 <dir_next>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008438:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d107      	bne.n	8008450 <dir_register+0x184>
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	3b01      	subs	r3, #1
 8008444:	623b      	str	r3, [r7, #32]
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1d5      	bne.n	80083f8 <dir_register+0x12c>
 800844c:	e000      	b.n	8008450 <dir_register+0x184>
				if (res != FR_OK) break;
 800844e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008450:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008454:	2b00      	cmp	r3, #0
 8008456:	d128      	bne.n	80084aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	4619      	mov	r1, r3
 800845e:	69f8      	ldr	r0, [r7, #28]
 8008460:	f7fe ff28 	bl	80072b4 <move_window>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800846a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800846e:	2b00      	cmp	r3, #0
 8008470:	d11b      	bne.n	80084aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	2220      	movs	r2, #32
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fd0d 	bl	8006e9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a18      	ldr	r0, [r3, #32]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3324      	adds	r3, #36	@ 0x24
 8008488:	220b      	movs	r2, #11
 800848a:	4619      	mov	r1, r3
 800848c:	f7fe fce4 	bl	8006e58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	330c      	adds	r3, #12
 800849c:	f002 0218 	and.w	r2, r2, #24
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	2201      	movs	r2, #1
 80084a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80084aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3730      	adds	r7, #48	@ 0x30
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	4ec4ec4f 	.word	0x4ec4ec4f

080084bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	@ 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	61ba      	str	r2, [r7, #24]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	4413      	add	r3, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80084ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084ec:	2b1f      	cmp	r3, #31
 80084ee:	d940      	bls.n	8008572 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80084f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80084f4:	d006      	beq.n	8008504 <create_name+0x48>
 80084f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80084fa:	d110      	bne.n	800851e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80084fc:	e002      	b.n	8008504 <create_name+0x48>
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	3301      	adds	r3, #1
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	4413      	add	r3, r2
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b2f      	cmp	r3, #47	@ 0x2f
 800850e:	d0f6      	beq.n	80084fe <create_name+0x42>
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	4413      	add	r3, r2
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b5c      	cmp	r3, #92	@ 0x5c
 800851a:	d0f0      	beq.n	80084fe <create_name+0x42>
			break;
 800851c:	e02a      	b.n	8008574 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2bfe      	cmp	r3, #254	@ 0xfe
 8008522:	d901      	bls.n	8008528 <create_name+0x6c>
 8008524:	2306      	movs	r3, #6
 8008526:	e17d      	b.n	8008824 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008528:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800852a:	b2db      	uxtb	r3, r3
 800852c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800852e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008530:	2101      	movs	r1, #1
 8008532:	4618      	mov	r0, r3
 8008534:	f001 fcac 	bl	8009e90 <ff_convert>
 8008538:	4603      	mov	r3, r0
 800853a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800853c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <create_name+0x8a>
 8008542:	2306      	movs	r3, #6
 8008544:	e16e      	b.n	8008824 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008548:	2b7f      	cmp	r3, #127	@ 0x7f
 800854a:	d809      	bhi.n	8008560 <create_name+0xa4>
 800854c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800854e:	4619      	mov	r1, r3
 8008550:	488d      	ldr	r0, [pc, #564]	@ (8008788 <create_name+0x2cc>)
 8008552:	f7fe fce4 	bl	8006f1e <chk_chr>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <create_name+0xa4>
 800855c:	2306      	movs	r3, #6
 800855e:	e161      	b.n	8008824 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	617a      	str	r2, [r7, #20]
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800856e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008570:	e7b4      	b.n	80084dc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008572:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	441a      	add	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800857e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008580:	2b1f      	cmp	r3, #31
 8008582:	d801      	bhi.n	8008588 <create_name+0xcc>
 8008584:	2304      	movs	r3, #4
 8008586:	e000      	b.n	800858a <create_name+0xce>
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800858e:	e011      	b.n	80085b4 <create_name+0xf8>
		w = lfn[di - 1];
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008596:	3b01      	subs	r3, #1
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80085a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d002      	beq.n	80085ae <create_name+0xf2>
 80085a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80085ac:	d106      	bne.n	80085bc <create_name+0x100>
		di--;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1ea      	bne.n	8008590 <create_name+0xd4>
 80085ba:	e000      	b.n	80085be <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80085bc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4413      	add	r3, r2
 80085c6:	2200      	movs	r2, #0
 80085c8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <create_name+0x118>
 80085d0:	2306      	movs	r3, #6
 80085d2:	e127      	b.n	8008824 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3324      	adds	r3, #36	@ 0x24
 80085d8:	220b      	movs	r2, #11
 80085da:	2120      	movs	r1, #32
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe fc5c 	bl	8006e9a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	e002      	b.n	80085ee <create_name+0x132>
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d0f5      	beq.n	80085e8 <create_name+0x12c>
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	2b2e      	cmp	r3, #46	@ 0x2e
 8008608:	d0ee      	beq.n	80085e8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <create_name+0x168>
 8008610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008614:	f043 0303 	orr.w	r3, r3, #3
 8008618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800861c:	e002      	b.n	8008624 <create_name+0x168>
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	3b01      	subs	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <create_name+0x182>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008630:	3b01      	subs	r3, #1
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	2b2e      	cmp	r3, #46	@ 0x2e
 800863c:	d1ef      	bne.n	800861e <create_name+0x162>

	i = b = 0; ni = 8;
 800863e:	2300      	movs	r3, #0
 8008640:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008644:	2300      	movs	r3, #0
 8008646:	623b      	str	r3, [r7, #32]
 8008648:	2308      	movs	r3, #8
 800864a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	61ba      	str	r2, [r7, #24]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800865c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8090 	beq.w	8008784 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008666:	2b20      	cmp	r3, #32
 8008668:	d006      	beq.n	8008678 <create_name+0x1bc>
 800866a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800866c:	2b2e      	cmp	r3, #46	@ 0x2e
 800866e:	d10a      	bne.n	8008686 <create_name+0x1ca>
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	429a      	cmp	r2, r3
 8008676:	d006      	beq.n	8008686 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800867c:	f043 0303 	orr.w	r3, r3, #3
 8008680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008684:	e07d      	b.n	8008782 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008686:	6a3a      	ldr	r2, [r7, #32]
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	429a      	cmp	r2, r3
 800868c:	d203      	bcs.n	8008696 <create_name+0x1da>
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	429a      	cmp	r2, r3
 8008694:	d123      	bne.n	80086de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	2b0b      	cmp	r3, #11
 800869a:	d106      	bne.n	80086aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800869c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086a0:	f043 0303 	orr.w	r3, r3, #3
 80086a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086a8:	e075      	b.n	8008796 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d005      	beq.n	80086be <create_name+0x202>
 80086b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086b6:	f043 0303 	orr.w	r3, r3, #3
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d866      	bhi.n	8008794 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	2308      	movs	r3, #8
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	230b      	movs	r3, #11
 80086d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80086d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80086dc:	e051      	b.n	8008782 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80086de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80086e2:	d914      	bls.n	800870e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80086e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fbd1 	bl	8009e90 <ff_convert>
 80086ee:	4603      	mov	r3, r0
 80086f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80086f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <create_name+0x246>
 80086f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086fa:	3b80      	subs	r3, #128	@ 0x80
 80086fc:	4a23      	ldr	r2, [pc, #140]	@ (800878c <create_name+0x2d0>)
 80086fe:	5cd3      	ldrb	r3, [r2, r3]
 8008700:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008702:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008706:	f043 0302 	orr.w	r3, r3, #2
 800870a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800870e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d007      	beq.n	8008724 <create_name+0x268>
 8008714:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008716:	4619      	mov	r1, r3
 8008718:	481d      	ldr	r0, [pc, #116]	@ (8008790 <create_name+0x2d4>)
 800871a:	f7fe fc00 	bl	8006f1e <chk_chr>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008724:	235f      	movs	r3, #95	@ 0x5f
 8008726:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800872c:	f043 0303 	orr.w	r3, r3, #3
 8008730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008734:	e01b      	b.n	800876e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008738:	2b40      	cmp	r3, #64	@ 0x40
 800873a:	d909      	bls.n	8008750 <create_name+0x294>
 800873c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800873e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008740:	d806      	bhi.n	8008750 <create_name+0x294>
					b |= 2;
 8008742:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008746:	f043 0302 	orr.w	r3, r3, #2
 800874a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800874e:	e00e      	b.n	800876e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008752:	2b60      	cmp	r3, #96	@ 0x60
 8008754:	d90b      	bls.n	800876e <create_name+0x2b2>
 8008756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008758:	2b7a      	cmp	r3, #122	@ 0x7a
 800875a:	d808      	bhi.n	800876e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800875c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800876a:	3b20      	subs	r3, #32
 800876c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	623a      	str	r2, [r7, #32]
 8008774:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008776:	b2d1      	uxtb	r1, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	4413      	add	r3, r2
 800877c:	460a      	mov	r2, r1
 800877e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008782:	e763      	b.n	800864c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008784:	bf00      	nop
 8008786:	e006      	b.n	8008796 <create_name+0x2da>
 8008788:	0800a0b0 	.word	0x0800a0b0
 800878c:	0800a124 	.word	0x0800a124
 8008790:	0800a0bc 	.word	0x0800a0bc
			if (si > di) break;			/* No extension */
 8008794:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800879c:	2be5      	cmp	r3, #229	@ 0xe5
 800879e:	d103      	bne.n	80087a8 <create_name+0x2ec>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2205      	movs	r2, #5
 80087a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d104      	bne.n	80087b8 <create_name+0x2fc>
 80087ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80087b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087bc:	f003 030c 	and.w	r3, r3, #12
 80087c0:	2b0c      	cmp	r3, #12
 80087c2:	d005      	beq.n	80087d0 <create_name+0x314>
 80087c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d105      	bne.n	80087dc <create_name+0x320>
 80087d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087d4:	f043 0302 	orr.w	r3, r3, #2
 80087d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80087dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d117      	bne.n	8008818 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80087e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d105      	bne.n	8008800 <create_name+0x344>
 80087f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087f8:	f043 0310 	orr.w	r3, r3, #16
 80087fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008800:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008804:	f003 030c 	and.w	r3, r3, #12
 8008808:	2b04      	cmp	r3, #4
 800880a:	d105      	bne.n	8008818 <create_name+0x35c>
 800880c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008810:	f043 0308 	orr.w	r3, r3, #8
 8008814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800881e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008822:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008824:	4618      	mov	r0, r3
 8008826:	3728      	adds	r7, #40	@ 0x28
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008840:	e002      	b.n	8008848 <follow_path+0x1c>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b2f      	cmp	r3, #47	@ 0x2f
 800884e:	d0f8      	beq.n	8008842 <follow_path+0x16>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b5c      	cmp	r3, #92	@ 0x5c
 8008856:	d0f4      	beq.n	8008842 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2200      	movs	r2, #0
 800885c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b1f      	cmp	r3, #31
 8008864:	d80a      	bhi.n	800887c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2280      	movs	r2, #128	@ 0x80
 800886a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800886e:	2100      	movs	r1, #0
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff f8fe 	bl	8007a72 <dir_sdi>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]
 800887a:	e048      	b.n	800890e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800887c:	463b      	mov	r3, r7
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fe1b 	bl	80084bc <create_name>
 8008886:	4603      	mov	r3, r0
 8008888:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d139      	bne.n	8008904 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff fc5a 	bl	800814a <dir_find>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80088a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00a      	beq.n	80088be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d12c      	bne.n	8008908 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80088ae:	7afb      	ldrb	r3, [r7, #11]
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d127      	bne.n	8008908 <follow_path+0xdc>
 80088b8:	2305      	movs	r3, #5
 80088ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80088bc:	e024      	b.n	8008908 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d121      	bne.n	800890c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	799b      	ldrb	r3, [r3, #6]
 80088cc:	f003 0310 	and.w	r3, r3, #16
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80088d4:	2305      	movs	r3, #5
 80088d6:	75fb      	strb	r3, [r7, #23]
 80088d8:	e019      	b.n	800890e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	8992      	ldrh	r2, [r2, #12]
 80088e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80088ec:	fb00 f202 	mul.w	r2, r0, r2
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	440b      	add	r3, r1
 80088f4:	4619      	mov	r1, r3
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff fa61 	bl	8007dbe <ld_clust>
 80088fc:	4602      	mov	r2, r0
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008902:	e7bb      	b.n	800887c <follow_path+0x50>
			if (res != FR_OK) break;
 8008904:	bf00      	nop
 8008906:	e002      	b.n	800890e <follow_path+0xe2>
				break;
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800890c:	bf00      	nop
			}
		}
	}

	return res;
 800890e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008920:	f04f 33ff 	mov.w	r3, #4294967295
 8008924:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d031      	beq.n	8008992 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	e002      	b.n	800893c <get_ldnumber+0x24>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	3301      	adds	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b1f      	cmp	r3, #31
 8008942:	d903      	bls.n	800894c <get_ldnumber+0x34>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b3a      	cmp	r3, #58	@ 0x3a
 800894a:	d1f4      	bne.n	8008936 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b3a      	cmp	r3, #58	@ 0x3a
 8008952:	d11c      	bne.n	800898e <get_ldnumber+0x76>
			tp = *path;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	60fa      	str	r2, [r7, #12]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	3b30      	subs	r3, #48	@ 0x30
 8008964:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b09      	cmp	r3, #9
 800896a:	d80e      	bhi.n	800898a <get_ldnumber+0x72>
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	429a      	cmp	r2, r3
 8008972:	d10a      	bne.n	800898a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d107      	bne.n	800898a <get_ldnumber+0x72>
					vol = (int)i;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	3301      	adds	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	e002      	b.n	8008994 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800898e:	2300      	movs	r3, #0
 8008990:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008992:	693b      	ldr	r3, [r7, #16]
}
 8008994:	4618      	mov	r0, r3
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	70da      	strb	r2, [r3, #3]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295
 80089b6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fe fc7a 	bl	80072b4 <move_window>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <check_fs+0x2a>
 80089c6:	2304      	movs	r3, #4
 80089c8:	e038      	b.n	8008a3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3338      	adds	r3, #56	@ 0x38
 80089ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe f9be 	bl	8006d54 <ld_word>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d001      	beq.n	80089e8 <check_fs+0x48>
 80089e4:	2303      	movs	r3, #3
 80089e6:	e029      	b.n	8008a3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089ee:	2be9      	cmp	r3, #233	@ 0xe9
 80089f0:	d009      	beq.n	8008a06 <check_fs+0x66>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089f8:	2beb      	cmp	r3, #235	@ 0xeb
 80089fa:	d11e      	bne.n	8008a3a <check_fs+0x9a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008a02:	2b90      	cmp	r3, #144	@ 0x90
 8008a04:	d119      	bne.n	8008a3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3338      	adds	r3, #56	@ 0x38
 8008a0a:	3336      	adds	r3, #54	@ 0x36
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f9b9 	bl	8006d84 <ld_dword>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a18:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <check_fs+0xa4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <check_fs+0x82>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e00c      	b.n	8008a3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3338      	adds	r3, #56	@ 0x38
 8008a26:	3352      	adds	r3, #82	@ 0x52
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe f9ab 	bl	8006d84 <ld_dword>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4a05      	ldr	r2, [pc, #20]	@ (8008a48 <check_fs+0xa8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d101      	bne.n	8008a3a <check_fs+0x9a>
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008a3a:	2302      	movs	r3, #2
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	00544146 	.word	0x00544146
 8008a48:	33544146 	.word	0x33544146

08008a4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b096      	sub	sp, #88	@ 0x58
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff ff59 	bl	8008918 <get_ldnumber>
 8008a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da01      	bge.n	8008a72 <find_volume+0x26>
 8008a6e:	230b      	movs	r3, #11
 8008a70:	e265      	b.n	8008f3e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a72:	4a9f      	ldr	r2, [pc, #636]	@ (8008cf0 <find_volume+0x2a4>)
 8008a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <find_volume+0x3a>
 8008a82:	230c      	movs	r3, #12
 8008a84:	e25b      	b.n	8008f3e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01a      	beq.n	8008ad2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe f8b7 	bl	8006c14 <disk_status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008aac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10c      	bne.n	8008ad2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <find_volume+0x82>
 8008abe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008aca:	230a      	movs	r3, #10
 8008acc:	e237      	b.n	8008f3e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e235      	b.n	8008f3e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe f8af 	bl	8006c48 <disk_initialize>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008af0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008afc:	2303      	movs	r3, #3
 8008afe:	e21e      	b.n	8008f3e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <find_volume+0xca>
 8008b06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008b12:	230a      	movs	r3, #10
 8008b14:	e213      	b.n	8008f3e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	7858      	ldrb	r0, [r3, #1]
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	330c      	adds	r3, #12
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2102      	movs	r1, #2
 8008b22:	f7fe f8f9 	bl	8006d18 <disk_ioctl>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <find_volume+0xe4>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e206      	b.n	8008f3e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	899b      	ldrh	r3, [r3, #12]
 8008b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b38:	d80d      	bhi.n	8008b56 <find_volume+0x10a>
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	899b      	ldrh	r3, [r3, #12]
 8008b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b42:	d308      	bcc.n	8008b56 <find_volume+0x10a>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	899b      	ldrh	r3, [r3, #12]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	899b      	ldrh	r3, [r3, #12]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4013      	ands	r3, r2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <find_volume+0x10e>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e1f1      	b.n	8008f3e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b62:	f7ff ff1d 	bl	80089a0 <check_fs>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d149      	bne.n	8008c08 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b74:	2300      	movs	r3, #0
 8008b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b78:	e01e      	b.n	8008bb8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008b88:	4413      	add	r3, r2
 8008b8a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8e:	3304      	adds	r3, #4
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d006      	beq.n	8008ba4 <find_volume+0x158>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	3308      	adds	r3, #8
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe f8f2 	bl	8006d84 <ld_dword>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	e000      	b.n	8008ba6 <find_volume+0x15a>
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	3358      	adds	r3, #88	@ 0x58
 8008bac:	443b      	add	r3, r7
 8008bae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d9dd      	bls.n	8008b7a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <find_volume+0x182>
 8008bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	3358      	adds	r3, #88	@ 0x58
 8008bd4:	443b      	add	r3, r7
 8008bd6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008bda:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <find_volume+0x1a2>
 8008be2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008be4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008be6:	f7ff fedb 	bl	80089a0 <check_fs>
 8008bea:	4603      	mov	r3, r0
 8008bec:	e000      	b.n	8008bf0 <find_volume+0x1a4>
 8008bee:	2303      	movs	r3, #3
 8008bf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d905      	bls.n	8008c08 <find_volume+0x1bc>
 8008bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bfe:	3301      	adds	r3, #1
 8008c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d9e2      	bls.n	8008bce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008c08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d101      	bne.n	8008c14 <find_volume+0x1c8>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e194      	b.n	8008f3e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008c14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d901      	bls.n	8008c20 <find_volume+0x1d4>
 8008c1c:	230d      	movs	r3, #13
 8008c1e:	e18e      	b.n	8008f3e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c22:	3338      	adds	r3, #56	@ 0x38
 8008c24:	330b      	adds	r3, #11
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe f894 	bl	8006d54 <ld_word>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	899b      	ldrh	r3, [r3, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d001      	beq.n	8008c3c <find_volume+0x1f0>
 8008c38:	230d      	movs	r3, #13
 8008c3a:	e180      	b.n	8008f3e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	3338      	adds	r3, #56	@ 0x38
 8008c40:	3316      	adds	r3, #22
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f886 	bl	8006d54 <ld_word>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <find_volume+0x214>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	3338      	adds	r3, #56	@ 0x38
 8008c56:	3324      	adds	r3, #36	@ 0x24
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe f893 	bl	8006d84 <ld_dword>
 8008c5e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c64:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	789b      	ldrb	r3, [r3, #2]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d005      	beq.n	8008c84 <find_volume+0x238>
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	789b      	ldrb	r3, [r3, #2]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d001      	beq.n	8008c84 <find_volume+0x238>
 8008c80:	230d      	movs	r3, #13
 8008c82:	e15c      	b.n	8008f3e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	789b      	ldrb	r3, [r3, #2]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	895b      	ldrh	r3, [r3, #10]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d008      	beq.n	8008cb8 <find_volume+0x26c>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	895b      	ldrh	r3, [r3, #10]
 8008caa:	461a      	mov	r2, r3
 8008cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cae:	895b      	ldrh	r3, [r3, #10]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <find_volume+0x270>
 8008cb8:	230d      	movs	r3, #13
 8008cba:	e140      	b.n	8008f3e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	3338      	adds	r3, #56	@ 0x38
 8008cc0:	3311      	adds	r3, #17
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f846 	bl	8006d54 <ld_word>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd2:	891b      	ldrh	r3, [r3, #8]
 8008cd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cd6:	8992      	ldrh	r2, [r2, #12]
 8008cd8:	0952      	lsrs	r2, r2, #5
 8008cda:	b292      	uxth	r2, r2
 8008cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ce0:	fb01 f202 	mul.w	r2, r1, r2
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <find_volume+0x2a8>
 8008cec:	230d      	movs	r3, #13
 8008cee:	e126      	b.n	8008f3e <find_volume+0x4f2>
 8008cf0:	2000233c 	.word	0x2000233c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf6:	3338      	adds	r3, #56	@ 0x38
 8008cf8:	3313      	adds	r3, #19
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe f82a 	bl	8006d54 <ld_word>
 8008d00:	4603      	mov	r3, r0
 8008d02:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <find_volume+0x2cc>
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	3338      	adds	r3, #56	@ 0x38
 8008d0e:	3320      	adds	r3, #32
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe f837 	bl	8006d84 <ld_dword>
 8008d16:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	3338      	adds	r3, #56	@ 0x38
 8008d1c:	330e      	adds	r3, #14
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe f818 	bl	8006d54 <ld_word>
 8008d24:	4603      	mov	r3, r0
 8008d26:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008d28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <find_volume+0x2e6>
 8008d2e:	230d      	movs	r3, #13
 8008d30:	e105      	b.n	8008f3e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008d32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d36:	4413      	add	r3, r2
 8008d38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d3a:	8911      	ldrh	r1, [r2, #8]
 8008d3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d3e:	8992      	ldrh	r2, [r2, #12]
 8008d40:	0952      	lsrs	r2, r2, #5
 8008d42:	b292      	uxth	r2, r2
 8008d44:	fbb1 f2f2 	udiv	r2, r1, r2
 8008d48:	b292      	uxth	r2, r2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d201      	bcs.n	8008d5a <find_volume+0x30e>
 8008d56:	230d      	movs	r3, #13
 8008d58:	e0f1      	b.n	8008f3e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d62:	8952      	ldrh	r2, [r2, #10]
 8008d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d68:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <find_volume+0x328>
 8008d70:	230d      	movs	r3, #13
 8008d72:	e0e4      	b.n	8008f3e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008d74:	2303      	movs	r3, #3
 8008d76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d802      	bhi.n	8008d8a <find_volume+0x33e>
 8008d84:	2302      	movs	r3, #2
 8008d86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d802      	bhi.n	8008d9a <find_volume+0x34e>
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	1c9a      	adds	r2, r3, #2
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008da6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008da8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dac:	441a      	add	r2, r3
 8008dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008db2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	441a      	add	r2, r3
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d11e      	bne.n	8008e02 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	3338      	adds	r3, #56	@ 0x38
 8008dc8:	332a      	adds	r3, #42	@ 0x2a
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fd ffc2 	bl	8006d54 <ld_word>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <find_volume+0x38e>
 8008dd6:	230d      	movs	r3, #13
 8008dd8:	e0b1      	b.n	8008f3e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	891b      	ldrh	r3, [r3, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <find_volume+0x39a>
 8008de2:	230d      	movs	r3, #13
 8008de4:	e0ab      	b.n	8008f3e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de8:	3338      	adds	r3, #56	@ 0x38
 8008dea:	332c      	adds	r3, #44	@ 0x2c
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fd ffc9 	bl	8006d84 <ld_dword>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e00:	e01f      	b.n	8008e42 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e04:	891b      	ldrh	r3, [r3, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <find_volume+0x3c2>
 8008e0a:	230d      	movs	r3, #13
 8008e0c:	e097      	b.n	8008f3e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e14:	441a      	add	r2, r3
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d103      	bne.n	8008e2a <find_volume+0x3de>
 8008e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	e00a      	b.n	8008e40 <find_volume+0x3f4>
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4413      	add	r3, r2
 8008e34:	085a      	lsrs	r2, r3, #1
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008e40:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	899b      	ldrh	r3, [r3, #12]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e4e:	440b      	add	r3, r1
 8008e50:	3b01      	subs	r3, #1
 8008e52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e54:	8989      	ldrh	r1, [r1, #12]
 8008e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d201      	bcs.n	8008e62 <find_volume+0x416>
 8008e5e:	230d      	movs	r3, #13
 8008e60:	e06d      	b.n	8008f3e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295
 8008e68:	619a      	str	r2, [r3, #24]
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e70:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e74:	2280      	movs	r2, #128	@ 0x80
 8008e76:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d149      	bne.n	8008f14 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	3338      	adds	r3, #56	@ 0x38
 8008e84:	3330      	adds	r3, #48	@ 0x30
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fd ff64 	bl	8006d54 <ld_word>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d140      	bne.n	8008f14 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e94:	3301      	adds	r3, #1
 8008e96:	4619      	mov	r1, r3
 8008e98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e9a:	f7fe fa0b 	bl	80072b4 <move_window>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d137      	bne.n	8008f14 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eac:	3338      	adds	r3, #56	@ 0x38
 8008eae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fd ff4e 	bl	8006d54 <ld_word>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d127      	bne.n	8008f14 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec6:	3338      	adds	r3, #56	@ 0x38
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fd ff5b 	bl	8006d84 <ld_dword>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f48 <find_volume+0x4fc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d11e      	bne.n	8008f14 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed8:	3338      	adds	r3, #56	@ 0x38
 8008eda:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fd ff50 	bl	8006d84 <ld_dword>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4a19      	ldr	r2, [pc, #100]	@ (8008f4c <find_volume+0x500>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d113      	bne.n	8008f14 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eee:	3338      	adds	r3, #56	@ 0x38
 8008ef0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd ff45 	bl	8006d84 <ld_dword>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f02:	3338      	adds	r3, #56	@ 0x38
 8008f04:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fd ff3b 	bl	8006d84 <ld_dword>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008f1a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <find_volume+0x504>)
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	4b0a      	ldr	r3, [pc, #40]	@ (8008f50 <find_volume+0x504>)
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <find_volume+0x504>)
 8008f2a:	881a      	ldrh	r2, [r3, #0]
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f32:	4a08      	ldr	r2, [pc, #32]	@ (8008f54 <find_volume+0x508>)
 8008f34:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008f36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f38:	f7fe f954 	bl	80071e4 <clear_lock>
#endif
	return FR_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3758      	adds	r7, #88	@ 0x58
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	41615252 	.word	0x41615252
 8008f4c:	61417272 	.word	0x61417272
 8008f50:	20002340 	.word	0x20002340
 8008f54:	20002364 	.word	0x20002364

08008f58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008f62:	2309      	movs	r3, #9
 8008f64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01c      	beq.n	8008fa6 <validate+0x4e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d018      	beq.n	8008fa6 <validate+0x4e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d013      	beq.n	8008fa6 <validate+0x4e>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	889a      	ldrh	r2, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d10c      	bne.n	8008fa6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fd fe3e 	bl	8006c14 <disk_status>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <validate+0x4e>
			res = FR_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <validate+0x5a>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	e000      	b.n	8008fb4 <validate+0x5c>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	6013      	str	r3, [r2, #0]
	return res;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008fd6:	f107 0310 	add.w	r3, r7, #16
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fc9c 	bl	8008918 <get_ldnumber>
 8008fe0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	da01      	bge.n	8008fec <f_mount+0x28>
 8008fe8:	230b      	movs	r3, #11
 8008fea:	e02b      	b.n	8009044 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fec:	4a17      	ldr	r2, [pc, #92]	@ (800904c <f_mount+0x88>)
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008ffc:	69b8      	ldr	r0, [r7, #24]
 8008ffe:	f7fe f8f1 	bl	80071e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2200      	movs	r2, #0
 8009006:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	490d      	ldr	r1, [pc, #52]	@ (800904c <f_mount+0x88>)
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <f_mount+0x66>
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d001      	beq.n	800902e <f_mount+0x6a>
 800902a:	2300      	movs	r3, #0
 800902c:	e00a      	b.n	8009044 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800902e:	f107 010c 	add.w	r1, r7, #12
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	2200      	movs	r2, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fd07 	bl	8008a4c <find_volume>
 800903e:	4603      	mov	r3, r0
 8009040:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009042:	7dfb      	ldrb	r3, [r7, #23]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3720      	adds	r7, #32
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	2000233c 	.word	0x2000233c

08009050 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b09a      	sub	sp, #104	@ 0x68
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <f_open+0x18>
 8009064:	2309      	movs	r3, #9
 8009066:	e1b7      	b.n	80093d8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800906e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009070:	79fa      	ldrb	r2, [r7, #7]
 8009072:	f107 0114 	add.w	r1, r7, #20
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fce6 	bl	8008a4c <find_volume>
 8009080:	4603      	mov	r3, r0
 8009082:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8009086:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800908a:	2b00      	cmp	r3, #0
 800908c:	f040 819b 	bne.w	80093c6 <f_open+0x376>
		dj.obj.fs = fs;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	f107 0318 	add.w	r3, r7, #24
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff fbc5 	bl	800882c <follow_path>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80090a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d118      	bne.n	80090e2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80090b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80090b4:	b25b      	sxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da03      	bge.n	80090c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80090ba:	2306      	movs	r3, #6
 80090bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80090c0:	e00f      	b.n	80090e2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	bf8c      	ite	hi
 80090c8:	2301      	movhi	r3, #1
 80090ca:	2300      	movls	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	f107 0318 	add.w	r3, r7, #24
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fd ff3c 	bl	8006f54 <chk_lock>
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	f003 031c 	and.w	r3, r3, #28
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d07f      	beq.n	80091ec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80090ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d017      	beq.n	8009124 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80090f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d10e      	bne.n	800911a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80090fc:	f7fd ff86 	bl	800700c <enq_lock>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d006      	beq.n	8009114 <f_open+0xc4>
 8009106:	f107 0318 	add.w	r3, r7, #24
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff f8de 	bl	80082cc <dir_register>
 8009110:	4603      	mov	r3, r0
 8009112:	e000      	b.n	8009116 <f_open+0xc6>
 8009114:	2312      	movs	r3, #18
 8009116:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	f043 0308 	orr.w	r3, r3, #8
 8009120:	71fb      	strb	r3, [r7, #7]
 8009122:	e010      	b.n	8009146 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009124:	7fbb      	ldrb	r3, [r7, #30]
 8009126:	f003 0311 	and.w	r3, r3, #17
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <f_open+0xe6>
					res = FR_DENIED;
 800912e:	2307      	movs	r3, #7
 8009130:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009134:	e007      	b.n	8009146 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <f_open+0xf6>
 8009140:	2308      	movs	r3, #8
 8009142:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009146:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800914a:	2b00      	cmp	r3, #0
 800914c:	d168      	bne.n	8009220 <f_open+0x1d0>
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d063      	beq.n	8009220 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009158:	f7fd fb1a 	bl	8006790 <get_fattime>
 800915c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	330e      	adds	r3, #14
 8009162:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fe4b 	bl	8006e00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	3316      	adds	r3, #22
 800916e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009170:	4618      	mov	r0, r3
 8009172:	f7fd fe45 	bl	8006e00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	330b      	adds	r3, #11
 800917a:	2220      	movs	r2, #32
 800917c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fe1a 	bl	8007dbe <ld_clust>
 800918a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009190:	2200      	movs	r2, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe fe32 	bl	8007dfc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	331c      	adds	r3, #28
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fd fe2e 	bl	8006e00 <st_dword>
					fs->wflag = 1;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2201      	movs	r2, #1
 80091a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80091aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d037      	beq.n	8009220 <f_open+0x1d0>
						dw = fs->winsect;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80091b6:	f107 0318 	add.w	r3, r7, #24
 80091ba:	2200      	movs	r2, #0
 80091bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fb22 	bl	8007808 <remove_chain>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80091ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d126      	bne.n	8009220 <f_open+0x1d0>
							res = move_window(fs, dw);
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe f86c 	bl	80072b4 <move_window>
 80091dc:	4603      	mov	r3, r0
 80091de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091e6:	3a01      	subs	r2, #1
 80091e8:	615a      	str	r2, [r3, #20]
 80091ea:	e019      	b.n	8009220 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80091ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d115      	bne.n	8009220 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80091f4:	7fbb      	ldrb	r3, [r7, #30]
 80091f6:	f003 0310 	and.w	r3, r3, #16
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <f_open+0x1b6>
					res = FR_NO_FILE;
 80091fe:	2304      	movs	r3, #4
 8009200:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009204:	e00c      	b.n	8009220 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d007      	beq.n	8009220 <f_open+0x1d0>
 8009210:	7fbb      	ldrb	r3, [r7, #30]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <f_open+0x1d0>
						res = FR_DENIED;
 800921a:	2307      	movs	r3, #7
 800921c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009220:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009224:	2b00      	cmp	r3, #0
 8009226:	d126      	bne.n	8009276 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	f003 0308 	and.w	r3, r3, #8
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009238:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009242:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b01      	cmp	r3, #1
 800924c:	bf8c      	ite	hi
 800924e:	2301      	movhi	r3, #1
 8009250:	2300      	movls	r3, #0
 8009252:	b2db      	uxtb	r3, r3
 8009254:	461a      	mov	r2, r3
 8009256:	f107 0318 	add.w	r3, r7, #24
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7fd fef7 	bl	8007050 <inc_lock>
 8009262:	4602      	mov	r2, r0
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <f_open+0x226>
 8009270:	2302      	movs	r3, #2
 8009272:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009276:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 80a3 	bne.w	80093c6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe fd99 	bl	8007dbe <ld_clust>
 800928c:	4602      	mov	r2, r0
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	331c      	adds	r3, #28
 8009296:	4618      	mov	r0, r3
 8009298:	f7fd fd74 	bl	8006d84 <ld_dword>
 800929c:	4602      	mov	r2, r0
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	88da      	ldrh	r2, [r3, #6]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	79fa      	ldrb	r2, [r7, #7]
 80092ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3330      	adds	r3, #48	@ 0x30
 80092d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80092d6:	2100      	movs	r1, #0
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fd fdde 	bl	8006e9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d06e      	beq.n	80093c6 <f_open+0x376>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d06a      	beq.n	80093c6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	895b      	ldrh	r3, [r3, #10]
 80092fc:	461a      	mov	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	899b      	ldrh	r3, [r3, #12]
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009314:	e016      	b.n	8009344 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe f887 	bl	800742e <get_fat>
 8009320:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009324:	2b01      	cmp	r3, #1
 8009326:	d802      	bhi.n	800932e <f_open+0x2de>
 8009328:	2302      	movs	r3, #2
 800932a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800932e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d102      	bne.n	800933c <f_open+0x2ec>
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800933c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800933e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009344:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009348:	2b00      	cmp	r3, #0
 800934a:	d103      	bne.n	8009354 <f_open+0x304>
 800934c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800934e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009350:	429a      	cmp	r2, r3
 8009352:	d8e0      	bhi.n	8009316 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009358:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800935a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800935e:	2b00      	cmp	r3, #0
 8009360:	d131      	bne.n	80093c6 <f_open+0x376>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	899b      	ldrh	r3, [r3, #12]
 8009366:	461a      	mov	r2, r3
 8009368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800936a:	fbb3 f1f2 	udiv	r1, r3, r2
 800936e:	fb01 f202 	mul.w	r2, r1, r2
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d026      	beq.n	80093c6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe f837 	bl	80073f0 <clust2sect>
 8009382:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d103      	bne.n	8009392 <f_open+0x342>
						res = FR_INT_ERR;
 800938a:	2302      	movs	r3, #2
 800938c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009390:	e019      	b.n	80093c6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	461a      	mov	r2, r3
 8009398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800939a:	fbb3 f2f2 	udiv	r2, r3, r2
 800939e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a0:	441a      	add	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	7858      	ldrb	r0, [r3, #1]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	2301      	movs	r3, #1
 80093b6:	f7fd fc6f 	bl	8006c98 <disk_read>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <f_open+0x376>
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80093c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <f_open+0x384>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80093d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3768      	adds	r7, #104	@ 0x68
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08c      	sub	sp, #48	@ 0x30
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f107 0210 	add.w	r2, r7, #16
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fda9 	bl	8008f58 <validate>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800940c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009410:	2b00      	cmp	r3, #0
 8009412:	d107      	bne.n	8009424 <f_write+0x44>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	7d5b      	ldrb	r3, [r3, #21]
 8009418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800941c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <f_write+0x4a>
 8009424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009428:	e16a      	b.n	8009700 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	7d1b      	ldrb	r3, [r3, #20]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <f_write+0x5a>
 8009436:	2307      	movs	r3, #7
 8009438:	e162      	b.n	8009700 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	429a      	cmp	r2, r3
 8009448:	f080 814c 	bcs.w	80096e4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	43db      	mvns	r3, r3
 8009452:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009454:	e146      	b.n	80096e4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	8992      	ldrh	r2, [r2, #12]
 800945e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009462:	fb01 f202 	mul.w	r2, r1, r2
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 80f1 	bne.w	8009650 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	8992      	ldrh	r2, [r2, #12]
 8009476:	fbb3 f3f2 	udiv	r3, r3, r2
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	8952      	ldrh	r2, [r2, #10]
 800947e:	3a01      	subs	r2, #1
 8009480:	4013      	ands	r3, r2
 8009482:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d143      	bne.n	8009512 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10c      	bne.n	80094ac <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	2b00      	cmp	r3, #0
 800949c:	d11a      	bne.n	80094d4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2100      	movs	r1, #0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe fa15 	bl	80078d2 <create_chain>
 80094a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80094aa:	e013      	b.n	80094d4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	4619      	mov	r1, r3
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7fe faa1 	bl	8007a02 <clmt_clust>
 80094c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80094c2:	e007      	b.n	80094d4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe fa00 	bl	80078d2 <create_chain>
 80094d2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 8109 	beq.w	80096ee <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80094dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d104      	bne.n	80094ec <f_write+0x10c>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2202      	movs	r2, #2
 80094e6:	755a      	strb	r2, [r3, #21]
 80094e8:	2302      	movs	r3, #2
 80094ea:	e109      	b.n	8009700 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f2:	d104      	bne.n	80094fe <f_write+0x11e>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	755a      	strb	r2, [r3, #21]
 80094fa:	2301      	movs	r3, #1
 80094fc:	e100      	b.n	8009700 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009502:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <f_write+0x132>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009510:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	7d1b      	ldrb	r3, [r3, #20]
 8009516:	b25b      	sxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	da18      	bge.n	800954e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	7858      	ldrb	r0, [r3, #1]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6a1a      	ldr	r2, [r3, #32]
 800952a:	2301      	movs	r3, #1
 800952c:	f7fd fbd4 	bl	8006cd8 <disk_write>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <f_write+0x160>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	755a      	strb	r2, [r3, #21]
 800953c:	2301      	movs	r3, #1
 800953e:	e0df      	b.n	8009700 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	7d1b      	ldrb	r3, [r3, #20]
 8009544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009548:	b2da      	uxtb	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f7fd ff4a 	bl	80073f0 <clust2sect>
 800955c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <f_write+0x18e>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2202      	movs	r2, #2
 8009568:	755a      	strb	r2, [r3, #21]
 800956a:	2302      	movs	r3, #2
 800956c:	e0c8      	b.n	8009700 <f_write+0x320>
			sect += csect;
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	4413      	add	r3, r2
 8009574:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	899b      	ldrh	r3, [r3, #12]
 800957a:	461a      	mov	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009582:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d043      	beq.n	8009612 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	4413      	add	r3, r2
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	8952      	ldrh	r2, [r2, #10]
 8009594:	4293      	cmp	r3, r2
 8009596:	d905      	bls.n	80095a4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	895b      	ldrh	r3, [r3, #10]
 800959c:	461a      	mov	r2, r3
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	7858      	ldrb	r0, [r3, #1]
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	69f9      	ldr	r1, [r7, #28]
 80095ae:	f7fd fb93 	bl	8006cd8 <disk_write>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <f_write+0x1e2>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	755a      	strb	r2, [r3, #21]
 80095be:	2301      	movs	r3, #1
 80095c0:	e09e      	b.n	8009700 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a1a      	ldr	r2, [r3, #32]
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	6a3a      	ldr	r2, [r7, #32]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d918      	bls.n	8009602 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a1a      	ldr	r2, [r3, #32]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	8992      	ldrh	r2, [r2, #12]
 80095e2:	fb02 f303 	mul.w	r3, r2, r3
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	18d1      	adds	r1, r2, r3
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7fd fc32 	bl	8006e58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	7d1b      	ldrb	r3, [r3, #20]
 80095f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	899b      	ldrh	r3, [r3, #12]
 8009606:	461a      	mov	r2, r3
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	fb02 f303 	mul.w	r3, r2, r3
 800960e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009610:	e04b      	b.n	80096aa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d016      	beq.n	800964a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009624:	429a      	cmp	r2, r3
 8009626:	d210      	bcs.n	800964a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	7858      	ldrb	r0, [r3, #1]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009632:	2301      	movs	r3, #1
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	f7fd fb2f 	bl	8006c98 <disk_read>
 800963a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800963c:	2b00      	cmp	r3, #0
 800963e:	d004      	beq.n	800964a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	755a      	strb	r2, [r3, #21]
 8009646:	2301      	movs	r3, #1
 8009648:	e05a      	b.n	8009700 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	899b      	ldrh	r3, [r3, #12]
 8009654:	4618      	mov	r0, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	8992      	ldrh	r2, [r2, #12]
 800965e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009662:	fb01 f202 	mul.w	r2, r1, r2
 8009666:	1a9b      	subs	r3, r3, r2
 8009668:	1ac3      	subs	r3, r0, r3
 800966a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800966c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d901      	bls.n	8009678 <f_write+0x298>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	8992      	ldrh	r2, [r2, #12]
 8009686:	fbb3 f0f2 	udiv	r0, r3, r2
 800968a:	fb00 f202 	mul.w	r2, r0, r2
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	440b      	add	r3, r1
 8009692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009694:	69f9      	ldr	r1, [r7, #28]
 8009696:	4618      	mov	r0, r3
 8009698:	f7fd fbde 	bl	8006e58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	7d1b      	ldrb	r3, [r3, #20]
 80096a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ae:	4413      	add	r3, r2
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	699a      	ldr	r2, [r3, #24]
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	441a      	add	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	619a      	str	r2, [r3, #24]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	bf38      	it	cc
 80096ca:	461a      	movcc	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	60da      	str	r2, [r3, #12]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	441a      	add	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f47f aeb5 	bne.w	8009456 <f_write+0x76>
 80096ec:	e000      	b.n	80096f0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80096ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	7d1b      	ldrb	r3, [r3, #20]
 80096f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3730      	adds	r7, #48	@ 0x30
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f107 0208 	add.w	r2, r7, #8
 8009716:	4611      	mov	r1, r2
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff fc1d 	bl	8008f58 <validate>
 800971e:	4603      	mov	r3, r0
 8009720:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d168      	bne.n	80097fa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	7d1b      	ldrb	r3, [r3, #20]
 800972c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d062      	beq.n	80097fa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7d1b      	ldrb	r3, [r3, #20]
 8009738:	b25b      	sxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	da15      	bge.n	800976a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	7858      	ldrb	r0, [r3, #1]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	2301      	movs	r3, #1
 800974e:	f7fd fac3 	bl	8006cd8 <disk_write>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <f_sync+0x54>
 8009758:	2301      	movs	r3, #1
 800975a:	e04f      	b.n	80097fc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7d1b      	ldrb	r3, [r3, #20]
 8009760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009764:	b2da      	uxtb	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800976a:	f7fd f811 	bl	8006790 <get_fattime>
 800976e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f7fd fd9b 	bl	80072b4 <move_window>
 800977e:	4603      	mov	r3, r0
 8009780:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d138      	bne.n	80097fa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	330b      	adds	r3, #11
 8009792:	781a      	ldrb	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	330b      	adds	r3, #11
 8009798:	f042 0220 	orr.w	r2, r2, #32
 800979c:	b2d2      	uxtb	r2, r2
 800979e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	461a      	mov	r2, r3
 80097aa:	68f9      	ldr	r1, [r7, #12]
 80097ac:	f7fe fb26 	bl	8007dfc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f103 021c 	add.w	r2, r3, #28
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fd fb1f 	bl	8006e00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3316      	adds	r3, #22
 80097c6:	6939      	ldr	r1, [r7, #16]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fd fb19 	bl	8006e00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3312      	adds	r3, #18
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fd faf8 	bl	8006dca <st_word>
					fs->wflag = 1;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2201      	movs	r2, #1
 80097de:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd fd94 	bl	8007310 <sync_fs>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ff7b 	bl	8009708 <f_sync>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d118      	bne.n	800984e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f107 0208 	add.w	r2, r7, #8
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fb97 	bl	8008f58 <validate>
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10c      	bne.n	800984e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	4618      	mov	r0, r3
 800983a:	f7fd fc97 	bl	800716c <dec_lock>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b090      	sub	sp, #64	@ 0x40
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f107 0208 	add.w	r2, r7, #8
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff fb74 	bl	8008f58 <validate>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009876:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800987a:	2b00      	cmp	r3, #0
 800987c:	d103      	bne.n	8009886 <f_lseek+0x2e>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7d5b      	ldrb	r3, [r3, #21]
 8009882:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800988a:	2b00      	cmp	r3, #0
 800988c:	d002      	beq.n	8009894 <f_lseek+0x3c>
 800988e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009892:	e201      	b.n	8009c98 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 80d9 	beq.w	8009a50 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d15a      	bne.n	800995c <f_lseek+0x104>
			tbl = fp->cltbl;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	2302      	movs	r3, #2
 80098b8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d03a      	beq.n	800993c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	613b      	str	r3, [r7, #16]
 80098ca:	2300      	movs	r3, #0
 80098cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	3302      	adds	r3, #2
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80098d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098da:	3301      	adds	r3, #1
 80098dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd fda3 	bl	800742e <get_fat>
 80098e8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d804      	bhi.n	80098fa <f_lseek+0xa2>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	755a      	strb	r2, [r3, #21]
 80098f6:	2302      	movs	r3, #2
 80098f8:	e1ce      	b.n	8009c98 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d104      	bne.n	800990c <f_lseek+0xb4>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	755a      	strb	r2, [r3, #21]
 8009908:	2301      	movs	r3, #1
 800990a:	e1c5      	b.n	8009c98 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3301      	adds	r3, #1
 8009910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009912:	429a      	cmp	r2, r3
 8009914:	d0de      	beq.n	80098d4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	429a      	cmp	r2, r3
 800991c:	d809      	bhi.n	8009932 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	1d1a      	adds	r2, r3, #4
 8009922:	627a      	str	r2, [r7, #36]	@ 0x24
 8009924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992a:	1d1a      	adds	r2, r3, #4
 800992c:	627a      	str	r2, [r7, #36]	@ 0x24
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009938:	429a      	cmp	r2, r3
 800993a:	d3c4      	bcc.n	80098c6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009942:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	429a      	cmp	r2, r3
 800994a:	d803      	bhi.n	8009954 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	e19f      	b.n	8009c94 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009954:	2311      	movs	r3, #17
 8009956:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800995a:	e19b      	b.n	8009c94 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d902      	bls.n	800996c <f_lseek+0x114>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 818d 	beq.w	8009c94 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	3b01      	subs	r3, #1
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fe f83e 	bl	8007a02 <clmt_clust>
 8009986:	4602      	mov	r2, r0
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	4619      	mov	r1, r3
 8009994:	4610      	mov	r0, r2
 8009996:	f7fd fd2b 	bl	80073f0 <clust2sect>
 800999a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <f_lseek+0x154>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	755a      	strb	r2, [r3, #21]
 80099a8:	2302      	movs	r3, #2
 80099aa:	e175      	b.n	8009c98 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	8992      	ldrh	r2, [r2, #12]
 80099b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	8952      	ldrh	r2, [r2, #10]
 80099bc:	3a01      	subs	r2, #1
 80099be:	4013      	ands	r3, r2
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	4413      	add	r3, r2
 80099c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	8992      	ldrh	r2, [r2, #12]
 80099ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80099d2:	fb01 f202 	mul.w	r2, r1, r2
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 815b 	beq.w	8009c94 <f_lseek+0x43c>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	f000 8155 	beq.w	8009c94 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7d1b      	ldrb	r3, [r3, #20]
 80099ee:	b25b      	sxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	da18      	bge.n	8009a26 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	7858      	ldrb	r0, [r3, #1]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1a      	ldr	r2, [r3, #32]
 8009a02:	2301      	movs	r3, #1
 8009a04:	f7fd f968 	bl	8006cd8 <disk_write>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <f_lseek+0x1c0>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	755a      	strb	r2, [r3, #21]
 8009a14:	2301      	movs	r3, #1
 8009a16:	e13f      	b.n	8009c98 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	7d1b      	ldrb	r3, [r3, #20]
 8009a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	7858      	ldrb	r0, [r3, #1]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a30:	2301      	movs	r3, #1
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	f7fd f930 	bl	8006c98 <disk_read>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d004      	beq.n	8009a48 <f_lseek+0x1f0>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	755a      	strb	r2, [r3, #21]
 8009a44:	2301      	movs	r3, #1
 8009a46:	e127      	b.n	8009c98 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	621a      	str	r2, [r3, #32]
 8009a4e:	e121      	b.n	8009c94 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d908      	bls.n	8009a6c <f_lseek+0x214>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	7d1b      	ldrb	r3, [r3, #20]
 8009a5e:	f003 0302 	and.w	r3, r3, #2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d102      	bne.n	8009a6c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a7a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 80b5 	beq.w	8009bee <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	895b      	ldrh	r3, [r3, #10]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	899b      	ldrh	r3, [r3, #12]
 8009a8e:	fb02 f303 	mul.w	r3, r2, r3
 8009a92:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01b      	beq.n	8009ad2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	1e5a      	subs	r2, r3, #1
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	1e59      	subs	r1, r3, #1
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d30f      	bcc.n	8009ad2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	1e5a      	subs	r2, r3, #1
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	425b      	negs	r3, r3
 8009aba:	401a      	ands	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ad0:	e022      	b.n	8009b18 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d119      	bne.n	8009b12 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fd fef5 	bl	80078d2 <create_chain>
 8009ae8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d104      	bne.n	8009afa <f_lseek+0x2a2>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	755a      	strb	r2, [r3, #21]
 8009af6:	2302      	movs	r3, #2
 8009af8:	e0ce      	b.n	8009c98 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d104      	bne.n	8009b0c <f_lseek+0x2b4>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	755a      	strb	r2, [r3, #21]
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e0c5      	b.n	8009c98 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b10:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b16:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d067      	beq.n	8009bee <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009b1e:	e03a      	b.n	8009b96 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699a      	ldr	r2, [r3, #24]
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	441a      	add	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7d1b      	ldrb	r3, [r3, #20]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd fec4 	bl	80078d2 <create_chain>
 8009b4a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d108      	bne.n	8009b64 <f_lseek+0x30c>
							ofs = 0; break;
 8009b52:	2300      	movs	r3, #0
 8009b54:	603b      	str	r3, [r7, #0]
 8009b56:	e022      	b.n	8009b9e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fd fc66 	bl	800742e <get_fat>
 8009b62:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6a:	d104      	bne.n	8009b76 <f_lseek+0x31e>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	755a      	strb	r2, [r3, #21]
 8009b72:	2301      	movs	r3, #1
 8009b74:	e090      	b.n	8009c98 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d904      	bls.n	8009b86 <f_lseek+0x32e>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d304      	bcc.n	8009b90 <f_lseek+0x338>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	755a      	strb	r2, [r3, #21]
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e083      	b.n	8009c98 <f_lseek+0x440>
					fp->clust = clst;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b94:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d8c0      	bhi.n	8009b20 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699a      	ldr	r2, [r3, #24]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	441a      	add	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	899b      	ldrh	r3, [r3, #12]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bb6:	fb01 f202 	mul.w	r2, r1, r2
 8009bba:	1a9b      	subs	r3, r3, r2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d016      	beq.n	8009bee <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fd fc13 	bl	80073f0 <clust2sect>
 8009bca:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d104      	bne.n	8009bdc <f_lseek+0x384>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	755a      	strb	r2, [r3, #21]
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e05d      	b.n	8009c98 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	899b      	ldrh	r3, [r3, #12]
 8009be0:	461a      	mov	r2, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bea:	4413      	add	r3, r2
 8009bec:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d90a      	bls.n	8009c10 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7d1b      	ldrb	r3, [r3, #20]
 8009c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	8992      	ldrh	r2, [r2, #12]
 8009c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c1c:	fb01 f202 	mul.w	r2, r1, r2
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d036      	beq.n	8009c94 <f_lseek+0x43c>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d031      	beq.n	8009c94 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	7d1b      	ldrb	r3, [r3, #20]
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da18      	bge.n	8009c6c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	7858      	ldrb	r0, [r3, #1]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1a      	ldr	r2, [r3, #32]
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f7fd f845 	bl	8006cd8 <disk_write>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <f_lseek+0x406>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	755a      	strb	r2, [r3, #21]
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e01c      	b.n	8009c98 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7d1b      	ldrb	r3, [r3, #20]
 8009c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	7858      	ldrb	r0, [r3, #1]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c76:	2301      	movs	r3, #1
 8009c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c7a:	f7fd f80d 	bl	8006c98 <disk_read>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <f_lseek+0x436>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	755a      	strb	r2, [r3, #21]
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e004      	b.n	8009c98 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c92:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009c94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3740      	adds	r7, #64	@ 0x40
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b0a      	cmp	r3, #10
 8009cb0:	d103      	bne.n	8009cba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009cb2:	210d      	movs	r1, #13
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff fff3 	bl	8009ca0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	db25      	blt.n	8009d12 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	60fa      	str	r2, [r7, #12]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	4413      	add	r3, r2
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b3c      	cmp	r3, #60	@ 0x3c
 8009cd8:	dd12      	ble.n	8009d00 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f103 010c 	add.w	r1, r3, #12
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	f107 0308 	add.w	r3, r7, #8
 8009cea:	f7ff fb79 	bl	80093e0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d101      	bne.n	8009cfa <putc_bfd+0x5a>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e001      	b.n	8009cfe <putc_bfd+0x5e>
 8009cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	609a      	str	r2, [r3, #8]
 8009d10:	e000      	b.n	8009d14 <putc_bfd+0x74>
	if (i < 0) return;
 8009d12:	bf00      	nop
}
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	db16      	blt.n	8009d58 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f103 010c 	add.w	r1, r3, #12
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	f107 030c 	add.w	r3, r7, #12
 8009d3e:	f7ff fb4f 	bl	80093e0 <f_write>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d107      	bne.n	8009d58 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d102      	bne.n	8009d58 <putc_flush+0x3e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	e001      	b.n	8009d5c <putc_flush+0x42>
	return EOF;
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	605a      	str	r2, [r3, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	609a      	str	r2, [r3, #8]
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b096      	sub	sp, #88	@ 0x58
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009d98:	f107 030c 	add.w	r3, r7, #12
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff ffe0 	bl	8009d64 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009da4:	e009      	b.n	8009dba <f_puts+0x2c>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	781a      	ldrb	r2, [r3, #0]
 8009dae:	f107 030c 	add.w	r3, r7, #12
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff ff73 	bl	8009ca0 <putc_bfd>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f1      	bne.n	8009da6 <f_puts+0x18>
	return putc_flush(&pb);
 8009dc2:	f107 030c 	add.w	r3, r7, #12
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff ffa7 	bl	8009d1a <putc_flush>
 8009dcc:	4603      	mov	r3, r0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3758      	adds	r7, #88	@ 0x58
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009de6:	2301      	movs	r3, #1
 8009de8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009dee:	4b1f      	ldr	r3, [pc, #124]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009df0:	7a5b      	ldrb	r3, [r3, #9]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d131      	bne.n	8009e5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009df8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009dfa:	7a5b      	ldrb	r3, [r3, #9]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	4b1a      	ldr	r3, [pc, #104]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e02:	2100      	movs	r1, #0
 8009e04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e06:	4b19      	ldr	r3, [pc, #100]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e08:	7a5b      	ldrb	r3, [r3, #9]
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	4a17      	ldr	r2, [pc, #92]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e16:	4b15      	ldr	r3, [pc, #84]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e18:	7a5b      	ldrb	r3, [r3, #9]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4b13      	ldr	r3, [pc, #76]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e20:	4413      	add	r3, r2
 8009e22:	79fa      	ldrb	r2, [r7, #7]
 8009e24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e26:	4b11      	ldr	r3, [pc, #68]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e28:	7a5b      	ldrb	r3, [r3, #9]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	b2d1      	uxtb	r1, r2
 8009e30:	4a0e      	ldr	r2, [pc, #56]	@ (8009e6c <FATFS_LinkDriverEx+0x94>)
 8009e32:	7251      	strb	r1, [r2, #9]
 8009e34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e36:	7dbb      	ldrb	r3, [r7, #22]
 8009e38:	3330      	adds	r3, #48	@ 0x30
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	3301      	adds	r3, #1
 8009e44:	223a      	movs	r2, #58	@ 0x3a
 8009e46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	3302      	adds	r3, #2
 8009e4c:	222f      	movs	r2, #47	@ 0x2f
 8009e4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	3303      	adds	r3, #3
 8009e54:	2200      	movs	r2, #0
 8009e56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20002564 	.word	0x20002564

08009e70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff ffaa 	bl	8009dd8 <FATFS_LinkDriverEx>
 8009e84:	4603      	mov	r3, r0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	6039      	str	r1, [r7, #0]
 8009e9a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ea0:	d802      	bhi.n	8009ea8 <ff_convert+0x18>
		c = chr;
 8009ea2:	88fb      	ldrh	r3, [r7, #6]
 8009ea4:	81fb      	strh	r3, [r7, #14]
 8009ea6:	e025      	b.n	8009ef4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	2bff      	cmp	r3, #255	@ 0xff
 8009eb2:	d805      	bhi.n	8009ec0 <ff_convert+0x30>
 8009eb4:	88fb      	ldrh	r3, [r7, #6]
 8009eb6:	3b80      	subs	r3, #128	@ 0x80
 8009eb8:	4a12      	ldr	r2, [pc, #72]	@ (8009f04 <ff_convert+0x74>)
 8009eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ebe:	e000      	b.n	8009ec2 <ff_convert+0x32>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	81fb      	strh	r3, [r7, #14]
 8009ec4:	e016      	b.n	8009ef4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	81fb      	strh	r3, [r7, #14]
 8009eca:	e009      	b.n	8009ee0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009ecc:	89fb      	ldrh	r3, [r7, #14]
 8009ece:	4a0d      	ldr	r2, [pc, #52]	@ (8009f04 <ff_convert+0x74>)
 8009ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed4:	88fa      	ldrh	r2, [r7, #6]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d006      	beq.n	8009ee8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009eda:	89fb      	ldrh	r3, [r7, #14]
 8009edc:	3301      	adds	r3, #1
 8009ede:	81fb      	strh	r3, [r7, #14]
 8009ee0:	89fb      	ldrh	r3, [r7, #14]
 8009ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ee4:	d9f2      	bls.n	8009ecc <ff_convert+0x3c>
 8009ee6:	e000      	b.n	8009eea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009ee8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009eea:	89fb      	ldrh	r3, [r7, #14]
 8009eec:	3380      	adds	r3, #128	@ 0x80
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009ef4:	89fb      	ldrh	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	0800a1b4 	.word	0x0800a1b4

08009f08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f18:	d201      	bcs.n	8009f1e <ff_wtoupper+0x16>
 8009f1a:	4b3e      	ldr	r3, [pc, #248]	@ (800a014 <ff_wtoupper+0x10c>)
 8009f1c:	e000      	b.n	8009f20 <ff_wtoupper+0x18>
 8009f1e:	4b3e      	ldr	r3, [pc, #248]	@ (800a018 <ff_wtoupper+0x110>)
 8009f20:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	1c9a      	adds	r2, r3, #2
 8009f26:	617a      	str	r2, [r7, #20]
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009f2c:	8a7b      	ldrh	r3, [r7, #18]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d068      	beq.n	800a004 <ff_wtoupper+0xfc>
 8009f32:	88fa      	ldrh	r2, [r7, #6]
 8009f34:	8a7b      	ldrh	r3, [r7, #18]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d364      	bcc.n	800a004 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	1c9a      	adds	r2, r3, #2
 8009f3e:	617a      	str	r2, [r7, #20]
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	823b      	strh	r3, [r7, #16]
 8009f44:	8a3b      	ldrh	r3, [r7, #16]
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	81fb      	strh	r3, [r7, #14]
 8009f4a:	8a3b      	ldrh	r3, [r7, #16]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009f50:	88fa      	ldrh	r2, [r7, #6]
 8009f52:	8a79      	ldrh	r1, [r7, #18]
 8009f54:	8a3b      	ldrh	r3, [r7, #16]
 8009f56:	440b      	add	r3, r1
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	da49      	bge.n	8009ff0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009f5c:	89fb      	ldrh	r3, [r7, #14]
 8009f5e:	2b08      	cmp	r3, #8
 8009f60:	d84f      	bhi.n	800a002 <ff_wtoupper+0xfa>
 8009f62:	a201      	add	r2, pc, #4	@ (adr r2, 8009f68 <ff_wtoupper+0x60>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	08009f8d 	.word	0x08009f8d
 8009f6c:	08009f9f 	.word	0x08009f9f
 8009f70:	08009fb5 	.word	0x08009fb5
 8009f74:	08009fbd 	.word	0x08009fbd
 8009f78:	08009fc5 	.word	0x08009fc5
 8009f7c:	08009fcd 	.word	0x08009fcd
 8009f80:	08009fd5 	.word	0x08009fd5
 8009f84:	08009fdd 	.word	0x08009fdd
 8009f88:	08009fe5 	.word	0x08009fe5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009f8c:	88fa      	ldrh	r2, [r7, #6]
 8009f8e:	8a7b      	ldrh	r3, [r7, #18]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4413      	add	r3, r2
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	80fb      	strh	r3, [r7, #6]
 8009f9c:	e027      	b.n	8009fee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	8a7b      	ldrh	r3, [r7, #18]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	88fa      	ldrh	r2, [r7, #6]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	80fb      	strh	r3, [r7, #6]
 8009fb2:	e01c      	b.n	8009fee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009fb4:	88fb      	ldrh	r3, [r7, #6]
 8009fb6:	3b10      	subs	r3, #16
 8009fb8:	80fb      	strh	r3, [r7, #6]
 8009fba:	e018      	b.n	8009fee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009fbc:	88fb      	ldrh	r3, [r7, #6]
 8009fbe:	3b20      	subs	r3, #32
 8009fc0:	80fb      	strh	r3, [r7, #6]
 8009fc2:	e014      	b.n	8009fee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009fc4:	88fb      	ldrh	r3, [r7, #6]
 8009fc6:	3b30      	subs	r3, #48	@ 0x30
 8009fc8:	80fb      	strh	r3, [r7, #6]
 8009fca:	e010      	b.n	8009fee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	3b1a      	subs	r3, #26
 8009fd0:	80fb      	strh	r3, [r7, #6]
 8009fd2:	e00c      	b.n	8009fee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009fd4:	88fb      	ldrh	r3, [r7, #6]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	80fb      	strh	r3, [r7, #6]
 8009fda:	e008      	b.n	8009fee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009fdc:	88fb      	ldrh	r3, [r7, #6]
 8009fde:	3b50      	subs	r3, #80	@ 0x50
 8009fe0:	80fb      	strh	r3, [r7, #6]
 8009fe2:	e004      	b.n	8009fee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009fea:	80fb      	strh	r3, [r7, #6]
 8009fec:	bf00      	nop
			}
			break;
 8009fee:	e008      	b.n	800a002 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009ff0:	89fb      	ldrh	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d195      	bne.n	8009f22 <ff_wtoupper+0x1a>
 8009ff6:	8a3b      	ldrh	r3, [r7, #16]
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a000:	e78f      	b.n	8009f22 <ff_wtoupper+0x1a>
			break;
 800a002:	bf00      	nop
	}

	return chr;
 800a004:	88fb      	ldrh	r3, [r7, #6]
}
 800a006:	4618      	mov	r0, r3
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	0800a2b4 	.word	0x0800a2b4
 800a018:	0800a4a8 	.word	0x0800a4a8

0800a01c <memset>:
 800a01c:	4402      	add	r2, r0
 800a01e:	4603      	mov	r3, r0
 800a020:	4293      	cmp	r3, r2
 800a022:	d100      	bne.n	800a026 <memset+0xa>
 800a024:	4770      	bx	lr
 800a026:	f803 1b01 	strb.w	r1, [r3], #1
 800a02a:	e7f9      	b.n	800a020 <memset+0x4>

0800a02c <__libc_init_array>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	4d0d      	ldr	r5, [pc, #52]	@ (800a064 <__libc_init_array+0x38>)
 800a030:	4c0d      	ldr	r4, [pc, #52]	@ (800a068 <__libc_init_array+0x3c>)
 800a032:	1b64      	subs	r4, r4, r5
 800a034:	10a4      	asrs	r4, r4, #2
 800a036:	2600      	movs	r6, #0
 800a038:	42a6      	cmp	r6, r4
 800a03a:	d109      	bne.n	800a050 <__libc_init_array+0x24>
 800a03c:	4d0b      	ldr	r5, [pc, #44]	@ (800a06c <__libc_init_array+0x40>)
 800a03e:	4c0c      	ldr	r4, [pc, #48]	@ (800a070 <__libc_init_array+0x44>)
 800a040:	f000 f818 	bl	800a074 <_init>
 800a044:	1b64      	subs	r4, r4, r5
 800a046:	10a4      	asrs	r4, r4, #2
 800a048:	2600      	movs	r6, #0
 800a04a:	42a6      	cmp	r6, r4
 800a04c:	d105      	bne.n	800a05a <__libc_init_array+0x2e>
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	f855 3b04 	ldr.w	r3, [r5], #4
 800a054:	4798      	blx	r3
 800a056:	3601      	adds	r6, #1
 800a058:	e7ee      	b.n	800a038 <__libc_init_array+0xc>
 800a05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05e:	4798      	blx	r3
 800a060:	3601      	adds	r6, #1
 800a062:	e7f2      	b.n	800a04a <__libc_init_array+0x1e>
 800a064:	0800a56c 	.word	0x0800a56c
 800a068:	0800a56c 	.word	0x0800a56c
 800a06c:	0800a56c 	.word	0x0800a56c
 800a070:	0800a570 	.word	0x0800a570

0800a074 <_init>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	bf00      	nop
 800a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07a:	bc08      	pop	{r3}
 800a07c:	469e      	mov	lr, r3
 800a07e:	4770      	bx	lr

0800a080 <_fini>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	bf00      	nop
 800a084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a086:	bc08      	pop	{r3}
 800a088:	469e      	mov	lr, r3
 800a08a:	4770      	bx	lr
