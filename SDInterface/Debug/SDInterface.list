
SDInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007784  08007784  00008784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d4  080078d4  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080078d4  080078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078dc  080078dc  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078dc  080078dc  000088dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080078e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  2000000c  080078f0  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000614  080078f0  00009614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d403  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002787  00000000  00000000  0001643f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00018bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fa  00000000  00000000  000197c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c93  00000000  00000000  0001a0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fc6  00000000  00000000  0003ad55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdc41  00000000  00000000  0004bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010995c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f94  00000000  00000000  001099a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0010c934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800776c 	.word	0x0800776c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800776c 	.word	0x0800776c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800050a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb56 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f848 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8fa 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8d0 	bl	80006bc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800051c:	f000 f8ac 	bl	8000678 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000520:	f004 f8b4 	bl	800468c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8000524:	2200      	movs	r2, #0
 8000526:	491a      	ldr	r1, [pc, #104]	@ (8000590 <main+0x8c>)
 8000528:	481a      	ldr	r0, [pc, #104]	@ (8000594 <main+0x90>)
 800052a:	f006 f84d 	bl	80065c8 <f_mount>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <main+0x36>
  {
      Error_Handler();
 8000534:	f000 f962 	bl	80007fc <Error_Handler>
 8000538:	e022      	b.n	8000580 <main+0x7c>
  }
  else
  {
      if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	2107      	movs	r1, #7
 8000546:	4812      	ldr	r0, [pc, #72]	@ (8000590 <main+0x8c>)
 8000548:	f006 fc5c 	bl	8006e04 <f_mkfs>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d002      	beq.n	8000558 <main+0x54>
      {
          Error_Handler();
 8000552:	f000 f953 	bl	80007fc <Error_Handler>
 8000556:	e013      	b.n	8000580 <main+0x7c>
      }
      else
      {
    	  writeToFile("Speed, Temp, Current, Voltage\n", "readings.csv");
 8000558:	490f      	ldr	r1, [pc, #60]	@ (8000598 <main+0x94>)
 800055a:	4810      	ldr	r0, [pc, #64]	@ (800059c <main+0x98>)
 800055c:	f000 f920 	bl	80007a0 <writeToFile>
    	  writeToFile("34, 43, 16, 14\n", "readings.csv");
 8000560:	490d      	ldr	r1, [pc, #52]	@ (8000598 <main+0x94>)
 8000562:	480f      	ldr	r0, [pc, #60]	@ (80005a0 <main+0x9c>)
 8000564:	f000 f91c 	bl	80007a0 <writeToFile>
    	  writeToFile("34, 43, 16, 14\n", "readings.csv");
 8000568:	490b      	ldr	r1, [pc, #44]	@ (8000598 <main+0x94>)
 800056a:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <main+0x9c>)
 800056c:	f000 f918 	bl	80007a0 <writeToFile>
    	  writeToFile("34, 43, 16, 14\n", "readings.csv");
 8000570:	4909      	ldr	r1, [pc, #36]	@ (8000598 <main+0x94>)
 8000572:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <main+0x9c>)
 8000574:	f000 f914 	bl	80007a0 <writeToFile>
    	  writeToFile("34, 43, 16, 14\n", "readings.csv");
 8000578:	4907      	ldr	r1, [pc, #28]	@ (8000598 <main+0x94>)
 800057a:	4809      	ldr	r0, [pc, #36]	@ (80005a0 <main+0x9c>)
 800057c:	f000 f910 	bl	80007a0 <writeToFile>
      }
  }
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <main+0x90>)
 8000586:	f006 f81f 	bl	80065c8 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058a:	bf00      	nop
 800058c:	e7fd      	b.n	800058a <main+0x86>
 800058e:	bf00      	nop
 8000590:	20000174 	.word	0x20000174
 8000594:	20000178 	.word	0x20000178
 8000598:	08007784 	.word	0x08007784
 800059c:	08007794 	.word	0x08007794
 80005a0:	080077b4 	.word	0x080077b4

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	@ 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f007 f8ad 	bl	8007712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000618:	2332      	movs	r3, #50	@ 0x32
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fd19 	bl	8002064 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 f8e0 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f98a 	bl	8001970 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f8cb 	bl	80007fc <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <MX_SDIO_SD_Init+0x40>)
 8000680:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 8000696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800069a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006a2:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <MX_SDIO_SD_Init+0x3c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000028 	.word	0x20000028
 80006b8:	40012c00 	.word	0x40012c00

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_DMA_Init+0x4c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <MX_DMA_Init+0x4c>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_DMA_Init+0x4c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	203b      	movs	r0, #59	@ 0x3b
 80006e4:	f000 fbdb 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006e8:	203b      	movs	r0, #59	@ 0x3b
 80006ea:	f000 fbf4 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2045      	movs	r0, #69	@ 0x45
 80006f4:	f000 fbd3 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006f8:	2045      	movs	r0, #69	@ 0x45
 80006fa:	f000 fbec 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <MX_GPIO_Init+0x8c>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <MX_GPIO_Init+0x8c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_GPIO_Init+0x8c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x90>)
 800078c:	f000 ff5c 	bl	8001648 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800

080007a0 <writeToFile>:

/* USER CODE BEGIN 4 */
void writeToFile (const char* text, const char* filename)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	uint32_t byteswritten;
    //Open file for writing (Create)
     if(f_open(&SDFile, filename, FA_OPEN_APPEND | FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80007aa:	223a      	movs	r2, #58	@ 0x3a
 80007ac:	6839      	ldr	r1, [r7, #0]
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <writeToFile+0x58>)
 80007b0:	f005 ff50 	bl	8006654 <f_open>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <writeToFile+0x20>
     {
         Error_Handler();
 80007ba:	f000 f81f 	bl	80007fc <Error_Handler>
         else
         {
             f_close(&SDFile);
         }
     }
}
 80007be:	e017      	b.n	80007f0 <writeToFile+0x50>
         res = f_write(&SDFile, text, strlen(text), (void *)&byteswritten);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fd1f 	bl	8000204 <strlen>
 80007c6:	4602      	mov	r2, r0
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <writeToFile+0x58>)
 80007d0:	f006 f8fa 	bl	80069c8 <f_write>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
         if((byteswritten == 0) || (res != FR_OK))
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <writeToFile+0x44>
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <writeToFile+0x4a>
             Error_Handler();
 80007e4:	f000 f80a 	bl	80007fc <Error_Handler>
}
 80007e8:	e002      	b.n	80007f0 <writeToFile+0x50>
             f_close(&SDFile);
 80007ea:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <writeToFile+0x58>)
 80007ec:	f006 fadf 	bl	8006dae <f_close>
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200003a8 	.word	0x200003a8

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081c:	6453      	str	r3, [r2, #68]	@ 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	@ 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09a      	sub	sp, #104	@ 0x68
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	223c      	movs	r2, #60	@ 0x3c
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f006 ff4a 	bl	8007712 <memset>
  if(hsd->Instance==SDIO)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a80      	ldr	r2, [pc, #512]	@ (8000a84 <HAL_SD_MspInit+0x22c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	f040 80f9 	bne.w	8000a7c <HAL_SD_MspInit+0x224>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800088a:	2360      	movs	r3, #96	@ 0x60
 800088c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800088e:	2300      	movs	r3, #0
 8000890:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fa14 	bl	8001cc8 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80008a6:	f7ff ffa9 	bl	80007fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b76      	ldr	r3, [pc, #472]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a75      	ldr	r2, [pc, #468]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b73      	ldr	r3, [pc, #460]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b6f      	ldr	r3, [pc, #444]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a6e      	ldr	r2, [pc, #440]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b68      	ldr	r3, [pc, #416]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a67      	ldr	r2, [pc, #412]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b65      	ldr	r3, [pc, #404]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b61      	ldr	r3, [pc, #388]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a60      	ldr	r2, [pc, #384]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a88 <HAL_SD_MspInit+0x230>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800091a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800091e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800092c:	230c      	movs	r3, #12
 800092e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000934:	4619      	mov	r1, r3
 8000936:	4855      	ldr	r0, [pc, #340]	@ (8000a8c <HAL_SD_MspInit+0x234>)
 8000938:	f000 fe86 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800093c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000940:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800094e:	230c      	movs	r3, #12
 8000950:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000956:	4619      	mov	r1, r3
 8000958:	484d      	ldr	r0, [pc, #308]	@ (8000a90 <HAL_SD_MspInit+0x238>)
 800095a:	f000 fe75 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800095e:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8000962:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000970:	230c      	movs	r3, #12
 8000972:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000978:	4619      	mov	r1, r3
 800097a:	4846      	ldr	r0, [pc, #280]	@ (8000a94 <HAL_SD_MspInit+0x23c>)
 800097c:	f000 fe64 	bl	8001648 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000980:	4b45      	ldr	r3, [pc, #276]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 8000982:	4a46      	ldr	r2, [pc, #280]	@ (8000a9c <HAL_SD_MspInit+0x244>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000986:	4b44      	ldr	r3, [pc, #272]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 8000988:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800098c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098e:	4b42      	ldr	r3, [pc, #264]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b40      	ldr	r3, [pc, #256]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 800099c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009a8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80009b2:	4b39      	ldr	r3, [pc, #228]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009b4:	2220      	movs	r2, #32
 80009b6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009b8:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009be:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009c4:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80009ca:	4b33      	ldr	r3, [pc, #204]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80009d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80009da:	482f      	ldr	r0, [pc, #188]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009dc:	f000 fa96 	bl	8000f0c <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_SD_MspInit+0x192>
    {
      Error_Handler();
 80009e6:	f7ff ff09 	bl	80007fc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80009f0:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <HAL_SD_MspInit+0x240>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 80009f8:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa4 <HAL_SD_MspInit+0x24c>)
 80009fa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 80009fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a04:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a06:	2240      	movs	r2, #64	@ 0x40
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a10:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a16:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a26:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a4a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a4e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a52:	f000 fa5b 	bl	8000f0c <HAL_DMA_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_SD_MspInit+0x208>
    {
      Error_Handler();
 8000a5c:	f7ff fece 	bl	80007fc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_SD_MspInit+0x248>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2031      	movs	r0, #49	@ 0x31
 8000a72:	f000 fa14 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a76:	2031      	movs	r0, #49	@ 0x31
 8000a78:	f000 fa2d 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3768      	adds	r7, #104	@ 0x68
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40020800 	.word	0x40020800
 8000a98:	200000ac 	.word	0x200000ac
 8000a9c:	40026458 	.word	0x40026458
 8000aa0:	2000010c 	.word	0x2000010c
 8000aa4:	400264a0 	.word	0x400264a0

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8af 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <SDIO_IRQHandler+0x10>)
 8000b0e:	f001 ff9f 	bl	8002a50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000028 	.word	0x20000028

08000b1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <DMA2_Stream3_IRQHandler+0x10>)
 8000b22:	f000 fb1b 	bl	800115c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000ac 	.word	0x200000ac

08000b30 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <DMA2_Stream6_IRQHandler+0x10>)
 8000b36:	f000 fb11 	bl	800115c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000010c 	.word	0x2000010c

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b96:	f006 fdc5 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fcb3 	bl	8000504 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ba0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	080078e4 	.word	0x080078e4
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	20000614 	.word	0x20000614

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f94f 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe0a 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f967 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f92f 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	2000016c 	.word	0x2000016c

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	2000016c 	.word	0x2000016c

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffde 	bl	8000c88 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff feb6 	bl	8000c88 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e099      	b.n	800105c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f48:	e00f      	b.n	8000f6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4a:	f7ff fe9d 	bl	8000c88 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d908      	bls.n	8000f6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e078      	b.n	800105c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e8      	bne.n	8000f4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <HAL_DMA_Init+0x158>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d107      	bne.n	8000fd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f023 0307 	bic.w	r3, r3, #7
 8000fea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d117      	bne.n	800102e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 fa9d 	bl	8001550 <DMA_CheckFifoParam>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2240      	movs	r2, #64	@ 0x40
 8001020:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800102a:	2301      	movs	r3, #1
 800102c:	e016      	b.n	800105c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fa54 	bl	80014e4 <DMA_CalcBaseAndBitshift>
 800103c:	4603      	mov	r3, r0
 800103e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001044:	223f      	movs	r2, #63	@ 0x3f
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	f010803f 	.word	0xf010803f

08001068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_DMA_Start_IT+0x26>
 800108a:	2302      	movs	r3, #2
 800108c:	e040      	b.n	8001110 <HAL_DMA_Start_IT+0xa8>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12f      	bne.n	8001102 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2202      	movs	r2, #2
 80010a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f9e6 	bl	8001488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c0:	223f      	movs	r2, #63	@ 0x3f
 80010c2:	409a      	lsls	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0216 	orr.w	r2, r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0208 	orr.w	r2, r2, #8
 80010ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e005      	b.n	800110e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800110a:	2302      	movs	r3, #2
 800110c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d004      	beq.n	8001136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2280      	movs	r2, #128	@ 0x80
 8001130:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00c      	b.n	8001150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2205      	movs	r2, #5
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001168:	4b8e      	ldr	r3, [pc, #568]	@ (80013a4 <HAL_DMA_IRQHandler+0x248>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a8e      	ldr	r2, [pc, #568]	@ (80013a8 <HAL_DMA_IRQHandler+0x24c>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0a9b      	lsrs	r3, r3, #10
 8001174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001186:	2208      	movs	r2, #8
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01a      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b4:	2208      	movs	r2, #8
 80011b6:	409a      	lsls	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011cc:	2201      	movs	r2, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ea:	2201      	movs	r2, #1
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f6:	f043 0202 	orr.w	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001202:	2204      	movs	r2, #4
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d012      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001220:	2204      	movs	r2, #4
 8001222:	409a      	lsls	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800122c:	f043 0204 	orr.w	r2, r3, #4
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001238:	2210      	movs	r2, #16
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d043      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03c      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001256:	2210      	movs	r2, #16
 8001258:	409a      	lsls	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d018      	beq.n	800129e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d024      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
 800128a:	e01f      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01b      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	e016      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d0:	2220      	movs	r2, #32
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 808f 	beq.w	80013fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8087 	beq.w	80013fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f2:	2220      	movs	r2, #32
 80012f4:	409a      	lsls	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d136      	bne.n	8001374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0216 	bic.w	r2, r2, #22
 8001314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HAL_DMA_IRQHandler+0x1da>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0208 	bic.w	r2, r2, #8
 8001344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800134a:	223f      	movs	r2, #63	@ 0x3f
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	d07e      	beq.n	8001468 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
        }
        return;
 8001372:	e079      	b.n	8001468 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10d      	bne.n	80013ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001394:	2b00      	cmp	r3, #0
 8001396:	d031      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	e02c      	b.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d023      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
 80013bc:	e01e      	b.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10f      	bne.n	80013ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0210 	bic.w	r2, r2, #16
 80013da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001400:	2b00      	cmp	r3, #0
 8001402:	d032      	beq.n	800146a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d022      	beq.n	8001456 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2205      	movs	r2, #5
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	d307      	bcc.n	8001444 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_DMA_IRQHandler+0x2cc>
 8001442:	e000      	b.n	8001446 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001444:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
 8001466:	e000      	b.n	800146a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001468:	bf00      	nop
    }
  }
}
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80014a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b40      	cmp	r3, #64	@ 0x40
 80014b4:	d108      	bne.n	80014c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014c6:	e007      	b.n	80014d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3b10      	subs	r3, #16
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <DMA_CalcBaseAndBitshift+0x64>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <DMA_CalcBaseAndBitshift+0x68>)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d909      	bls.n	8001526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	1d1a      	adds	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	659a      	str	r2, [r3, #88]	@ 0x58
 8001524:	e007      	b.n	8001536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	aaaaaaab 	.word	0xaaaaaaab
 800154c:	08007818 	.word	0x08007818

08001550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11f      	bne.n	80015aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d856      	bhi.n	800161e <DMA_CheckFifoParam+0xce>
 8001570:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <DMA_CheckFifoParam+0x28>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001589 	.word	0x08001589
 800157c:	0800159b 	.word	0x0800159b
 8001580:	08001589 	.word	0x08001589
 8001584:	0800161f 	.word	0x0800161f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d046      	beq.n	8001622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001598:	e043      	b.n	8001622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015a2:	d140      	bne.n	8001626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a8:	e03d      	b.n	8001626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015b2:	d121      	bne.n	80015f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d837      	bhi.n	800162a <DMA_CheckFifoParam+0xda>
 80015ba:	a201      	add	r2, pc, #4	@ (adr r2, 80015c0 <DMA_CheckFifoParam+0x70>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015d7 	.word	0x080015d7
 80015c8:	080015d1 	.word	0x080015d1
 80015cc:	080015e9 	.word	0x080015e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
      break;
 80015d4:	e030      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d025      	beq.n	800162e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015e6:	e022      	b.n	800162e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015f0:	d11f      	bne.n	8001632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015f6:	e01c      	b.n	8001632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d903      	bls.n	8001606 <DMA_CheckFifoParam+0xb6>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d003      	beq.n	800160c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001604:	e018      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      break;
 800160a:	e015      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
      break;
 800161c:	e00b      	b.n	8001636 <DMA_CheckFifoParam+0xe6>
      break;
 800161e:	bf00      	nop
 8001620:	e00a      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 8001622:	bf00      	nop
 8001624:	e008      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
 8001628:	e006      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 800162a:	bf00      	nop
 800162c:	e004      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
 8001630:	e002      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;   
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 8001636:	bf00      	nop
    }
  } 
  
  return status; 
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e153      	b.n	800190c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8142 	bne.w	8001906 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 809c 	beq.w	8001906 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b54      	ldr	r3, [pc, #336]	@ (8001924 <HAL_GPIO_Init+0x2dc>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a53      	ldr	r2, [pc, #332]	@ (8001924 <HAL_GPIO_Init+0x2dc>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b51      	ldr	r3, [pc, #324]	@ (8001924 <HAL_GPIO_Init+0x2dc>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001928 <HAL_GPIO_Init+0x2e0>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a46      	ldr	r2, [pc, #280]	@ (800192c <HAL_GPIO_Init+0x2e4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x1f6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a45      	ldr	r2, [pc, #276]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x1f2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a44      	ldr	r2, [pc, #272]	@ (8001934 <HAL_GPIO_Init+0x2ec>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x1ee>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a43      	ldr	r2, [pc, #268]	@ (8001938 <HAL_GPIO_Init+0x2f0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x1ea>
 800182e:	2303      	movs	r3, #3
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x1f8>
 8001832:	2307      	movs	r3, #7
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x1f8>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x1f8>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x1f8>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	@ (8001928 <HAL_GPIO_Init+0x2e0>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b37      	ldr	r3, [pc, #220]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a2e      	ldr	r2, [pc, #184]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d6:	4a19      	ldr	r2, [pc, #100]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001900:	4a0e      	ldr	r2, [pc, #56]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f aea8 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0cc      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b68      	ldr	r3, [pc, #416]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d90c      	bls.n	80019ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b65      	ldr	r3, [pc, #404]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a58      	ldr	r2, [pc, #352]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a52      	ldr	r2, [pc, #328]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d044      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d119      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e067      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b37      	ldr	r3, [pc, #220]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4934      	ldr	r1, [pc, #208]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff f912 	bl	8000c88 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f90e 	bl	8000c88 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e04f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d20c      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f872 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08007808 	.word	0x08007808
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b090      	sub	sp, #64	@ 0x40
 8001b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b54:	4b59      	ldr	r3, [pc, #356]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d00d      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x40>
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	f200 80a1 	bhi.w	8001ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6e:	e09b      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b74:	e09b      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b76:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b7a:	e098      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b86:	4b4d      	ldr	r3, [pc, #308]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d028      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba8:	fb03 f201 	mul.w	r2, r3, r1
 8001bac:	2300      	movs	r3, #0
 8001bae:	fb00 f303 	mul.w	r3, r0, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a43      	ldr	r2, [pc, #268]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bc2:	4413      	add	r3, r2
 8001bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	61fa      	str	r2, [r7, #28]
 8001bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bd6:	f7fe fb1d 	bl	8000214 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4613      	mov	r3, r2
 8001be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001be2:	e053      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	617a      	str	r2, [r7, #20]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bf6:	f04f 0b00 	mov.w	fp, #0
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	465b      	mov	r3, fp
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0159      	lsls	r1, r3, #5
 8001c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0c:	0150      	lsls	r0, r2, #5
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	ebb2 080a 	subs.w	r8, r2, sl
 8001c16:	eb63 090b 	sbc.w	r9, r3, fp
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c32:	eb63 0509 	sbc.w	r5, r3, r9
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	00eb      	lsls	r3, r5, #3
 8001c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c44:	00e2      	lsls	r2, r4, #3
 8001c46:	4614      	mov	r4, r2
 8001c48:	461d      	mov	r5, r3
 8001c4a:	eb14 030a 	adds.w	r3, r4, sl
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	eb45 030b 	adc.w	r3, r5, fp
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c62:	4629      	mov	r1, r5
 8001c64:	028b      	lsls	r3, r1, #10
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	028a      	lsls	r2, r1, #10
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c76:	2200      	movs	r2, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c80:	f7fe fac8 	bl	8000214 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	3301      	adds	r3, #1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3740      	adds	r7, #64	@ 0x40
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	017d7840 	.word	0x017d7840

08001cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ce8:	4b87      	ldr	r3, [pc, #540]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cee:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	4984      	ldr	r1, [pc, #528]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d16:	4b7c      	ldr	r3, [pc, #496]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d1c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4978      	ldr	r1, [pc, #480]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001d34:	2301      	movs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8083 	beq.w	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d62:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a69      	ldr	r2, [pc, #420]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe ff8b 	bl	8000c88 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe ff87 	bl	8000c88 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e162      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001d88:	4b60      	ldr	r3, [pc, #384]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d94:	4b5c      	ldr	r3, [pc, #368]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9c:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02f      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d028      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001db2:	4b55      	ldr	r3, [pc, #340]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dba:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dbc:	4b54      	ldr	r3, [pc, #336]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc2:	4b53      	ldr	r3, [pc, #332]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dce:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d114      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe ff55 	bl	8000c88 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ff51 	bl	8000c88 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e12a      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e10:	d10d      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e12:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e26:	4938      	ldr	r1, [pc, #224]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
 8001e2c:	e005      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001e2e:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a35      	ldr	r2, [pc, #212]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e34:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e38:	6093      	str	r3, [r2, #8]
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	4930      	ldr	r1, [pc, #192]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e60:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	4922      	ldr	r1, [pc, #136]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d011      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e96:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9e:	491a      	ldr	r1, [pc, #104]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d004      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b80      	cmp	r3, #128	@ 0x80
 8001ee2:	f040 8091 	bne.w	8002008 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fecc 	bl	8000c88 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ef2:	e013      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ef4:	f7fe fec8 	bl	8000c88 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d90c      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0a3      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42470e40 	.word	0x42470e40
 8001f14:	424711e0 	.word	0x424711e0
 8001f18:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e5      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001f28:	4a4c      	ldr	r2, [pc, #304]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d023      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d019      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f6c:	d00e      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d019      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f8a:	d110      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	071b      	lsls	r3, r3, #28
 8001fa6:	492c      	ldr	r1, [pc, #176]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	061b      	lsls	r3, r3, #24
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	071b      	lsls	r3, r3, #28
 8001fd4:	4920      	ldr	r1, [pc, #128]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fdc:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fe2:	f7fe fe51 	bl	8000c88 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fea:	f7fe fe4d 	bl	8000c88 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e028      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002014:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	490d      	ldr	r1, [pc, #52]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800203c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	4904      	ldr	r1, [pc, #16]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	424710d8 	.word	0x424710d8
 8002060:	42470068 	.word	0x42470068

08002064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e273      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d075      	beq.n	800216e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002082:	4b88      	ldr	r3, [pc, #544]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d00c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4b85      	ldr	r3, [pc, #532]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
        || \
 8002096:	2b08      	cmp	r3, #8
 8002098:	d112      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b82      	ldr	r3, [pc, #520]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	4b7e      	ldr	r3, [pc, #504]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05b      	beq.n	800216c <HAL_RCC_OscConfig+0x108>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d157      	bne.n	800216c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e24e      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_OscConfig+0x74>
 80020ca:	4b76      	ldr	r3, [pc, #472]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a75      	ldr	r2, [pc, #468]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b70      	ldr	r3, [pc, #448]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6f      	ldr	r2, [pc, #444]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b6d      	ldr	r3, [pc, #436]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6c      	ldr	r2, [pc, #432]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020fc:	4b69      	ldr	r3, [pc, #420]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a68      	ldr	r2, [pc, #416]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a65      	ldr	r2, [pc, #404]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fdb4 	bl	8000c88 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe fdb0 	bl	8000c88 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e213      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5b      	ldr	r3, [pc, #364]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xc0>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fda0 	bl	8000c88 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe fd9c 	bl	8000c88 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1ff      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0xe8>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800217a:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b47      	ldr	r3, [pc, #284]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
        || \
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b44      	ldr	r3, [pc, #272]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1d3      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4937      	ldr	r1, [pc, #220]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_RCC_OscConfig+0x244>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fd55 	bl	8000c88 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7fe fd51 	bl	8000c88 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1b4      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <HAL_RCC_OscConfig+0x244>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fd34 	bl	8000c88 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002224:	f7fe fd30 	bl	8000c88 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e193      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d036      	beq.n	80022bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_RCC_OscConfig+0x248>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7fe fd14 	bl	8000c88 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fd10 	bl	8000c88 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e173      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x200>
 8002282:	e01b      	b.n	80022bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x248>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe fcfd 	bl	8000c88 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e00e      	b.n	80022b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7fe fcf9 	bl	8000c88 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d907      	bls.n	80022b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e15c      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470000 	.word	0x42470000
 80022ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	4b8a      	ldr	r3, [pc, #552]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80022b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ea      	bne.n	8002292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8097 	beq.w	80023f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b83      	ldr	r3, [pc, #524]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b7f      	ldr	r3, [pc, #508]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a7e      	ldr	r2, [pc, #504]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b7c      	ldr	r3, [pc, #496]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b79      	ldr	r3, [pc, #484]	@ (80024e0 <HAL_RCC_OscConfig+0x47c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b76      	ldr	r3, [pc, #472]	@ (80024e0 <HAL_RCC_OscConfig+0x47c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a75      	ldr	r2, [pc, #468]	@ (80024e0 <HAL_RCC_OscConfig+0x47c>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7fe fcb9 	bl	8000c88 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7fe fcb5 	bl	8000c88 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e118      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b6c      	ldr	r3, [pc, #432]	@ (80024e0 <HAL_RCC_OscConfig+0x47c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x2ea>
 8002340:	4b66      	ldr	r3, [pc, #408]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	4a65      	ldr	r2, [pc, #404]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	@ 0x70
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x30c>
 8002356:	4b61      	ldr	r3, [pc, #388]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235a:	4a60      	ldr	r2, [pc, #384]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6713      	str	r3, [r2, #112]	@ 0x70
 8002362:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	4a5d      	ldr	r2, [pc, #372]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6713      	str	r3, [r2, #112]	@ 0x70
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
 8002370:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	4a59      	ldr	r2, [pc, #356]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6713      	str	r3, [r2, #112]	@ 0x70
 800237c:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	4a56      	ldr	r2, [pc, #344]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe fc7a 	bl	8000c88 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe fc76 	bl	8000c88 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0d7      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ee      	beq.n	8002398 <HAL_RCC_OscConfig+0x334>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe fc64 	bl	8000c88 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe fc60 	bl	8000c88 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0c1      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023da:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ee      	bne.n	80023c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b3b      	ldr	r3, [pc, #236]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	4a3a      	ldr	r2, [pc, #232]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80ad 	beq.w	800255c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002402:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d060      	beq.n	80024d0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d145      	bne.n	80024a2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_RCC_OscConfig+0x480>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fc34 	bl	8000c88 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fc30 	bl	8000c88 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e093      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	019b      	lsls	r3, r3, #6
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	3b01      	subs	r3, #1
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	071b      	lsls	r3, r3, #28
 800246e:	491b      	ldr	r1, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x480>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe fc05 	bl	8000c88 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe fc01 	bl	8000c88 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e064      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x41e>
 80024a0:	e05c      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_OscConfig+0x480>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fbee 	bl	8000c88 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fbea 	bl	8000c88 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04d      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x44c>
 80024ce:	e045      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e040      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_RCC_OscConfig+0x504>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d030      	beq.n	8002558 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d129      	bne.n	8002558 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d122      	bne.n	8002558 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800251e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	4293      	cmp	r3, r2
 8002522:	d119      	bne.n	8002558 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	3b01      	subs	r3, #1
 8002532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d10f      	bne.n	8002558 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e022      	b.n	80025c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fe f961 	bl	8000858 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2203      	movs	r2, #3
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f814 	bl	80025cc <HAL_SD_InitCard>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00a      	b.n	80025c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80025cc:	b5b0      	push	{r4, r5, r7, lr}
 80025ce:	b08e      	sub	sp, #56	@ 0x38
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80025e8:	2376      	movs	r3, #118	@ 0x76
 80025ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681d      	ldr	r5, [r3, #0]
 80025f0:	466c      	mov	r4, sp
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002604:	4628      	mov	r0, r5
 8002606:	f001 face 	bl	8003ba6 <SDIO_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04f      	b.n	80026bc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800261c:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <HAL_SD_InitCard+0xf8>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fb06 	bl	8003c38 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800262c:	4b25      	ldr	r3, [pc, #148]	@ (80026c4 <HAL_SD_InitCard+0xf8>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002632:	2002      	movs	r0, #2
 8002634:	f7fe fb34 	bl	8000ca0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 ffef 	bl	800361c <SD_PowerON>
 800263e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02e      	b.n	80026bc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 ff0e 	bl	8003480 <SD_InitCard>
 8002664:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e01b      	b.n	80026bc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800268c:	4618      	mov	r0, r3
 800268e:	f001 fb65 	bl	8003d5c <SDMMC_CmdBlockLength>
 8002692:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00f      	beq.n	80026ba <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_SD_InitCard+0xfc>)
 80026a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	@ 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	422580a0 	.word	0x422580a0
 80026c8:	004005ff 	.word	0x004005ff

080026cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	@ 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0be      	b.n	8002872 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 80b7 	bne.w	8002870 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	441a      	add	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	429a      	cmp	r2, r3
 8002714:	d907      	bls.n	8002726 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0a5      	b.n	8002872 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8002744:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	4a4c      	ldr	r2, [pc, #304]	@ (800287c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800274c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a4b      	ldr	r2, [pc, #300]	@ (8002880 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002754:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2200      	movs	r2, #0
 800275c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3380      	adds	r3, #128	@ 0x80
 800278c:	4619      	mov	r1, r3
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	f7fe fc67 	bl	8001068 <HAL_DMA_Start_IT>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80027ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a33      	ldr	r2, [pc, #204]	@ (8002884 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e050      	b.n	8002872 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80027d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d002      	beq.n	80027e4 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	025b      	lsls	r3, r3, #9
 80027ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80027f0:	2390      	movs	r3, #144	@ 0x90
 80027f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f107 0210 	add.w	r2, r7, #16
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fa7a 	bl	8003d04 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d90a      	bls.n	800282c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2282      	movs	r2, #130	@ 0x82
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002822:	4618      	mov	r0, r3
 8002824:	f001 fade 	bl	8003de4 <SDMMC_CmdReadMultiBlock>
 8002828:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800282a:	e009      	b.n	8002840 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2281      	movs	r2, #129	@ 0x81
 8002830:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fab1 	bl	8003da0 <SDMMC_CmdReadSingleBlock>
 800283e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a0e      	ldr	r2, [pc, #56]	@ (8002884 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800284c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e002      	b.n	8002872 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3730      	adds	r7, #48	@ 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	0800328f 	.word	0x0800328f
 8002880:	08003301 	.word	0x08003301
 8002884:	004005ff 	.word	0x004005ff
 8002888:	4225858c 	.word	0x4225858c

0800288c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0c1      	b.n	8002a38 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 80ba 	bne.w	8002a36 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	441a      	add	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d907      	bls.n	80028e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0a8      	b.n	8002a38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 021a 	orr.w	r2, r2, #26
 8002904:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a40 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002912:	4a4c      	ldr	r2, [pc, #304]	@ (8002a44 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8002914:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	2200      	movs	r2, #0
 800291c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	2b01      	cmp	r3, #1
 8002924:	d002      	beq.n	800292c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d90a      	bls.n	8002948 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22a0      	movs	r2, #160	@ 0xa0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fa94 	bl	8003e6c <SDMMC_CmdWriteMultiBlock>
 8002944:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002946:	e009      	b.n	800295c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2290      	movs	r2, #144	@ 0x90
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002954:	4618      	mov	r0, r3
 8002956:	f001 fa67 	bl	8003e28 <SDMMC_CmdWriteSingleBlock>
 800295a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800295c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a38      	ldr	r2, [pc, #224]	@ (8002a48 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002968:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e057      	b.n	8002a38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002988:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3380      	adds	r3, #128	@ 0x80
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	f7fe fb4f 	bl	8001068 <HAL_DMA_Start_IT>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01a      	beq.n	8002a06 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 021a 	bic.w	r2, r2, #26
 80029de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a18      	ldr	r2, [pc, #96]	@ (8002a48 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80029e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e018      	b.n	8002a38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	025b      	lsls	r3, r3, #9
 8002a10:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a12:	2390      	movs	r3, #144	@ 0x90
 8002a14:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f107 0210 	add.w	r2, r7, #16
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 f969 	bl	8003d04 <SDIO_ConfigData>

      return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	@ 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08003265 	.word	0x08003265
 8002a44:	08003301 	.word	0x08003301
 8002a48:	004005ff 	.word	0x004005ff
 8002a4c:	4225858c 	.word	0x4225858c

08002a50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_SD_IRQHandler+0x2e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 ffef 	bl	8003a5a <SD_Read_IT>
 8002a7c:	e155      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 808f 	beq.w	8002bac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a96:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8002aa6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8002aaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d039      	beq.n	8002b3a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_SD_IRQHandler+0x8a>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 f9e6 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 8002ae4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f91f 	bl	8002d3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002b06:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_SD_IRQHandler+0xda>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f001 fe54 	bl	80047d8 <HAL_SD_RxCpltCallback>
 8002b30:	e0fb      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f001 fe46 	bl	80047c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b38:	e0f7      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80f2 	beq.w	8002d2a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d011      	beq.n	8002b74 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 f9ab 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 8002b5a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8e4 	bl	8002d3c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80d5 	bne.w	8002d2a <HAL_SD_IRQHandler+0x2da>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80cf 	bne.w	8002d2a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0208 	bic.w	r2, r2, #8
 8002b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f001 fe0d 	bl	80047c4 <HAL_SD_TxCpltCallback>
}
 8002baa:	e0be      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_SD_IRQHandler+0x17c>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 ff99 	bl	8003afc <SD_Write_IT>
 8002bca:	e0ae      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80a7 	beq.w	8002d2a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	f043 0202 	orr.w	r2, r3, #2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	f043 0208 	orr.w	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	f043 0210 	orr.w	r2, r3, #16
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002c4c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f924 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f855 	bl	8002d3c <HAL_SD_ErrorCallback>
}
 8002c92:	e04a      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d045      	beq.n	8002d2a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <HAL_SD_IRQHandler+0x262>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d011      	beq.n	8002cd6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <HAL_SD_IRQHandler+0x2e4>)
 8002cb8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fa2a 	bl	8001118 <HAL_DMA_Abort_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02f      	beq.n	8002d2a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fb68 	bl	80033a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002cd4:	e029      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_SD_IRQHandler+0x29a>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_SD_IRQHandler+0x2e8>)
 8002cf0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fa0e 	bl	8001118 <HAL_DMA_Abort_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fb83 	bl	8003412 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d0c:	e00d      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f001 fd44 	bl	80047b0 <HAL_SD_AbortCallback>
}
 8002d28:	e7ff      	b.n	8002d2a <HAL_SD_IRQHandler+0x2da>
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	080033a5 	.word	0x080033a5
 8002d38:	08003413 	.word	0x08003413

08002d3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d5e:	0f9b      	lsrs	r3, r3, #30
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d7c:	0e1b      	lsrs	r3, r3, #24
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002db0:	0d1b      	lsrs	r3, r3, #20
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dce:	0bdb      	lsrs	r3, r3, #15
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002de0:	0b9b      	lsrs	r3, r3, #14
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002df2:	0b5b      	lsrs	r3, r3, #13
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e04:	0b1b      	lsrs	r3, r3, #12
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d163      	bne.n	8002ee8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e24:	009a      	lsls	r2, r3, #2
 8002e26:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002e30:	0f92      	lsrs	r2, r2, #30
 8002e32:	431a      	orrs	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3c:	0edb      	lsrs	r3, r3, #27
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4e:	0e1b      	lsrs	r3, r3, #24
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e60:	0d5b      	lsrs	r3, r3, #21
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e84:	0bdb      	lsrs	r3, r3, #15
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002eb2:	fb03 f202 	mul.w	r2, r3, r2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	7a1b      	ldrb	r3, [r3, #8]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ed4:	0a52      	lsrs	r2, r2, #9
 8002ed6:	fb03 f202 	mul.w	r2, r3, r2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ee6:	e031      	b.n	8002f4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11d      	bne.n	8002f2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	029a      	lsls	r2, r3, #10
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f20:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f2a:	e00f      	b.n	8002f4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a58      	ldr	r2, [pc, #352]	@ (8003094 <HAL_SD_GetCardCSD+0x344>)
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e09d      	b.n	8003088 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f50:	0b9b      	lsrs	r3, r3, #14
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f62:	09db      	lsrs	r3, r3, #7
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	0fdb      	lsrs	r3, r3, #31
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	0f5b      	lsrs	r3, r3, #29
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	0d9b      	lsrs	r3, r3, #22
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	0d5b      	lsrs	r3, r3, #21
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	0bdb      	lsrs	r3, r3, #15
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	0b9b      	lsrs	r3, r3, #14
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	0b5b      	lsrs	r3, r3, #13
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	0b1b      	lsrs	r3, r3, #12
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	b2da      	uxtb	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	b2da      	uxtb	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003076:	b2da      	uxtb	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	004005ff 	.word	0x004005ff

08003098 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b08e      	sub	sp, #56	@ 0x38
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310c:	2b03      	cmp	r3, #3
 800310e:	d02e      	beq.n	800316e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003116:	d106      	bne.n	8003126 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38
 8003124:	e029      	b.n	800317a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800312c:	d10a      	bne.n	8003144 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fb2a 	bl	8003788 <SD_WideBus_Enable>
 8003134:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38
 8003142:	e01a      	b.n	800317a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fb67 	bl	800381e <SD_WideBus_Disable>
 8003150:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
 800315e:	e00c      	b.n	800317a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38
 800316c:	e005      	b.n	800317a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003188:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003198:	e01f      	b.n	80031da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681d      	ldr	r5, [r3, #0]
 80031c0:	466c      	mov	r4, sp
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 fce6 	bl	8003ba6 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fdba 	bl	8003d5c <SDMMC_CmdBlockLength>
 80031e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00c      	beq.n	800320a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <HAL_SD_ConfigWideBusOperation+0x130>)
 80031f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003216:	4618      	mov	r0, r3
 8003218:	3728      	adds	r7, #40	@ 0x28
 800321a:	46bd      	mov	sp, r7
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
 800321e:	bf00      	nop
 8003220:	004005ff 	.word	0x004005ff

08003224 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa7e 	bl	8003738 <SD_SendStatus>
 800323c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800325a:	693b      	ldr	r3, [r7, #16]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003280:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	2b82      	cmp	r3, #130	@ 0x82
 80032a2:	d111      	bne.n	80032c8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fe01 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 80032ae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fd3a 	bl	8002d3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0208 	bic.w	r2, r2, #8
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f001 fa71 	bl	80047d8 <HAL_SD_RxCpltCallback>
#endif
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe f8ae 	bl	8001470 <HAL_DMA_GetError>
 8003314:	4603      	mov	r3, r0
 8003316:	2b02      	cmp	r3, #2
 8003318:	d03e      	beq.n	8003398 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d002      	beq.n	8003336 <SD_DMAError+0x36>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d12d      	bne.n	8003392 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a19      	ldr	r2, [pc, #100]	@ (80033a0 <SD_DMAError+0xa0>)
 800333c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800334c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff ff62 	bl	8003224 <HAL_SD_GetCardState>
 8003360:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b06      	cmp	r3, #6
 8003366:	d002      	beq.n	800336e <SD_DMAError+0x6e>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b05      	cmp	r3, #5
 800336c:	d10a      	bne.n	8003384 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd9c 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 8003378:	4602      	mov	r2, r0
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337e:	431a      	orrs	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003392:	6978      	ldr	r0, [r7, #20]
 8003394:	f7ff fcd2 	bl	8002d3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003398:	bf00      	nop
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	004005ff 	.word	0x004005ff

080033a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80033ba:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff ff31 	bl	8003224 <HAL_SD_GetCardState>
 80033c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b06      	cmp	r3, #6
 80033d6:	d002      	beq.n	80033de <SD_DMATxAbort+0x3a>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10a      	bne.n	80033f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fd64 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	431a      	orrs	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f001 f9d7 	bl	80047b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003402:	e002      	b.n	800340a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fc99 	bl	8002d3c <HAL_SD_ErrorCallback>
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff fefa 	bl	8003224 <HAL_SD_GetCardState>
 8003430:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d002      	beq.n	800344c <SD_DMARxAbort+0x3a>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10a      	bne.n	8003462 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fd2d 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 8003456:	4602      	mov	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f001 f9a0 	bl	80047b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003470:	e002      	b.n	8003478 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fc62 	bl	8002d3c <HAL_SD_ErrorCallback>
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b094      	sub	sp, #80	@ 0x50
 8003484:	af04      	add	r7, sp, #16
 8003486:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fbdf 	bl	8003c54 <SDIO_GetPowerState>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800349c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80034a0:	e0b8      	b.n	8003614 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d02f      	beq.n	800350a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fe08 	bl	80040c4 <SDMMC_CmdSendCID>
 80034b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034be:	e0a9      	b.n	8003614 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fc09 	bl	8003cde <SDIO_GetResponse>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2104      	movs	r1, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fc00 	bl	8003cde <SDIO_GetResponse>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2108      	movs	r1, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fbf7 	bl	8003cde <SDIO_GetResponse>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	210c      	movs	r1, #12
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fbee 	bl	8003cde <SDIO_GetResponse>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	2b03      	cmp	r3, #3
 8003510:	d00d      	beq.n	800352e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f107 020e 	add.w	r2, r7, #14
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fe0e 	bl	800413e <SDMMC_CmdSetRelAdd>
 8003522:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <SD_InitCard+0xae>
    {
      return errorstate;
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352c:	e072      	b.n	8003614 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	2b03      	cmp	r3, #3
 8003534:	d036      	beq.n	80035a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003536:	89fb      	ldrh	r3, [r7, #14]
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fdd8 	bl	8004100 <SDMMC_CmdSendCSD>
 8003550:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355a:	e05b      	b.n	8003614 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fbbb 	bl	8003cde <SDIO_GetResponse>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2104      	movs	r1, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fbb2 	bl	8003cde <SDIO_GetResponse>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2108      	movs	r1, #8
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fba9 	bl	8003cde <SDIO_GetResponse>
 800358c:	4602      	mov	r2, r0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	210c      	movs	r1, #12
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fba0 	bl	8003cde <SDIO_GetResponse>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2104      	movs	r1, #4
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fb97 	bl	8003cde <SDIO_GetResponse>
 80035b0:	4603      	mov	r3, r0
 80035b2:	0d1a      	lsrs	r2, r3, #20
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fbc6 	bl	8002d50 <HAL_SD_GetCardCSD>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80035ce:	e021      	b.n	8003614 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	2200      	movs	r2, #0
 80035dc:	461c      	mov	r4, r3
 80035de:	4615      	mov	r5, r2
 80035e0:	4622      	mov	r2, r4
 80035e2:	462b      	mov	r3, r5
 80035e4:	4608      	mov	r0, r1
 80035e6:	f000 fc85 	bl	8003ef4 <SDMMC_CmdSelDesel>
 80035ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f4:	e00e      	b.n	8003614 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681d      	ldr	r5, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	466c      	mov	r4, sp
 80035fe:	f103 0210 	add.w	r2, r3, #16
 8003602:	ca07      	ldmia	r2, {r0, r1, r2}
 8003604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003608:	3304      	adds	r3, #4
 800360a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360c:	4628      	mov	r0, r5
 800360e:	f000 faca 	bl	8003ba6 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3740      	adds	r7, #64	@ 0x40
 8003618:	46bd      	mov	sp, r7
 800361a:	bdb0      	pop	{r4, r5, r7, pc}

0800361c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fc80 	bl	8003f3a <SDMMC_CmdGoIdleState>
 800363a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	e072      	b.n	800372c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fc93 	bl	8003f76 <SDMMC_CmdOperCond>
 8003650:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00d      	beq.n	8003674 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fc69 	bl	8003f3a <SDMMC_CmdGoIdleState>
 8003668:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	e05b      	b.n	800372c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367e:	2b01      	cmp	r3, #1
 8003680:	d137      	bne.n	80036f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fc93 	bl	8003fb4 <SDMMC_CmdAppCommand>
 800368e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02d      	beq.n	80036f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003696:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800369a:	e047      	b.n	800372c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fc86 	bl	8003fb4 <SDMMC_CmdAppCommand>
 80036a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	e03b      	b.n	800372c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	491e      	ldr	r1, [pc, #120]	@ (8003734 <SD_PowerON+0x118>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fc9c 	bl	8003ff8 <SDMMC_CmdAppOperCommand>
 80036c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80036cc:	e02e      	b.n	800372c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fb02 	bl	8003cde <SDIO_GetResponse>
 80036da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	0fdb      	lsrs	r3, r3, #31
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <SD_PowerON+0xcc>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <SD_PowerON+0xce>
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]

    count++;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d802      	bhi.n	8003702 <SD_PowerON+0xe6>
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0cc      	beq.n	800369c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003708:	4293      	cmp	r3, r2
 800370a:	d902      	bls.n	8003712 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800370c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003710:	e00c      	b.n	800372c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
 8003722:	e002      	b.n	800372a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	c1100000 	.word	0xc1100000

08003738 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003748:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800374c:	e018      	b.n	8003780 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f000 fd10 	bl	8004180 <SDMMC_CmdSendStatus>
 8003760:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	e009      	b.n	8003780 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fab3 	bl	8003cde <SDIO_GetResponse>
 8003778:	4602      	mov	r2, r0
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fa9d 	bl	8003cde <SDIO_GetResponse>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ae:	d102      	bne.n	80037b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80037b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037b4:	e02f      	b.n	8003816 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f879 	bl	80038b4 <SD_FindSCR>
 80037c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	e023      	b.n	8003816 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01c      	beq.n	8003812 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 fbe5 	bl	8003fb4 <SDMMC_CmdAppCommand>
 80037ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	e00f      	b.n	8003816 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fc1e 	bl	800403e <SDMMC_CmdBusWidth>
 8003802:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	e003      	b.n	8003816 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800380e:	2300      	movs	r3, #0
 8003810:	e001      	b.n	8003816 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003812:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa52 	bl	8003cde <SDIO_GetResponse>
 800383a:	4603      	mov	r3, r0
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003844:	d102      	bne.n	800384c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003846:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800384a:	e02f      	b.n	80038ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f82e 	bl	80038b4 <SD_FindSCR>
 8003858:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	e023      	b.n	80038ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01c      	beq.n	80038a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f000 fb9a 	bl	8003fb4 <SDMMC_CmdAppCommand>
 8003880:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	e00f      	b.n	80038ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fbd3 	bl	800403e <SDMMC_CmdBusWidth>
 8003898:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	e003      	b.n	80038ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e001      	b.n	80038ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b08f      	sub	sp, #60	@ 0x3c
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80038be:	f7fd f9e3 	bl	8000c88 <HAL_GetTick>
 80038c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2108      	movs	r1, #8
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa3e 	bl	8003d5c <SDMMC_CmdBlockLength>
 80038e0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	e0b2      	b.n	8003a52 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 fb5b 	bl	8003fb4 <SDMMC_CmdAppCommand>
 80038fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	e0a3      	b.n	8003a52 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003910:	2308      	movs	r3, #8
 8003912:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003914:	2330      	movs	r3, #48	@ 0x30
 8003916:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003918:	2302      	movs	r3, #2
 800391a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003920:	2301      	movs	r3, #1
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f107 0210 	add.w	r2, r7, #16
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f9e8 	bl	8003d04 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fba2 	bl	8004082 <SDMMC_CmdSendSCR>
 800393e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02a      	beq.n	800399c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	e083      	b.n	8003a52 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00f      	beq.n	8003978 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	f107 0208 	add.w	r2, r7, #8
 8003964:	18d4      	adds	r4, r2, r3
 8003966:	4608      	mov	r0, r1
 8003968:	f000 f948 	bl	8003bfc <SDIO_ReadFIFO>
 800396c:	4603      	mov	r3, r0
 800396e:	6023      	str	r3, [r4, #0]
      index++;
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	3301      	adds	r3, #1
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34
 8003976:	e006      	b.n	8003986 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003986:	f7fd f97f 	bl	8000c88 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d102      	bne.n	800399c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003996:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800399a:	e05a      	b.n	8003a52 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0cf      	beq.n	800394a <SD_FindSCR+0x96>
 80039aa:	e000      	b.n	80039ae <SD_FindSCR+0xfa>
      break;
 80039ac:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2208      	movs	r2, #8
 80039c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80039c4:	2308      	movs	r3, #8
 80039c6:	e044      	b.n	8003a52 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2202      	movs	r2, #2
 80039dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039de:	2302      	movs	r3, #2
 80039e0:	e037      	b.n	8003a52 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e02a      	b.n	8003a52 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003a04:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	061a      	lsls	r2, r3, #24
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	0e1b      	lsrs	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	601a      	str	r2, [r3, #0]
    scr++;
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	061a      	lsls	r2, r3, #24
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	373c      	adds	r7, #60	@ 0x3c
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}

08003a5a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03f      	beq.n	8003af4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e033      	b.n	8003ae2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f8bc 	bl	8003bfc <SDIO_ReadFIFO>
 8003a84:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3301      	adds	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	0e1b      	lsrs	r3, r3, #24
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b07      	cmp	r3, #7
 8003ae6:	d9c8      	bls.n	8003a7a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8003af4:	bf00      	nop
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d043      	beq.n	8003b9e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e037      	b.n	8003b8c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3301      	adds	r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	041a      	lsls	r2, r3, #16
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	061a      	lsls	r2, r3, #24
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f107 0208 	add.w	r2, r7, #8
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f848 	bl	8003c16 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b07      	cmp	r3, #7
 8003b90:	d9c4      	bls.n	8003b1c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	f107 001c 	add.w	r0, r7, #28
 8003bb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003bbc:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003bc0:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003bc4:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003bc8:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003bcc:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003bd0:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003be0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	b004      	add	sp, #16
 8003bfa:	4770      	bx	lr

08003bfc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2203      	movs	r2, #3
 8003c44:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0303 	and.w	r3, r3, #3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003c94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003c9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	b2db      	uxtb	r3, r3
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3314      	adds	r3, #20
 8003cec:	461a      	mov	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
}  
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d30:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0

}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d6e:	2340      	movs	r3, #64	@ 0x40
 8003d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff74 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8c:	2110      	movs	r1, #16
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa18 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d96:	69fb      	ldr	r3, [r7, #28]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003dae:	2311      	movs	r3, #17
 8003db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003db2:	2340      	movs	r3, #64	@ 0x40
 8003db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff52 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd0:	2111      	movs	r1, #17
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9f6 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dda:	69fb      	ldr	r3, [r7, #28]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003df2:	2312      	movs	r3, #18
 8003df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003df6:	2340      	movs	r3, #64	@ 0x40
 8003df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff30 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e14:	2112      	movs	r1, #18
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f9d4 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e36:	2318      	movs	r3, #24
 8003e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e3a:	2340      	movs	r3, #64	@ 0x40
 8003e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff0e 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	2118      	movs	r1, #24
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9b2 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e62:	69fb      	ldr	r3, [r7, #28]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003e7a:	2319      	movs	r3, #25
 8003e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e7e:	2340      	movs	r3, #64	@ 0x40
 8003e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff feec 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	2119      	movs	r1, #25
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f990 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ec0:	2340      	movs	r3, #64	@ 0x40
 8003ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ecc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ece:	f107 0308 	add.w	r3, r7, #8
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fecb 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <SDMMC_CmdStopTransfer+0x40>)
 8003edc:	210c      	movs	r1, #12
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f970 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	05f5e100 	.word	0x05f5e100

08003ef4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f04:	2307      	movs	r3, #7
 8003f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f08:	2340      	movs	r3, #64	@ 0x40
 8003f0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f16:	f107 0310 	add.w	r3, r7, #16
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fea7 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f26:	2107      	movs	r1, #7
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f94b 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003f2e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3728      	adds	r7, #40	@ 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b088      	sub	sp, #32
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fe86 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb65 	bl	8004634 <SDMMC_GetCmdError>
 8003f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b088      	sub	sp, #32
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003f7e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003f84:	2308      	movs	r3, #8
 8003f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f88:	2340      	movs	r3, #64	@ 0x40
 8003f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f96:	f107 0308 	add.w	r3, r7, #8
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe67 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 faf8 	bl	8004598 <SDMMC_GetCmdResp7>
 8003fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003faa:	69fb      	ldr	r3, [r7, #28]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003fc2:	2337      	movs	r3, #55	@ 0x37
 8003fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fc6:	2340      	movs	r3, #64	@ 0x40
 8003fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fe48 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe4:	2137      	movs	r1, #55	@ 0x37
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8ec 	bl	80041c4 <SDMMC_GetCmdResp1>
 8003fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fee:	69fb      	ldr	r3, [r7, #28]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800400e:	2329      	movs	r3, #41	@ 0x29
 8004010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004012:	2340      	movs	r3, #64	@ 0x40
 8004014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800401a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800401e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004020:	f107 0308 	add.w	r3, r7, #8
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fe22 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f9ff 	bl	8004430 <SDMMC_GetCmdResp3>
 8004032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004034:	69fb      	ldr	r3, [r7, #28]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b088      	sub	sp, #32
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800404c:	2306      	movs	r3, #6
 800404e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004050:	2340      	movs	r3, #64	@ 0x40
 8004052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800405c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800405e:	f107 0308 	add.w	r3, r7, #8
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fe03 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	2106      	movs	r1, #6
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8a7 	bl	80041c4 <SDMMC_GetCmdResp1>
 8004076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004078:	69fb      	ldr	r3, [r7, #28]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800408e:	2333      	movs	r3, #51	@ 0x33
 8004090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004092:	2340      	movs	r3, #64	@ 0x40
 8004094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800409a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800409e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fde2 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80040ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b0:	2133      	movs	r1, #51	@ 0x33
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f886 	bl	80041c4 <SDMMC_GetCmdResp1>
 80040b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ba:	69fb      	ldr	r3, [r7, #28]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80040d0:	2302      	movs	r3, #2
 80040d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040d4:	23c0      	movs	r3, #192	@ 0xc0
 80040d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fdc1 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f956 	bl	80043a0 <SDMMC_GetCmdResp2>
 80040f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040f6:	69fb      	ldr	r3, [r7, #28]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800410e:	2309      	movs	r3, #9
 8004110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004112:	23c0      	movs	r3, #192	@ 0xc0
 8004114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800411a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fda2 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f937 	bl	80043a0 <SDMMC_GetCmdResp2>
 8004132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004134:	69fb      	ldr	r3, [r7, #28]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800414c:	2303      	movs	r3, #3
 800414e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004150:	2340      	movs	r3, #64	@ 0x40
 8004152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800415c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fd83 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	2103      	movs	r1, #3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f99c 	bl	80044ac <SDMMC_GetCmdResp6>
 8004174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004176:	69fb      	ldr	r3, [r7, #28]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800418e:	230d      	movs	r3, #13
 8004190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004192:	2340      	movs	r3, #64	@ 0x40
 8004194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800419a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800419e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fd62 	bl	8003c70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80041ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b0:	210d      	movs	r1, #13
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f806 	bl	80041c4 <SDMMC_GetCmdResp1>
 80041b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041ba:	69fb      	ldr	r3, [r7, #28]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	460b      	mov	r3, r1
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041d2:	4b70      	ldr	r3, [pc, #448]	@ (8004394 <SDMMC_GetCmdResp1+0x1d0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a70      	ldr	r2, [pc, #448]	@ (8004398 <SDMMC_GetCmdResp1+0x1d4>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	0a5a      	lsrs	r2, r3, #9
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	61fa      	str	r2, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041f4:	e0c9      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ef      	beq.n	80041e6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ea      	bne.n	80041e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2204      	movs	r2, #4
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004222:	2304      	movs	r3, #4
 8004224:	e0b1      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004238:	2301      	movs	r3, #1
 800423a:	e0a6      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	22c5      	movs	r2, #197	@ 0xc5
 8004240:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff fd3e 	bl	8003cc4 <SDIO_GetCommandResponse>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	4293      	cmp	r3, r2
 8004250:	d001      	beq.n	8004256 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004252:	2301      	movs	r3, #1
 8004254:	e099      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004256:	2100      	movs	r1, #0
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fd40 	bl	8003cde <SDIO_GetResponse>
 800425e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4b4e      	ldr	r3, [pc, #312]	@ (800439c <SDMMC_GetCmdResp1+0x1d8>)
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800426a:	2300      	movs	r3, #0
 800426c:	e08d      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da02      	bge.n	800427a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004274:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004278:	e087      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004284:	2340      	movs	r3, #64	@ 0x40
 8004286:	e080      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	e079      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80042a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042a4:	e071      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80042b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042b4:	e069      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80042c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042c4:	e061      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80042d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042d4:	e059      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042e4:	e051      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042f4:	e049      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004300:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004304:	e041      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004314:	e039      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004324:	e031      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004330:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004334:	e029      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004340:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004344:	e021      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004350:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004354:	e019      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004360:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004364:	e011      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004370:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004374:	e009      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004380:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004384:	e001      	b.n	800438a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000000 	.word	0x20000000
 8004398:	10624dd3 	.word	0x10624dd3
 800439c:	fdffe008 	.word	0xfdffe008

080043a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004428 <SDMMC_GetCmdResp2+0x88>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	@ (800442c <SDMMC_GetCmdResp2+0x8c>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a5b      	lsrs	r3, r3, #9
 80043b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	60fa      	str	r2, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80043c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80043cc:	e026      	b.n	800441c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0ef      	beq.n	80043be <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ea      	bne.n	80043be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043fa:	2304      	movs	r3, #4
 80043fc:	e00e      	b.n	800441c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004410:	2301      	movs	r3, #1
 8004412:	e003      	b.n	800441c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	22c5      	movs	r2, #197	@ 0xc5
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20000000 	.word	0x20000000
 800442c:	10624dd3 	.word	0x10624dd3

08004430 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004438:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <SDMMC_GetCmdResp3+0x74>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1a      	ldr	r2, [pc, #104]	@ (80044a8 <SDMMC_GetCmdResp3+0x78>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0a5b      	lsrs	r3, r3, #9
 8004444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	60fa      	str	r2, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004458:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800445c:	e01b      	b.n	8004496 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ef      	beq.n	800444e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ea      	bne.n	800444e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2204      	movs	r2, #4
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800448a:	2304      	movs	r3, #4
 800448c:	e003      	b.n	8004496 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	22c5      	movs	r2, #197	@ 0xc5
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000
 80044a8:	10624dd3 	.word	0x10624dd3

080044ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	460b      	mov	r3, r1
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044ba:	4b35      	ldr	r3, [pc, #212]	@ (8004590 <SDMMC_GetCmdResp6+0xe4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a35      	ldr	r2, [pc, #212]	@ (8004594 <SDMMC_GetCmdResp6+0xe8>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	0a5b      	lsrs	r3, r3, #9
 80044c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	61fa      	str	r2, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044de:	e052      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ef      	beq.n	80044d0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ea      	bne.n	80044d0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2204      	movs	r2, #4
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800450c:	2304      	movs	r3, #4
 800450e:	e03a      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004522:	2301      	movs	r3, #1
 8004524:	e02f      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff fbcc 	bl	8003cc4 <SDIO_GetCommandResponse>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	7afb      	ldrb	r3, [r7, #11]
 8004532:	4293      	cmp	r3, r2
 8004534:	d001      	beq.n	800453a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004536:	2301      	movs	r3, #1
 8004538:	e025      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	22c5      	movs	r2, #197	@ 0xc5
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004540:	2100      	movs	r1, #0
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff fbcb 	bl	8003cde <SDIO_GetResponse>
 8004548:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800455e:	2300      	movs	r3, #0
 8004560:	e011      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800456c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004570:	e009      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800457c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004580:	e001      	b.n	8004586 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000000 	.word	0x20000000
 8004594:	10624dd3 	.word	0x10624dd3

08004598 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045a0:	4b22      	ldr	r3, [pc, #136]	@ (800462c <SDMMC_GetCmdResp7+0x94>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a22      	ldr	r2, [pc, #136]	@ (8004630 <SDMMC_GetCmdResp7+0x98>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	0a5b      	lsrs	r3, r3, #9
 80045ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	60fa      	str	r2, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80045c4:	e02c      	b.n	8004620 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ea      	bne.n	80045b6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2204      	movs	r2, #4
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045f2:	2304      	movs	r3, #4
 80045f4:	e014      	b.n	8004620 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004608:	2301      	movs	r3, #1
 800460a:	e009      	b.n	8004620 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2240      	movs	r2, #64	@ 0x40
 800461c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800461e:	2300      	movs	r3, #0
  
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000000 	.word	0x20000000
 8004630:	10624dd3 	.word	0x10624dd3

08004634 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800463c:	4b11      	ldr	r3, [pc, #68]	@ (8004684 <SDMMC_GetCmdError+0x50>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a11      	ldr	r2, [pc, #68]	@ (8004688 <SDMMC_GetCmdError+0x54>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0a5b      	lsrs	r3, r3, #9
 8004648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1e5a      	subs	r2, r3, #1
 8004656:	60fa      	str	r2, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800465c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004660:	e009      	b.n	8004676 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f1      	beq.n	8004652 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	22c5      	movs	r2, #197	@ 0xc5
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000000 	.word	0x20000000
 8004688:	10624dd3 	.word	0x10624dd3

0800468c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004690:	4904      	ldr	r1, [pc, #16]	@ (80046a4 <MX_FATFS_Init+0x18>)
 8004692:	4805      	ldr	r0, [pc, #20]	@ (80046a8 <MX_FATFS_Init+0x1c>)
 8004694:	f003 f82e 	bl	80076f4 <FATFS_LinkDriver>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	4b03      	ldr	r3, [pc, #12]	@ (80046ac <MX_FATFS_Init+0x20>)
 800469e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046a0:	bf00      	nop
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000174 	.word	0x20000174
 80046a8:	08007820 	.word	0x08007820
 80046ac:	20000170 	.word	0x20000170

080046b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80046b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80046ca:	f000 f896 	bl	80047fa <BSP_SD_IsDetected>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e012      	b.n	80046fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80046d8:	480b      	ldr	r0, [pc, #44]	@ (8004708 <BSP_SD_Init+0x48>)
 80046da:	f7fd ff47 	bl	800256c <HAL_SD_Init>
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80046e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046ec:	4806      	ldr	r0, [pc, #24]	@ (8004708 <BSP_SD_Init+0x48>)
 80046ee:	f7fe fcff 	bl	80030f0 <HAL_SD_ConfigWideBusOperation>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80046fc:	79fb      	ldrb	r3, [r7, #7]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000028 	.word	0x20000028

0800470c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	4806      	ldr	r0, [pc, #24]	@ (800473c <BSP_SD_ReadBlocks_DMA+0x30>)
 8004724:	f7fd ffd2 	bl	80026cc <HAL_SD_ReadBlocks_DMA>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000028 	.word	0x20000028

08004740 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	4806      	ldr	r0, [pc, #24]	@ (8004770 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004758:	f7fe f898 	bl	800288c <HAL_SD_WriteBlocks_DMA>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000028 	.word	0x20000028

08004774 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004778:	4805      	ldr	r0, [pc, #20]	@ (8004790 <BSP_SD_GetCardState+0x1c>)
 800477a:	f7fe fd53 	bl	8003224 <HAL_SD_GetCardState>
 800477e:	4603      	mov	r3, r0
 8004780:	2b04      	cmp	r3, #4
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
}
 800478a:	4618      	mov	r0, r3
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000028 	.word	0x20000028

08004794 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4803      	ldr	r0, [pc, #12]	@ (80047ac <BSP_SD_GetCardInfo+0x18>)
 80047a0:	f7fe fc7a 	bl	8003098 <HAL_SD_GetCardInfo>
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000028 	.word	0x20000028

080047b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80047b8:	f000 f818 	bl	80047ec <BSP_SD_AbortCallback>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80047cc:	f000 f9a8 	bl	8004b20 <BSP_SD_WriteCpltCallback>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80047e0:	f000 f9aa 	bl	8004b38 <BSP_SD_ReadCpltCallback>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0

}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004800:	2301      	movs	r3, #1
 8004802:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004804:	f000 f80c 	bl	8004820 <BSP_PlatformIsDetected>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800480e:	2300      	movs	r3, #0
 8004810:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	b2db      	uxtb	r3, r3
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004826:	2301      	movs	r3, #1
 8004828:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800482a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800482e:	4806      	ldr	r0, [pc, #24]	@ (8004848 <BSP_PlatformIsDetected+0x28>)
 8004830:	f7fd f886 	bl	8001940 <HAL_GPIO_ReadPin>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800483a:	2300      	movs	r3, #0
 800483c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800483e:	79fb      	ldrb	r3, [r7, #7]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40020800 	.word	0x40020800

0800484c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004854:	f7fc fa18 	bl	8000c88 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800485a:	e006      	b.n	800486a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800485c:	f7ff ff8a 	bl	8004774 <BSP_SD_GetCardState>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004866:	2300      	movs	r3, #0
 8004868:	e009      	b.n	800487e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800486a:	f7fc fa0d 	bl	8000c88 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d8f0      	bhi.n	800485c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <SD_CheckStatus+0x38>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004898:	f7ff ff6c 	bl	8004774 <BSP_SD_GetCardState>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d107      	bne.n	80048b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80048a2:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <SD_CheckStatus+0x38>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <SD_CheckStatus+0x38>)
 80048b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80048b2:	4b03      	ldr	r3, [pc, #12]	@ (80048c0 <SD_CheckStatus+0x38>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000009 	.word	0x20000009

080048c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80048ce:	f7ff fef7 	bl	80046c0 <BSP_SD_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffd4 	bl	8004888 <SD_CheckStatus>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <SD_initialize+0x34>)
 80048e6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80048e8:	4b03      	ldr	r3, [pc, #12]	@ (80048f8 <SD_initialize+0x34>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b2db      	uxtb	r3, r3
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000009 	.word	0x20000009

080048fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ffbd 	bl	8004888 <SD_CheckStatus>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800492c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004930:	f7ff ff8c 	bl	800484c <SD_CheckStatusWithTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	da01      	bge.n	800493e <SD_read+0x26>
  {
    return res;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	e03b      	b.n	80049b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	68b8      	ldr	r0, [r7, #8]
 8004944:	f7ff fee2 	bl	800470c <BSP_SD_ReadBlocks_DMA>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d132      	bne.n	80049b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800494e:	4b1c      	ldr	r3, [pc, #112]	@ (80049c0 <SD_read+0xa8>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004954:	f7fc f998 	bl	8000c88 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800495a:	bf00      	nop
 800495c:	4b18      	ldr	r3, [pc, #96]	@ (80049c0 <SD_read+0xa8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <SD_read+0x5e>
 8004964:	f7fc f990 	bl	8000c88 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004972:	4293      	cmp	r3, r2
 8004974:	d9f2      	bls.n	800495c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <SD_read+0xa8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
 8004982:	e017      	b.n	80049b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004984:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <SD_read+0xa8>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800498a:	f7fc f97d 	bl	8000c88 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004990:	e007      	b.n	80049a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004992:	f7ff feef 	bl	8004774 <BSP_SD_GetCardState>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <SD_read+0x8a>
          {
            res = RES_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80049a0:	e008      	b.n	80049b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80049a2:	f7fc f971 	bl	8000c88 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d9ee      	bls.n	8004992 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200005dc 	.word	0x200005dc

080049c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80049d8:	4b24      	ldr	r3, [pc, #144]	@ (8004a6c <SD_write+0xa8>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80049de:	f247 5030 	movw	r0, #30000	@ 0x7530
 80049e2:	f7ff ff33 	bl	800484c <SD_CheckStatusWithTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da01      	bge.n	80049f0 <SD_write+0x2c>
  {
    return res;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	e038      	b.n	8004a62 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	68b8      	ldr	r0, [r7, #8]
 80049f6:	f7ff fea3 	bl	8004740 <BSP_SD_WriteBlocks_DMA>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d12f      	bne.n	8004a60 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004a00:	f7fc f942 	bl	8000c88 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004a06:	bf00      	nop
 8004a08:	4b18      	ldr	r3, [pc, #96]	@ (8004a6c <SD_write+0xa8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <SD_write+0x5e>
 8004a10:	f7fc f93a 	bl	8000c88 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d9f2      	bls.n	8004a08 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004a22:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <SD_write+0xa8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
 8004a2e:	e017      	b.n	8004a60 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004a30:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <SD_write+0xa8>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004a36:	f7fc f927 	bl	8000c88 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a3c:	e007      	b.n	8004a4e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004a3e:	f7ff fe99 	bl	8004774 <BSP_SD_GetCardState>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <SD_write+0x8a>
          {
            res = RES_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a4c:	e008      	b.n	8004a60 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a4e:	f7fc f91b 	bl	8000c88 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d9ee      	bls.n	8004a3e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200005d8 	.word	0x200005d8

08004a70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	@ 0x30
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	603a      	str	r2, [r7, #0]
 8004a7a:	71fb      	strb	r3, [r7, #7]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a86:	4b25      	ldr	r3, [pc, #148]	@ (8004b1c <SD_ioctl+0xac>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <SD_ioctl+0x28>
 8004a94:	2303      	movs	r3, #3
 8004a96:	e03c      	b.n	8004b12 <SD_ioctl+0xa2>

  switch (cmd)
 8004a98:	79bb      	ldrb	r3, [r7, #6]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d834      	bhi.n	8004b08 <SD_ioctl+0x98>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <SD_ioctl+0x34>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004abd 	.word	0x08004abd
 8004aac:	08004ad5 	.word	0x08004ad5
 8004ab0:	08004aef 	.word	0x08004aef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004aba:	e028      	b.n	8004b0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004abc:	f107 030c 	add.w	r3, r7, #12
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fe67 	bl	8004794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004ad2:	e01c      	b.n	8004b0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fe5b 	bl	8004794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004aec:	e00f      	b.n	8004b0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fe4e 	bl	8004794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afa:	0a5a      	lsrs	r2, r3, #9
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004b06:	e002      	b.n	8004b0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3730      	adds	r7, #48	@ 0x30
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000009 	.word	0x20000009

08004b20 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <BSP_SD_WriteCpltCallback+0x14>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	200005d8 	.word	0x200005d8

08004b38 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	@ (8004b4c <BSP_SD_ReadCpltCallback+0x14>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	200005dc 	.word	0x200005dc

08004b50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <disk_status+0x30>)
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	79fa      	ldrb	r2, [r7, #7]
 8004b68:	4905      	ldr	r1, [pc, #20]	@ (8004b80 <disk_status+0x30>)
 8004b6a:	440a      	add	r2, r1
 8004b6c:	7a12      	ldrb	r2, [r2, #8]
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4798      	blx	r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000608 	.word	0x20000608

08004b84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd0 <disk_initialize+0x4c>)
 8004b96:	5cd3      	ldrb	r3, [r2, r3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d114      	bne.n	8004bc6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd0 <disk_initialize+0x4c>)
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	79fa      	ldrb	r2, [r7, #7]
 8004baa:	4909      	ldr	r1, [pc, #36]	@ (8004bd0 <disk_initialize+0x4c>)
 8004bac:	440a      	add	r2, r1
 8004bae:	7a12      	ldrb	r2, [r2, #8]
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4798      	blx	r3
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	4a03      	ldr	r2, [pc, #12]	@ (8004bd0 <disk_initialize+0x4c>)
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000608 	.word	0x20000608

08004bd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <disk_read+0x3c>)
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	689c      	ldr	r4, [r3, #8]
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	4a07      	ldr	r2, [pc, #28]	@ (8004c10 <disk_read+0x3c>)
 8004bf4:	4413      	add	r3, r2
 8004bf6:	7a18      	ldrb	r0, [r3, #8]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	47a0      	blx	r4
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000608 	.word	0x20000608

08004c14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4603      	mov	r3, r0
 8004c22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <disk_write+0x3c>)
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68dc      	ldr	r4, [r3, #12]
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	4a07      	ldr	r2, [pc, #28]	@ (8004c50 <disk_write+0x3c>)
 8004c34:	4413      	add	r3, r2
 8004c36:	7a18      	ldrb	r0, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	47a0      	blx	r4
 8004c40:	4603      	mov	r3, r0
 8004c42:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd90      	pop	{r4, r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000608 	.word	0x20000608

08004c54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	603a      	str	r2, [r7, #0]
 8004c5e:	71fb      	strb	r3, [r7, #7]
 8004c60:	460b      	mov	r3, r1
 8004c62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <disk_ioctl+0x38>)
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	79fa      	ldrb	r2, [r7, #7]
 8004c72:	4906      	ldr	r1, [pc, #24]	@ (8004c8c <disk_ioctl+0x38>)
 8004c74:	440a      	add	r2, r1
 8004c76:	7a10      	ldrb	r0, [r2, #8]
 8004c78:	79b9      	ldrb	r1, [r7, #6]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4798      	blx	r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000608 	.word	0x20000608

08004c90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	b21a      	sxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b21b      	sxth	r3, r3
 8004cb0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3303      	adds	r3, #3
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	3202      	adds	r2, #2
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	3201      	adds	r2, #1
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
	return rv;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	887a      	ldrh	r2, [r7, #2]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	887b      	ldrh	r3, [r7, #2]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00d      	beq.n	8004dca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	1c53      	adds	r3, r2, #1
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	6179      	str	r1, [r7, #20]
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f1      	bne.n	8004dae <mem_cpy+0x1a>
	}
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004dd6:	b480      	push	{r7}
 8004dd8:	b087      	sub	sp, #28
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	617a      	str	r2, [r7, #20]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	607b      	str	r3, [r7, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f3      	bne.n	8004de6 <mem_set+0x10>
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	61fa      	str	r2, [r7, #28]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	61ba      	str	r2, [r7, #24]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	1acb      	subs	r3, r1, r3
 8004e38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <mem_cmp+0x40>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0eb      	beq.n	8004e24 <mem_cmp+0x18>

	return r;
 8004e4c:	697b      	ldr	r3, [r7, #20]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	@ 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e64:	e002      	b.n	8004e6c <chk_chr+0x12>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <chk_chr+0x26>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d1f2      	bne.n	8004e66 <chk_chr+0xc>
	return *str;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	781b      	ldrb	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e029      	b.n	8004ef8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004ea4:	4a27      	ldr	r2, [pc, #156]	@ (8004f44 <chk_lock+0xb4>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	4413      	add	r3, r2
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01d      	beq.n	8004eee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004eb2:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <chk_lock+0xb4>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	4413      	add	r3, r2
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d116      	bne.n	8004ef2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f44 <chk_lock+0xb4>)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4413      	add	r3, r2
 8004ecc:	3304      	adds	r3, #4
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d10c      	bne.n	8004ef2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f44 <chk_lock+0xb4>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d102      	bne.n	8004ef2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004eec:	e007      	b.n	8004efe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d9d2      	bls.n	8004ea4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d109      	bne.n	8004f18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <chk_lock+0x80>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d101      	bne.n	8004f14 <chk_lock+0x84>
 8004f10:	2300      	movs	r3, #0
 8004f12:	e010      	b.n	8004f36 <chk_lock+0xa6>
 8004f14:	2312      	movs	r3, #18
 8004f16:	e00e      	b.n	8004f36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d108      	bne.n	8004f30 <chk_lock+0xa0>
 8004f1e:	4a09      	ldr	r2, [pc, #36]	@ (8004f44 <chk_lock+0xb4>)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4413      	add	r3, r2
 8004f26:	330c      	adds	r3, #12
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f2e:	d101      	bne.n	8004f34 <chk_lock+0xa4>
 8004f30:	2310      	movs	r3, #16
 8004f32:	e000      	b.n	8004f36 <chk_lock+0xa6>
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	200005e8 	.word	0x200005e8

08004f48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	e002      	b.n	8004f5a <enq_lock+0x12>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3301      	adds	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d806      	bhi.n	8004f6e <enq_lock+0x26>
 8004f60:	4a09      	ldr	r2, [pc, #36]	@ (8004f88 <enq_lock+0x40>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4413      	add	r3, r2
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f2      	bne.n	8004f54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	200005e8 	.word	0x200005e8

08004f8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e01f      	b.n	8004fdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004f9c:	4a41      	ldr	r2, [pc, #260]	@ (80050a4 <inc_lock+0x118>)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	4413      	add	r3, r2
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d113      	bne.n	8004fd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004fae:	4a3d      	ldr	r2, [pc, #244]	@ (80050a4 <inc_lock+0x118>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d109      	bne.n	8004fd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004fc2:	4a38      	ldr	r2, [pc, #224]	@ (80050a4 <inc_lock+0x118>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	4413      	add	r3, r2
 8004fca:	3308      	adds	r3, #8
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d006      	beq.n	8004fe4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d9dc      	bls.n	8004f9c <inc_lock+0x10>
 8004fe2:	e000      	b.n	8004fe6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004fe4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d132      	bne.n	8005052 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e002      	b.n	8004ff8 <inc_lock+0x6c>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d806      	bhi.n	800500c <inc_lock+0x80>
 8004ffe:	4a29      	ldr	r2, [pc, #164]	@ (80050a4 <inc_lock+0x118>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f2      	bne.n	8004ff2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d101      	bne.n	8005016 <inc_lock+0x8a>
 8005012:	2300      	movs	r3, #0
 8005014:	e040      	b.n	8005098 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4922      	ldr	r1, [pc, #136]	@ (80050a4 <inc_lock+0x118>)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	440b      	add	r3, r1
 8005022:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	491e      	ldr	r1, [pc, #120]	@ (80050a4 <inc_lock+0x118>)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	440b      	add	r3, r1
 8005030:	3304      	adds	r3, #4
 8005032:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	491a      	ldr	r1, [pc, #104]	@ (80050a4 <inc_lock+0x118>)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	440b      	add	r3, r1
 8005040:	3308      	adds	r3, #8
 8005042:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005044:	4a17      	ldr	r2, [pc, #92]	@ (80050a4 <inc_lock+0x118>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4413      	add	r3, r2
 800504c:	330c      	adds	r3, #12
 800504e:	2200      	movs	r2, #0
 8005050:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <inc_lock+0xe0>
 8005058:	4a12      	ldr	r2, [pc, #72]	@ (80050a4 <inc_lock+0x118>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	330c      	adds	r3, #12
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <inc_lock+0xe0>
 8005068:	2300      	movs	r3, #0
 800506a:	e015      	b.n	8005098 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <inc_lock+0xf8>
 8005072:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <inc_lock+0x118>)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	4413      	add	r3, r2
 800507a:	330c      	adds	r3, #12
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	3301      	adds	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	e001      	b.n	8005088 <inc_lock+0xfc>
 8005084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005088:	4906      	ldr	r1, [pc, #24]	@ (80050a4 <inc_lock+0x118>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	440b      	add	r3, r1
 8005090:	330c      	adds	r3, #12
 8005092:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	200005e8 	.word	0x200005e8

080050a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	607b      	str	r3, [r7, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d825      	bhi.n	8005108 <dec_lock+0x60>
		n = Files[i].ctr;
 80050bc:	4a17      	ldr	r2, [pc, #92]	@ (800511c <dec_lock+0x74>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	4413      	add	r3, r2
 80050c4:	330c      	adds	r3, #12
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d0:	d101      	bne.n	80050d6 <dec_lock+0x2e>
 80050d2:	2300      	movs	r3, #0
 80050d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <dec_lock+0x3a>
 80050dc:	89fb      	ldrh	r3, [r7, #14]
 80050de:	3b01      	subs	r3, #1
 80050e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050e2:	4a0e      	ldr	r2, [pc, #56]	@ (800511c <dec_lock+0x74>)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4413      	add	r3, r2
 80050ea:	330c      	adds	r3, #12
 80050ec:	89fa      	ldrh	r2, [r7, #14]
 80050ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d105      	bne.n	8005102 <dec_lock+0x5a>
 80050f6:	4a09      	ldr	r2, [pc, #36]	@ (800511c <dec_lock+0x74>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	4413      	add	r3, r2
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	737b      	strb	r3, [r7, #13]
 8005106:	e001      	b.n	800510c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005108:	2302      	movs	r3, #2
 800510a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800510c:	7b7b      	ldrb	r3, [r7, #13]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	200005e8 	.word	0x200005e8

08005120 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e010      	b.n	8005150 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800512e:	4a0d      	ldr	r2, [pc, #52]	@ (8005164 <clear_lock+0x44>)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4413      	add	r3, r2
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d105      	bne.n	800514a <clear_lock+0x2a>
 800513e:	4a09      	ldr	r2, [pc, #36]	@ (8005164 <clear_lock+0x44>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	4413      	add	r3, r2
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d9eb      	bls.n	800512e <clear_lock+0xe>
	}
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	200005e8 	.word	0x200005e8

08005168 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	78db      	ldrb	r3, [r3, #3]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d034      	beq.n	80051e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7858      	ldrb	r0, [r3, #1]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800518c:	2301      	movs	r3, #1
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	f7ff fd40 	bl	8004c14 <disk_write>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e022      	b.n	80051e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d217      	bcs.n	80051e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	789b      	ldrb	r3, [r3, #2]
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	e010      	b.n	80051e0 <sync_window+0x78>
					wsect += fs->fsize;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7858      	ldrb	r0, [r3, #1]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80051d2:	2301      	movs	r3, #1
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	f7ff fd1d 	bl	8004c14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3b01      	subs	r3, #1
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d8eb      	bhi.n	80051be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d01b      	beq.n	8005240 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ffad 	bl	8005168 <sync_window>
 800520e:	4603      	mov	r3, r0
 8005210:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d113      	bne.n	8005240 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7858      	ldrb	r0, [r3, #1]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005222:	2301      	movs	r3, #1
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	f7ff fcd5 	bl	8004bd4 <disk_read>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ff87 	bl	8005168 <sync_window>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d158      	bne.n	8005316 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d148      	bne.n	80052fe <sync_fs+0xb2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	791b      	ldrb	r3, [r3, #4]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d144      	bne.n	80052fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3330      	adds	r3, #48	@ 0x30
 8005278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fda9 	bl	8004dd6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3330      	adds	r3, #48	@ 0x30
 8005288:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800528c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fd38 	bl	8004d06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3330      	adds	r3, #48	@ 0x30
 800529a:	4921      	ldr	r1, [pc, #132]	@ (8005320 <sync_fs+0xd4>)
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fd4d 	bl	8004d3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3330      	adds	r3, #48	@ 0x30
 80052a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80052aa:	491e      	ldr	r1, [pc, #120]	@ (8005324 <sync_fs+0xd8>)
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fd45 	bl	8004d3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3330      	adds	r3, #48	@ 0x30
 80052b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7ff fd3b 	bl	8004d3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3330      	adds	r3, #48	@ 0x30
 80052ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f7ff fd31 	bl	8004d3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7858      	ldrb	r0, [r3, #1]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f2:	2301      	movs	r3, #1
 80052f4:	f7ff fc8e 	bl	8004c14 <disk_write>
			fs->fsi_flag = 0;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fca4 	bl	8004c54 <disk_ioctl>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <sync_fs+0xca>
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	41615252 	.word	0x41615252
 8005324:	61417272 	.word	0x61417272

08005328 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	3b02      	subs	r3, #2
 8005336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	3b02      	subs	r3, #2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d301      	bcc.n	8005348 <clust2sect+0x20>
 8005344:	2300      	movs	r3, #0
 8005346:	e008      	b.n	800535a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	895b      	ldrh	r3, [r3, #10]
 800534c:	461a      	mov	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	fb03 f202 	mul.w	r2, r3, r2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	4413      	add	r3, r2
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d904      	bls.n	8005386 <get_fat+0x20>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e08e      	b.n	80054aa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
 8005390:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d061      	beq.n	800545e <get_fat+0xf8>
 800539a:	2b03      	cmp	r3, #3
 800539c:	dc7b      	bgt.n	8005496 <get_fat+0x130>
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d002      	beq.n	80053a8 <get_fat+0x42>
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d041      	beq.n	800542a <get_fat+0xc4>
 80053a6:	e076      	b.n	8005496 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	0a5b      	lsrs	r3, r3, #9
 80053be:	4413      	add	r3, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6938      	ldr	r0, [r7, #16]
 80053c4:	f7ff ff14 	bl	80051f0 <move_window>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d166      	bne.n	800549c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	60fa      	str	r2, [r7, #12]
 80053d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6a1a      	ldr	r2, [r3, #32]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0a5b      	lsrs	r3, r3, #9
 80053ea:	4413      	add	r3, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	6938      	ldr	r0, [r7, #16]
 80053f0:	f7ff fefe 	bl	80051f0 <move_window>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d152      	bne.n	80054a0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4313      	orrs	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <get_fat+0xba>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	e002      	b.n	8005426 <get_fat+0xc0>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	617b      	str	r3, [r7, #20]
			break;
 8005428:	e03f      	b.n	80054aa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	4413      	add	r3, r2
 8005434:	4619      	mov	r1, r3
 8005436:	6938      	ldr	r0, [r7, #16]
 8005438:	f7ff feda 	bl	80051f0 <move_window>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d130      	bne.n	80054a4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005450:	4413      	add	r3, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fc1c 	bl	8004c90 <ld_word>
 8005458:	4603      	mov	r3, r0
 800545a:	617b      	str	r3, [r7, #20]
			break;
 800545c:	e025      	b.n	80054aa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	09db      	lsrs	r3, r3, #7
 8005466:	4413      	add	r3, r2
 8005468:	4619      	mov	r1, r3
 800546a:	6938      	ldr	r0, [r7, #16]
 800546c:	f7ff fec0 	bl	80051f0 <move_window>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d118      	bne.n	80054a8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005484:	4413      	add	r3, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fc1a 	bl	8004cc0 <ld_dword>
 800548c:	4603      	mov	r3, r0
 800548e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005492:	617b      	str	r3, [r7, #20]
			break;
 8005494:	e009      	b.n	80054aa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005496:	2301      	movs	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e006      	b.n	80054aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800549c:	bf00      	nop
 800549e:	e004      	b.n	80054aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054a0:	bf00      	nop
 80054a2:	e002      	b.n	80054aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054a8:	bf00      	nop
		}
	}

	return val;
 80054aa:	697b      	ldr	r3, [r7, #20]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b089      	sub	sp, #36	@ 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80054c0:	2302      	movs	r3, #2
 80054c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	f240 80d9 	bls.w	800567e <put_fat+0x1ca>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f080 80d3 	bcs.w	800567e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	f000 8096 	beq.w	800560e <put_fat+0x15a>
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	f300 80cb 	bgt.w	800567e <put_fat+0x1ca>
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <put_fat+0x3e>
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d06e      	beq.n	80055ce <put_fat+0x11a>
 80054f0:	e0c5      	b.n	800567e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4413      	add	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	0a5b      	lsrs	r3, r3, #9
 8005508:	4413      	add	r3, r2
 800550a:	4619      	mov	r1, r3
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff fe6f 	bl	80051f0 <move_window>
 8005512:	4603      	mov	r3, r0
 8005514:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f040 80a9 	bne.w	8005670 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	61b9      	str	r1, [r7, #24]
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	4413      	add	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <put_fat+0xa4>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b25b      	sxtb	r3, r3
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	b25a      	sxtb	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	b25b      	sxtb	r3, r3
 8005550:	4313      	orrs	r3, r2
 8005552:	b25b      	sxtb	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e001      	b.n	800555c <put_fat+0xa8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	0a5b      	lsrs	r3, r3, #9
 800556e:	4413      	add	r3, r2
 8005570:	4619      	mov	r1, r3
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff fe3c 	bl	80051f0 <move_window>
 8005578:	4603      	mov	r3, r0
 800557a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800557c:	7ffb      	ldrb	r3, [r7, #31]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d178      	bne.n	8005674 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	4413      	add	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <put_fat+0xf0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e00e      	b.n	80055c2 <put_fat+0x10e>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	f023 030f 	bic.w	r3, r3, #15
 80055ae:	b25a      	sxtb	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	4313      	orrs	r3, r2
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	70da      	strb	r2, [r3, #3]
			break;
 80055cc:	e057      	b.n	800567e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1a      	ldr	r2, [r3, #32]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	4413      	add	r3, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fe08 	bl	80051f0 <move_window>
 80055e0:	4603      	mov	r3, r0
 80055e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d146      	bne.n	8005678 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80055f8:	4413      	add	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	b292      	uxth	r2, r2
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fb80 	bl	8004d06 <st_word>
			fs->wflag = 1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	70da      	strb	r2, [r3, #3]
			break;
 800560c:	e037      	b.n	800567e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	09db      	lsrs	r3, r3, #7
 8005616:	4413      	add	r3, r2
 8005618:	4619      	mov	r1, r3
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fde8 	bl	80051f0 <move_window>
 8005620:	4603      	mov	r3, r0
 8005622:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005624:	7ffb      	ldrb	r3, [r7, #31]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d128      	bne.n	800567c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800563e:	4413      	add	r3, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fb3d 	bl	8004cc0 <ld_dword>
 8005646:	4603      	mov	r3, r0
 8005648:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800564c:	4323      	orrs	r3, r4
 800564e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800565e:	4413      	add	r3, r2
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fb6a 	bl	8004d3c <st_dword>
			fs->wflag = 1;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	70da      	strb	r2, [r3, #3]
			break;
 800566e:	e006      	b.n	800567e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005670:	bf00      	nop
 8005672:	e004      	b.n	800567e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005674:	bf00      	nop
 8005676:	e002      	b.n	800567e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800567c:	bf00      	nop
		}
	}
	return res;
 800567e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3724      	adds	r7, #36	@ 0x24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd90      	pop	{r4, r7, pc}

08005688 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d904      	bls.n	80056ae <remove_chain+0x26>
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d301      	bcc.n	80056b2 <remove_chain+0x2a>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e04b      	b.n	800574a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	69b8      	ldr	r0, [r7, #24]
 80056c0:	f7ff fef8 	bl	80054b4 <put_fat>
 80056c4:	4603      	mov	r3, r0
 80056c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80056c8:	7ffb      	ldrb	r3, [r7, #31]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <remove_chain+0x4a>
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	e03b      	b.n	800574a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff fe46 	bl	8005366 <get_fat>
 80056da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d031      	beq.n	8005746 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <remove_chain+0x64>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e02e      	b.n	800574a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d101      	bne.n	80056f8 <remove_chain+0x70>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e028      	b.n	800574a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80056f8:	2200      	movs	r2, #0
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	69b8      	ldr	r0, [r7, #24]
 80056fe:	f7ff fed9 	bl	80054b4 <put_fat>
 8005702:	4603      	mov	r3, r0
 8005704:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005706:	7ffb      	ldrb	r3, [r7, #31]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <remove_chain+0x88>
 800570c:	7ffb      	ldrb	r3, [r7, #31]
 800570e:	e01c      	b.n	800574a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	3b02      	subs	r3, #2
 800571a:	429a      	cmp	r2, r3
 800571c:	d20b      	bcs.n	8005736 <remove_chain+0xae>
			fs->free_clst++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d3c6      	bcc.n	80056d2 <remove_chain+0x4a>
 8005744:	e000      	b.n	8005748 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005746:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10d      	bne.n	8005784 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <create_chain+0x2c>
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	429a      	cmp	r2, r3
 800577c:	d31b      	bcc.n	80057b6 <create_chain+0x64>
 800577e:	2301      	movs	r3, #1
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e018      	b.n	80057b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fded 	bl	8005366 <get_fat>
 800578c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d801      	bhi.n	8005798 <create_chain+0x46>
 8005794:	2301      	movs	r3, #1
 8005796:	e070      	b.n	800587a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d101      	bne.n	80057a4 <create_chain+0x52>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	e06a      	b.n	800587a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d201      	bcs.n	80057b2 <create_chain+0x60>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	e063      	b.n	800587a <create_chain+0x128>
		scl = clst;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d307      	bcc.n	80057da <create_chain+0x88>
				ncl = 2;
 80057ca:	2302      	movs	r3, #2
 80057cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d901      	bls.n	80057da <create_chain+0x88>
 80057d6:	2300      	movs	r3, #0
 80057d8:	e04f      	b.n	800587a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80057da:	69f9      	ldr	r1, [r7, #28]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fdc2 	bl	8005366 <get_fat>
 80057e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d003      	beq.n	80057f8 <create_chain+0xa6>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d101      	bne.n	80057fc <create_chain+0xaa>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	e03e      	b.n	800587a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d1da      	bne.n	80057ba <create_chain+0x68>
 8005804:	2300      	movs	r3, #0
 8005806:	e038      	b.n	800587a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005808:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	69f9      	ldr	r1, [r7, #28]
 8005810:	6938      	ldr	r0, [r7, #16]
 8005812:	f7ff fe4f 	bl	80054b4 <put_fat>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <create_chain+0xe2>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6938      	ldr	r0, [r7, #16]
 800582c:	f7ff fe42 	bl	80054b4 <put_fat>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <create_chain+0x116>
		fs->last_clst = ncl;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	3b02      	subs	r3, #2
 800584a:	429a      	cmp	r2, r3
 800584c:	d804      	bhi.n	8005858 <create_chain+0x106>
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	b2da      	uxtb	r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	711a      	strb	r2, [r3, #4]
 8005866:	e007      	b.n	8005878 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d102      	bne.n	8005874 <create_chain+0x122>
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	e000      	b.n	8005876 <create_chain+0x124>
 8005874:	2301      	movs	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005878:	69fb      	ldr	r3, [r7, #28]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005882:	b480      	push	{r7}
 8005884:	b087      	sub	sp, #28
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	3304      	adds	r3, #4
 8005898:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	0a5b      	lsrs	r3, r3, #9
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	8952      	ldrh	r2, [r2, #10]
 80058a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	613a      	str	r2, [r7, #16]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <clmt_clust+0x3a>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e010      	b.n	80058de <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d307      	bcc.n	80058d4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3304      	adds	r3, #4
 80058d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058d2:	e7e9      	b.n	80058a8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80058d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	4413      	add	r3, r2
}
 80058de:	4618      	mov	r0, r3
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005900:	d204      	bcs.n	800590c <dir_sdi+0x22>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <dir_sdi+0x26>
		return FR_INT_ERR;
 800590c:	2302      	movs	r3, #2
 800590e:	e063      	b.n	80059d8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <dir_sdi+0x46>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d902      	bls.n	8005930 <dir_sdi+0x46>
		clst = fs->dirbase;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	8912      	ldrh	r2, [r2, #8]
 800593e:	4293      	cmp	r3, r2
 8005940:	d301      	bcc.n	8005946 <dir_sdi+0x5c>
 8005942:	2302      	movs	r3, #2
 8005944:	e048      	b.n	80059d8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	61da      	str	r2, [r3, #28]
 800594e:	e029      	b.n	80059a4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	895b      	ldrh	r3, [r3, #10]
 8005954:	025b      	lsls	r3, r3, #9
 8005956:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005958:	e019      	b.n	800598e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fd01 	bl	8005366 <get_fat>
 8005964:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d101      	bne.n	8005972 <dir_sdi+0x88>
 800596e:	2301      	movs	r3, #1
 8005970:	e032      	b.n	80059d8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d904      	bls.n	8005982 <dir_sdi+0x98>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	429a      	cmp	r2, r3
 8005980:	d301      	bcc.n	8005986 <dir_sdi+0x9c>
 8005982:	2302      	movs	r3, #2
 8005984:	e028      	b.n	80059d8 <dir_sdi+0xee>
			ofs -= csz;
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	429a      	cmp	r2, r3
 8005994:	d2e1      	bcs.n	800595a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005996:	6979      	ldr	r1, [r7, #20]
 8005998:	6938      	ldr	r0, [r7, #16]
 800599a:	f7ff fcc5 	bl	8005328 <clust2sect>
 800599e:	4602      	mov	r2, r0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <dir_sdi+0xcc>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e010      	b.n	80059d8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	0a5b      	lsrs	r3, r3, #9
 80059be:	441a      	add	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	3320      	adds	r3, #32
 80059f6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <dir_next+0x28>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a06:	d301      	bcc.n	8005a0c <dir_next+0x2c>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	e0aa      	b.n	8005b62 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f040 8098 	bne.w	8005b48 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	8912      	ldrh	r2, [r2, #8]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	f0c0 8088 	bcc.w	8005b48 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
 8005a3e:	2304      	movs	r3, #4
 8005a40:	e08f      	b.n	8005b62 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	0a5b      	lsrs	r3, r3, #9
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	8952      	ldrh	r2, [r2, #10]
 8005a4a:	3a01      	subs	r2, #1
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d17a      	bne.n	8005b48 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7ff fc83 	bl	8005366 <get_fat>
 8005a60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d801      	bhi.n	8005a6c <dir_next+0x8c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e07a      	b.n	8005b62 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d101      	bne.n	8005a78 <dir_next+0x98>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e074      	b.n	8005b62 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d358      	bcc.n	8005b34 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	61da      	str	r2, [r3, #28]
 8005a8e:	2304      	movs	r3, #4
 8005a90:	e067      	b.n	8005b62 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7ff fe59 	bl	8005752 <create_chain>
 8005aa0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <dir_next+0xcc>
 8005aa8:	2307      	movs	r3, #7
 8005aaa:	e05a      	b.n	8005b62 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <dir_next+0xd6>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e055      	b.n	8005b62 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d101      	bne.n	8005ac2 <dir_next+0xe2>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e04f      	b.n	8005b62 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fb50 	bl	8005168 <sync_window>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <dir_next+0xf2>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e047      	b.n	8005b62 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3330      	adds	r3, #48	@ 0x30
 8005ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff f97a 	bl	8004dd6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff fc1d 	bl	8005328 <clust2sect>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005af4:	e012      	b.n	8005b1c <dir_next+0x13c>
						fs->wflag = 1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fb33 	bl	8005168 <sync_window>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <dir_next+0x12c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e02a      	b.n	8005b62 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	895b      	ldrh	r3, [r3, #10]
 8005b20:	461a      	mov	r2, r3
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d3e6      	bcc.n	8005af6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b3a:	6979      	ldr	r1, [r7, #20]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fbf3 	bl	8005328 <clust2sect>
 8005b42:	4602      	mov	r2, r0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	441a      	add	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff feb4 	bl	80058ea <dir_sdi>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d12b      	bne.n	8005be4 <dir_alloc+0x7a>
		n = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4619      	mov	r1, r3
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fb2a 	bl	80051f0 <move_window>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11d      	bne.n	8005be2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2be5      	cmp	r3, #229	@ 0xe5
 8005bae:	d004      	beq.n	8005bba <dir_alloc+0x50>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d102      	bne.n	8005bce <dir_alloc+0x64>
 8005bc8:	e00c      	b.n	8005be4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff05 	bl	80059e0 <dir_next>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0d7      	beq.n	8005b90 <dir_alloc+0x26>
 8005be0:	e000      	b.n	8005be4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005be2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d101      	bne.n	8005bee <dir_alloc+0x84>
 8005bea:	2307      	movs	r3, #7
 8005bec:	75fb      	strb	r3, [r7, #23]
	return res;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	331a      	adds	r3, #26
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f842 	bl	8004c90 <ld_word>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d109      	bne.n	8005c2c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff f837 	bl	8004c90 <ld_word>
 8005c22:	4603      	mov	r3, r0
 8005c24:	041b      	lsls	r3, r3, #16
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	331a      	adds	r3, #26
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	b292      	uxth	r2, r2
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f85a 	bl	8004d06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d109      	bne.n	8005c6e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f103 0214 	add.w	r2, r3, #20
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	0c1b      	lsrs	r3, r3, #16
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7ff f84c 	bl	8004d06 <st_word>
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c84:	2100      	movs	r1, #0
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff fe2f 	bl	80058ea <dir_sdi>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <dir_find+0x24>
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	e03e      	b.n	8005d18 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6938      	ldr	r0, [r7, #16]
 8005ca2:	f7ff faa5 	bl	80051f0 <move_window>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d12f      	bne.n	8005d10 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <dir_find+0x4e>
 8005cbe:	2304      	movs	r3, #4
 8005cc0:	75fb      	strb	r3, [r7, #23]
 8005cc2:	e028      	b.n	8005d16 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	330b      	adds	r3, #11
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	330b      	adds	r3, #11
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <dir_find+0x86>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a18      	ldr	r0, [r3, #32]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3324      	adds	r3, #36	@ 0x24
 8005cee:	220b      	movs	r2, #11
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f7ff f88b 	bl	8004e0c <mem_cmp>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fe6e 	bl	80059e0 <dir_next>
 8005d04:	4603      	mov	r3, r0
 8005d06:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0c5      	beq.n	8005c9a <dir_find+0x24>
 8005d0e:	e002      	b.n	8005d16 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d14:	bf00      	nop

	return res;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005d2e:	2101      	movs	r1, #1
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff ff1a 	bl	8005b6a <dir_alloc>
 8005d36:	4603      	mov	r3, r0
 8005d38:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11c      	bne.n	8005d7a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	4619      	mov	r1, r3
 8005d46:	68b8      	ldr	r0, [r7, #8]
 8005d48:	f7ff fa52 	bl	80051f0 <move_window>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d111      	bne.n	8005d7a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff f839 	bl	8004dd6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a18      	ldr	r0, [r3, #32]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3324      	adds	r3, #36	@ 0x24
 8005d6c:	220b      	movs	r2, #11
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f7ff f810 	bl	8004d94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2201      	movs	r2, #1
 8005d78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3324      	adds	r3, #36	@ 0x24
 8005d98:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005d9a:	220b      	movs	r2, #11
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	68b8      	ldr	r0, [r7, #8]
 8005da0:	f7ff f819 	bl	8004dd6 <mem_set>
	si = i = 0; ni = 8;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	2308      	movs	r3, #8
 8005dae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	61fa      	str	r2, [r7, #28]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005dbe:	7efb      	ldrb	r3, [r7, #27]
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d94e      	bls.n	8005e62 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005dc4:	7efb      	ldrb	r3, [r7, #27]
 8005dc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8005dc8:	d006      	beq.n	8005dd8 <create_name+0x54>
 8005dca:	7efb      	ldrb	r3, [r7, #27]
 8005dcc:	2b5c      	cmp	r3, #92	@ 0x5c
 8005dce:	d110      	bne.n	8005df2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005dd0:	e002      	b.n	8005dd8 <create_name+0x54>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005de2:	d0f6      	beq.n	8005dd2 <create_name+0x4e>
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b5c      	cmp	r3, #92	@ 0x5c
 8005dee:	d0f0      	beq.n	8005dd2 <create_name+0x4e>
			break;
 8005df0:	e038      	b.n	8005e64 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005df2:	7efb      	ldrb	r3, [r7, #27]
 8005df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df6:	d003      	beq.n	8005e00 <create_name+0x7c>
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d30c      	bcc.n	8005e1a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b0b      	cmp	r3, #11
 8005e04:	d002      	beq.n	8005e0c <create_name+0x88>
 8005e06:	7efb      	ldrb	r3, [r7, #27]
 8005e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e0a:	d001      	beq.n	8005e10 <create_name+0x8c>
 8005e0c:	2306      	movs	r3, #6
 8005e0e:	e044      	b.n	8005e9a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005e10:	2308      	movs	r3, #8
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	230b      	movs	r3, #11
 8005e16:	617b      	str	r3, [r7, #20]
			continue;
 8005e18:	e022      	b.n	8005e60 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005e1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da04      	bge.n	8005e2c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005e22:	7efb      	ldrb	r3, [r7, #27]
 8005e24:	3b80      	subs	r3, #128	@ 0x80
 8005e26:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea4 <create_name+0x120>)
 8005e28:	5cd3      	ldrb	r3, [r2, r3]
 8005e2a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e2c:	7efb      	ldrb	r3, [r7, #27]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	481d      	ldr	r0, [pc, #116]	@ (8005ea8 <create_name+0x124>)
 8005e32:	f7ff f812 	bl	8004e5a <chk_chr>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <create_name+0xbc>
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	e02c      	b.n	8005e9a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e40:	7efb      	ldrb	r3, [r7, #27]
 8005e42:	2b60      	cmp	r3, #96	@ 0x60
 8005e44:	d905      	bls.n	8005e52 <create_name+0xce>
 8005e46:	7efb      	ldrb	r3, [r7, #27]
 8005e48:	2b7a      	cmp	r3, #122	@ 0x7a
 8005e4a:	d802      	bhi.n	8005e52 <create_name+0xce>
 8005e4c:	7efb      	ldrb	r3, [r7, #27]
 8005e4e:	3b20      	subs	r3, #32
 8005e50:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	613a      	str	r2, [r7, #16]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	7efa      	ldrb	r2, [r7, #27]
 8005e5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005e60:	e7a6      	b.n	8005db0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	441a      	add	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <create_name+0xf4>
 8005e74:	2306      	movs	r3, #6
 8005e76:	e010      	b.n	8005e9a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2be5      	cmp	r3, #229	@ 0xe5
 8005e7e:	d102      	bne.n	8005e86 <create_name+0x102>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2205      	movs	r2, #5
 8005e84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e86:	7efb      	ldrb	r3, [r7, #27]
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d801      	bhi.n	8005e90 <create_name+0x10c>
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	e000      	b.n	8005e92 <create_name+0x10e>
 8005e90:	2200      	movs	r2, #0
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	330b      	adds	r3, #11
 8005e96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005e98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	08007834 	.word	0x08007834
 8005ea8:	080077c4 	.word	0x080077c4

08005eac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ec0:	e002      	b.n	8005ec8 <follow_path+0x1c>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ece:	d0f8      	beq.n	8005ec2 <follow_path+0x16>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ed6:	d0f4      	beq.n	8005ec2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2200      	movs	r2, #0
 8005edc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b1f      	cmp	r3, #31
 8005ee4:	d80a      	bhi.n	8005efc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2280      	movs	r2, #128	@ 0x80
 8005eea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005eee:	2100      	movs	r1, #0
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fcfa 	bl	80058ea <dir_sdi>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]
 8005efa:	e043      	b.n	8005f84 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005efc:	463b      	mov	r3, r7
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ff3f 	bl	8005d84 <create_name>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d134      	bne.n	8005f7a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff feb0 	bl	8005c76 <dir_find>
 8005f16:	4603      	mov	r3, r0
 8005f18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d127      	bne.n	8005f7e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d122      	bne.n	8005f7e <follow_path+0xd2>
 8005f38:	2305      	movs	r3, #5
 8005f3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005f3c:	e01f      	b.n	8005f7e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11c      	bne.n	8005f82 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	799b      	ldrb	r3, [r3, #6]
 8005f4c:	f003 0310 	and.w	r3, r3, #16
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005f54:	2305      	movs	r3, #5
 8005f56:	75fb      	strb	r3, [r7, #23]
 8005f58:	e014      	b.n	8005f84 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f68:	4413      	add	r3, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff fe43 	bl	8005bf8 <ld_clust>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f78:	e7c0      	b.n	8005efc <follow_path+0x50>
			if (res != FR_OK) break;
 8005f7a:	bf00      	nop
 8005f7c:	e002      	b.n	8005f84 <follow_path+0xd8>
				break;
 8005f7e:	bf00      	nop
 8005f80:	e000      	b.n	8005f84 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f82:	bf00      	nop
			}
		}
	}

	return res;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d031      	beq.n	8006008 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e002      	b.n	8005fb2 <get_ldnumber+0x24>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d903      	bls.n	8005fc2 <get_ldnumber+0x34>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fc0:	d1f4      	bne.n	8005fac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fc8:	d11c      	bne.n	8006004 <get_ldnumber+0x76>
			tp = *path;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	60fa      	str	r2, [r7, #12]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	3b30      	subs	r3, #48	@ 0x30
 8005fda:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	d80e      	bhi.n	8006000 <get_ldnumber+0x72>
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d10a      	bne.n	8006000 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d107      	bne.n	8006000 <get_ldnumber+0x72>
					vol = (int)i;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	e002      	b.n	800600a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006008:	693b      	ldr	r3, [r7, #16]
}
 800600a:	4618      	mov	r0, r3
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	70da      	strb	r2, [r3, #3]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f8dc 	bl	80051f0 <move_window>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <check_fs+0x2a>
 800603e:	2304      	movs	r3, #4
 8006040:	e038      	b.n	80060b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3330      	adds	r3, #48	@ 0x30
 8006046:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fe20 	bl	8004c90 <ld_word>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006058:	429a      	cmp	r2, r3
 800605a:	d001      	beq.n	8006060 <check_fs+0x48>
 800605c:	2303      	movs	r3, #3
 800605e:	e029      	b.n	80060b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006066:	2be9      	cmp	r3, #233	@ 0xe9
 8006068:	d009      	beq.n	800607e <check_fs+0x66>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006070:	2beb      	cmp	r3, #235	@ 0xeb
 8006072:	d11e      	bne.n	80060b2 <check_fs+0x9a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800607a:	2b90      	cmp	r3, #144	@ 0x90
 800607c:	d119      	bne.n	80060b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3330      	adds	r3, #48	@ 0x30
 8006082:	3336      	adds	r3, #54	@ 0x36
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe fe1b 	bl	8004cc0 <ld_dword>
 800608a:	4603      	mov	r3, r0
 800608c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006090:	4a0a      	ldr	r2, [pc, #40]	@ (80060bc <check_fs+0xa4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <check_fs+0x82>
 8006096:	2300      	movs	r3, #0
 8006098:	e00c      	b.n	80060b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3330      	adds	r3, #48	@ 0x30
 800609e:	3352      	adds	r3, #82	@ 0x52
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fe0d 	bl	8004cc0 <ld_dword>
 80060a6:	4603      	mov	r3, r0
 80060a8:	4a05      	ldr	r2, [pc, #20]	@ (80060c0 <check_fs+0xa8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <check_fs+0x9a>
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80060b2:	2302      	movs	r3, #2
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	00544146 	.word	0x00544146
 80060c0:	33544146 	.word	0x33544146

080060c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b096      	sub	sp, #88	@ 0x58
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff ff58 	bl	8005f8e <get_ldnumber>
 80060de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80060e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da01      	bge.n	80060ea <find_volume+0x26>
 80060e6:	230b      	movs	r3, #11
 80060e8:	e22d      	b.n	8006546 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80060ea:	4aa1      	ldr	r2, [pc, #644]	@ (8006370 <find_volume+0x2ac>)
 80060ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <find_volume+0x3a>
 80060fa:	230c      	movs	r3, #12
 80060fc:	e223      	b.n	8006546 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006102:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01a      	beq.n	800614a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe fd19 	bl	8004b50 <disk_status>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006124:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10c      	bne.n	800614a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <find_volume+0x82>
 8006136:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006142:	230a      	movs	r3, #10
 8006144:	e1ff      	b.n	8006546 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006146:	2300      	movs	r3, #0
 8006148:	e1fd      	b.n	8006546 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800614a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006156:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fd11 	bl	8004b84 <disk_initialize>
 8006162:	4603      	mov	r3, r0
 8006164:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006168:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006174:	2303      	movs	r3, #3
 8006176:	e1e6      	b.n	8006546 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <find_volume+0xca>
 800617e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800618a:	230a      	movs	r3, #10
 800618c:	e1db      	b.n	8006546 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006192:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006194:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006196:	f7ff ff3f 	bl	8006018 <check_fs>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80061a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d149      	bne.n	800623c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061a8:	2300      	movs	r3, #0
 80061aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ac:	e01e      	b.n	80061ec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80061bc:	4413      	add	r3, r2
 80061be:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	3304      	adds	r3, #4
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d006      	beq.n	80061d8 <find_volume+0x114>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	3308      	adds	r3, #8
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fd76 	bl	8004cc0 <ld_dword>
 80061d4:	4602      	mov	r2, r0
 80061d6:	e000      	b.n	80061da <find_volume+0x116>
 80061d8:	2200      	movs	r2, #0
 80061da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3358      	adds	r3, #88	@ 0x58
 80061e0:	443b      	add	r3, r7
 80061e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e8:	3301      	adds	r3, #1
 80061ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d9dd      	bls.n	80061ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80061f2:	2300      	movs	r3, #0
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80061f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <find_volume+0x13e>
 80061fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061fe:	3b01      	subs	r3, #1
 8006200:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	3358      	adds	r3, #88	@ 0x58
 8006208:	443b      	add	r3, r7
 800620a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800620e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <find_volume+0x15e>
 8006216:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006218:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800621a:	f7ff fefd 	bl	8006018 <check_fs>
 800621e:	4603      	mov	r3, r0
 8006220:	e000      	b.n	8006224 <find_volume+0x160>
 8006222:	2303      	movs	r3, #3
 8006224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006228:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800622c:	2b01      	cmp	r3, #1
 800622e:	d905      	bls.n	800623c <find_volume+0x178>
 8006230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006232:	3301      	adds	r3, #1
 8006234:	643b      	str	r3, [r7, #64]	@ 0x40
 8006236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006238:	2b03      	cmp	r3, #3
 800623a:	d9e2      	bls.n	8006202 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800623c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006240:	2b04      	cmp	r3, #4
 8006242:	d101      	bne.n	8006248 <find_volume+0x184>
 8006244:	2301      	movs	r3, #1
 8006246:	e17e      	b.n	8006546 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006248:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800624c:	2b01      	cmp	r3, #1
 800624e:	d901      	bls.n	8006254 <find_volume+0x190>
 8006250:	230d      	movs	r3, #13
 8006252:	e178      	b.n	8006546 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	3330      	adds	r3, #48	@ 0x30
 8006258:	330b      	adds	r3, #11
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fd18 	bl	8004c90 <ld_word>
 8006260:	4603      	mov	r3, r0
 8006262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006266:	d001      	beq.n	800626c <find_volume+0x1a8>
 8006268:	230d      	movs	r3, #13
 800626a:	e16c      	b.n	8006546 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	3330      	adds	r3, #48	@ 0x30
 8006270:	3316      	adds	r3, #22
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fd0c 	bl	8004c90 <ld_word>
 8006278:	4603      	mov	r3, r0
 800627a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800627c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <find_volume+0x1cc>
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	3330      	adds	r3, #48	@ 0x30
 8006286:	3324      	adds	r3, #36	@ 0x24
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fd19 	bl	8004cc0 <ld_dword>
 800628e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006294:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	789b      	ldrb	r3, [r3, #2]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d005      	beq.n	80062b4 <find_volume+0x1f0>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	789b      	ldrb	r3, [r3, #2]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d001      	beq.n	80062b4 <find_volume+0x1f0>
 80062b0:	230d      	movs	r3, #13
 80062b2:	e148      	b.n	8006546 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	789b      	ldrb	r3, [r3, #2]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c8:	461a      	mov	r2, r3
 80062ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	895b      	ldrh	r3, [r3, #10]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <find_volume+0x224>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	895b      	ldrh	r3, [r3, #10]
 80062da:	461a      	mov	r2, r3
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	895b      	ldrh	r3, [r3, #10]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <find_volume+0x228>
 80062e8:	230d      	movs	r3, #13
 80062ea:	e12c      	b.n	8006546 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	3330      	adds	r3, #48	@ 0x30
 80062f0:	3311      	adds	r3, #17
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fccc 	bl	8004c90 <ld_word>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006302:	891b      	ldrh	r3, [r3, #8]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <find_volume+0x24e>
 800630e:	230d      	movs	r3, #13
 8006310:	e119      	b.n	8006546 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	3330      	adds	r3, #48	@ 0x30
 8006316:	3313      	adds	r3, #19
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fcb9 	bl	8004c90 <ld_word>
 800631e:	4603      	mov	r3, r0
 8006320:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <find_volume+0x272>
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	3330      	adds	r3, #48	@ 0x30
 800632c:	3320      	adds	r3, #32
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fcc6 	bl	8004cc0 <ld_dword>
 8006334:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	3330      	adds	r3, #48	@ 0x30
 800633a:	330e      	adds	r3, #14
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe fca7 	bl	8004c90 <ld_word>
 8006342:	4603      	mov	r3, r0
 8006344:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006346:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <find_volume+0x28c>
 800634c:	230d      	movs	r3, #13
 800634e:	e0fa      	b.n	8006546 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006350:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006354:	4413      	add	r3, r2
 8006356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006358:	8912      	ldrh	r2, [r2, #8]
 800635a:	0912      	lsrs	r2, r2, #4
 800635c:	b292      	uxth	r2, r2
 800635e:	4413      	add	r3, r2
 8006360:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	429a      	cmp	r2, r3
 8006368:	d204      	bcs.n	8006374 <find_volume+0x2b0>
 800636a:	230d      	movs	r3, #13
 800636c:	e0eb      	b.n	8006546 <find_volume+0x482>
 800636e:	bf00      	nop
 8006370:	200005e0 	.word	0x200005e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006374:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800637c:	8952      	ldrh	r2, [r2, #10]
 800637e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <find_volume+0x2ca>
 800638a:	230d      	movs	r3, #13
 800638c:	e0db      	b.n	8006546 <find_volume+0x482>
		fmt = FS_FAT32;
 800638e:	2303      	movs	r3, #3
 8006390:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800639a:	4293      	cmp	r3, r2
 800639c:	d802      	bhi.n	80063a4 <find_volume+0x2e0>
 800639e:	2302      	movs	r3, #2
 80063a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d802      	bhi.n	80063b4 <find_volume+0x2f0>
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063c0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80063c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c6:	441a      	add	r2, r3
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80063cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	441a      	add	r2, r3
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80063d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d11e      	bne.n	800641c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	3330      	adds	r3, #48	@ 0x30
 80063e2:	332a      	adds	r3, #42	@ 0x2a
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fc53 	bl	8004c90 <ld_word>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <find_volume+0x330>
 80063f0:	230d      	movs	r3, #13
 80063f2:	e0a8      	b.n	8006546 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80063f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f6:	891b      	ldrh	r3, [r3, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <find_volume+0x33c>
 80063fc:	230d      	movs	r3, #13
 80063fe:	e0a2      	b.n	8006546 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	3330      	adds	r3, #48	@ 0x30
 8006404:	332c      	adds	r3, #44	@ 0x2c
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fc5a 	bl	8004cc0 <ld_dword>
 800640c:	4602      	mov	r2, r0
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	647b      	str	r3, [r7, #68]	@ 0x44
 800641a:	e01f      	b.n	800645c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	891b      	ldrh	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <find_volume+0x364>
 8006424:	230d      	movs	r3, #13
 8006426:	e08e      	b.n	8006546 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800642e:	441a      	add	r2, r3
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006438:	2b02      	cmp	r3, #2
 800643a:	d103      	bne.n	8006444 <find_volume+0x380>
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	e00a      	b.n	800645a <find_volume+0x396>
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	4613      	mov	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	085a      	lsrs	r2, r3, #1
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800645a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006462:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006466:	0a5b      	lsrs	r3, r3, #9
 8006468:	429a      	cmp	r2, r3
 800646a:	d201      	bcs.n	8006470 <find_volume+0x3ac>
 800646c:	230d      	movs	r3, #13
 800646e:	e06a      	b.n	8006546 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	f04f 32ff 	mov.w	r2, #4294967295
 8006476:	611a      	str	r2, [r3, #16]
 8006478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	2280      	movs	r2, #128	@ 0x80
 8006484:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006486:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800648a:	2b03      	cmp	r3, #3
 800648c:	d149      	bne.n	8006522 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	3330      	adds	r3, #48	@ 0x30
 8006492:	3330      	adds	r3, #48	@ 0x30
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fbfb 	bl	8004c90 <ld_word>
 800649a:	4603      	mov	r3, r0
 800649c:	2b01      	cmp	r3, #1
 800649e:	d140      	bne.n	8006522 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80064a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064a2:	3301      	adds	r3, #1
 80064a4:	4619      	mov	r1, r3
 80064a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064a8:	f7fe fea2 	bl	80051f0 <move_window>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d137      	bne.n	8006522 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	2200      	movs	r2, #0
 80064b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	3330      	adds	r3, #48	@ 0x30
 80064bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fbe5 	bl	8004c90 <ld_word>
 80064c6:	4603      	mov	r3, r0
 80064c8:	461a      	mov	r2, r3
 80064ca:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d127      	bne.n	8006522 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	3330      	adds	r3, #48	@ 0x30
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fbf2 	bl	8004cc0 <ld_dword>
 80064dc:	4603      	mov	r3, r0
 80064de:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <find_volume+0x48c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d11e      	bne.n	8006522 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	3330      	adds	r3, #48	@ 0x30
 80064e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe fbe7 	bl	8004cc0 <ld_dword>
 80064f2:	4603      	mov	r3, r0
 80064f4:	4a17      	ldr	r2, [pc, #92]	@ (8006554 <find_volume+0x490>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d113      	bne.n	8006522 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	3330      	adds	r3, #48	@ 0x30
 80064fe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fbdc 	bl	8004cc0 <ld_dword>
 8006508:	4602      	mov	r2, r0
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	3330      	adds	r3, #48	@ 0x30
 8006512:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fbd2 	bl	8004cc0 <ld_dword>
 800651c:	4602      	mov	r2, r0
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006528:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800652a:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <find_volume+0x494>)
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <find_volume+0x494>)
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <find_volume+0x494>)
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800653e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006540:	f7fe fdee 	bl	8005120 <clear_lock>
#endif
	return FR_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3758      	adds	r7, #88	@ 0x58
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	41615252 	.word	0x41615252
 8006554:	61417272 	.word	0x61417272
 8006558:	200005e4 	.word	0x200005e4

0800655c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006566:	2309      	movs	r3, #9
 8006568:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01c      	beq.n	80065aa <validate+0x4e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <validate+0x4e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <validate+0x4e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	889a      	ldrh	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	88db      	ldrh	r3, [r3, #6]
 800658c:	429a      	cmp	r2, r3
 800658e:	d10c      	bne.n	80065aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fada 	bl	8004b50 <disk_status>
 800659c:	4603      	mov	r3, r0
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <validate+0x4e>
			res = FR_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <validate+0x5a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	e000      	b.n	80065b8 <validate+0x5c>
 80065b6:	2300      	movs	r3, #0
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	6013      	str	r3, [r2, #0]
	return res;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80065da:	f107 0310 	add.w	r3, r7, #16
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fcd5 	bl	8005f8e <get_ldnumber>
 80065e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	da01      	bge.n	80065f0 <f_mount+0x28>
 80065ec:	230b      	movs	r3, #11
 80065ee:	e02b      	b.n	8006648 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80065f0:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <f_mount+0x88>)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006600:	69b8      	ldr	r0, [r7, #24]
 8006602:	f7fe fd8d 	bl	8005120 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	490d      	ldr	r1, [pc, #52]	@ (8006650 <f_mount+0x88>)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <f_mount+0x66>
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d001      	beq.n	8006632 <f_mount+0x6a>
 800662e:	2300      	movs	r3, #0
 8006630:	e00a      	b.n	8006648 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006632:	f107 010c 	add.w	r1, r7, #12
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	2200      	movs	r2, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fd41 	bl	80060c4 <find_volume>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	200005e0 	.word	0x200005e0

08006654 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b098      	sub	sp, #96	@ 0x60
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <f_open+0x18>
 8006668:	2309      	movs	r3, #9
 800666a:	e1a9      	b.n	80069c0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006672:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006674:	79fa      	ldrb	r2, [r7, #7]
 8006676:	f107 0110 	add.w	r1, r7, #16
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fd20 	bl	80060c4 <find_volume>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800668a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800668e:	2b00      	cmp	r3, #0
 8006690:	f040 818d 	bne.w	80069ae <f_open+0x35a>
		dj.obj.fs = fs;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	f107 0314 	add.w	r3, r7, #20
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fc03 	bl	8005eac <follow_path>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80066ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d118      	bne.n	80066e6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80066b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da03      	bge.n	80066c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80066be:	2306      	movs	r3, #6
 80066c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80066c4:	e00f      	b.n	80066e6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf8c      	ite	hi
 80066cc:	2301      	movhi	r3, #1
 80066ce:	2300      	movls	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fbd8 	bl	8004e90 <chk_lock>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	f003 031c 	and.w	r3, r3, #28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d07f      	beq.n	80067f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80066f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d017      	beq.n	8006728 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80066f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d10e      	bne.n	800671e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006700:	f7fe fc22 	bl	8004f48 <enq_lock>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <f_open+0xc4>
 800670a:	f107 0314 	add.w	r3, r7, #20
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fb06 	bl	8005d20 <dir_register>
 8006714:	4603      	mov	r3, r0
 8006716:	e000      	b.n	800671a <f_open+0xc6>
 8006718:	2312      	movs	r3, #18
 800671a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	f043 0308 	orr.w	r3, r3, #8
 8006724:	71fb      	strb	r3, [r7, #7]
 8006726:	e010      	b.n	800674a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006728:	7ebb      	ldrb	r3, [r7, #26]
 800672a:	f003 0311 	and.w	r3, r3, #17
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <f_open+0xe6>
					res = FR_DENIED;
 8006732:	2307      	movs	r3, #7
 8006734:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006738:	e007      	b.n	800674a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <f_open+0xf6>
 8006744:	2308      	movs	r3, #8
 8006746:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800674a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800674e:	2b00      	cmp	r3, #0
 8006750:	d168      	bne.n	8006824 <f_open+0x1d0>
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d063      	beq.n	8006824 <f_open+0x1d0>
				dw = GET_FATTIME();
 800675c:	f7fd ffa8 	bl	80046b0 <get_fattime>
 8006760:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006764:	330e      	adds	r3, #14
 8006766:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe fae7 	bl	8004d3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	3316      	adds	r3, #22
 8006772:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fae1 	bl	8004d3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	330b      	adds	r3, #11
 800677e:	2220      	movs	r2, #32
 8006780:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fa35 	bl	8005bf8 <ld_clust>
 800678e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006794:	2200      	movs	r2, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fa4d 	bl	8005c36 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679e:	331c      	adds	r3, #28
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe faca 	bl	8004d3c <st_dword>
					fs->wflag = 1;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2201      	movs	r2, #1
 80067ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80067ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d037      	beq.n	8006824 <f_open+0x1d0>
						dw = fs->winsect;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	2200      	movs	r2, #0
 80067c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe ff60 	bl	8005688 <remove_chain>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80067ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d126      	bne.n	8006824 <f_open+0x1d0>
							res = move_window(fs, dw);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fd08 	bl	80051f0 <move_window>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067ea:	3a01      	subs	r2, #1
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	e019      	b.n	8006824 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80067f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d115      	bne.n	8006824 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80067f8:	7ebb      	ldrb	r3, [r7, #26]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <f_open+0x1b6>
					res = FR_NO_FILE;
 8006802:	2304      	movs	r3, #4
 8006804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006808:	e00c      	b.n	8006824 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <f_open+0x1d0>
 8006814:	7ebb      	ldrb	r3, [r7, #26]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <f_open+0x1d0>
						res = FR_DENIED;
 800681e:	2307      	movs	r3, #7
 8006820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006824:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006828:	2b00      	cmp	r3, #0
 800682a:	d126      	bne.n	800687a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	2b01      	cmp	r3, #1
 8006850:	bf8c      	ite	hi
 8006852:	2301      	movhi	r3, #1
 8006854:	2300      	movls	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	f107 0314 	add.w	r3, r7, #20
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe fb93 	bl	8004f8c <inc_lock>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <f_open+0x226>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800687a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 8095 	bne.w	80069ae <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff f9b4 	bl	8005bf8 <ld_clust>
 8006890:	4602      	mov	r2, r0
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006898:	331c      	adds	r3, #28
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe fa10 	bl	8004cc0 <ld_dword>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	88da      	ldrh	r2, [r3, #6]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	79fa      	ldrb	r2, [r7, #7]
 80068be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3330      	adds	r3, #48	@ 0x30
 80068d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068da:	2100      	movs	r1, #0
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fa7a 	bl	8004dd6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d060      	beq.n	80069ae <f_open+0x35a>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d05c      	beq.n	80069ae <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	895b      	ldrh	r3, [r3, #10]
 8006900:	025b      	lsls	r3, r3, #9
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006910:	e016      	b.n	8006940 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fd25 	bl	8005366 <get_fat>
 800691c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800691e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006920:	2b01      	cmp	r3, #1
 8006922:	d802      	bhi.n	800692a <f_open+0x2d6>
 8006924:	2302      	movs	r3, #2
 8006926:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800692a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d102      	bne.n	8006938 <f_open+0x2e4>
 8006932:	2301      	movs	r3, #1
 8006934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006938:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800693a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <f_open+0x2fc>
 8006948:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800694a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800694c:	429a      	cmp	r2, r3
 800694e:	d8e0      	bhi.n	8006912 <f_open+0x2be>
				}
				fp->clust = clst;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006954:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006956:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800695a:	2b00      	cmp	r3, #0
 800695c:	d127      	bne.n	80069ae <f_open+0x35a>
 800695e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006964:	2b00      	cmp	r3, #0
 8006966:	d022      	beq.n	80069ae <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fcdb 	bl	8005328 <clust2sect>
 8006972:	6478      	str	r0, [r7, #68]	@ 0x44
 8006974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <f_open+0x32e>
						res = FR_INT_ERR;
 800697a:	2302      	movs	r3, #2
 800697c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006980:	e015      	b.n	80069ae <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006984:	0a5a      	lsrs	r2, r3, #9
 8006986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	7858      	ldrb	r0, [r3, #1]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	2301      	movs	r3, #1
 800699e:	f7fe f919 	bl	8004bd4 <disk_read>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <f_open+0x35a>
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80069ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <f_open+0x368>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80069bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3760      	adds	r7, #96	@ 0x60
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	@ 0x30
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f107 0210 	add.w	r2, r7, #16
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fdb7 	bl	800655c <validate>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80069f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d107      	bne.n	8006a0c <f_write+0x44>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	7d5b      	ldrb	r3, [r3, #21]
 8006a00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006a04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <f_write+0x4a>
 8006a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a10:	e14b      	b.n	8006caa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	7d1b      	ldrb	r3, [r3, #20]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <f_write+0x5a>
 8006a1e:	2307      	movs	r3, #7
 8006a20:	e143      	b.n	8006caa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	441a      	add	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f080 812d 	bcs.w	8006c8e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006a3c:	e127      	b.n	8006c8e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f040 80e3 	bne.w	8006c12 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	0a5b      	lsrs	r3, r3, #9
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	8952      	ldrh	r2, [r2, #10]
 8006a56:	3a01      	subs	r2, #1
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d143      	bne.n	8006aea <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10c      	bne.n	8006a84 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d11a      	bne.n	8006aac <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fe69 	bl	8005752 <create_chain>
 8006a80:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006a82:	e013      	b.n	8006aac <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	4619      	mov	r1, r3
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7fe fef5 	bl	8005882 <clmt_clust>
 8006a98:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006a9a:	e007      	b.n	8006aac <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f7fe fe54 	bl	8005752 <create_chain>
 8006aaa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80f2 	beq.w	8006c98 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d104      	bne.n	8006ac4 <f_write+0xfc>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	755a      	strb	r2, [r3, #21]
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e0f2      	b.n	8006caa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d104      	bne.n	8006ad6 <f_write+0x10e>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	755a      	strb	r2, [r3, #21]
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e0e9      	b.n	8006caa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ada:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <f_write+0x122>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7d1b      	ldrb	r3, [r3, #20]
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da18      	bge.n	8006b26 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	7858      	ldrb	r0, [r3, #1]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	2301      	movs	r3, #1
 8006b04:	f7fe f886 	bl	8004c14 <disk_write>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <f_write+0x150>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	755a      	strb	r2, [r3, #21]
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0c8      	b.n	8006caa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	7d1b      	ldrb	r3, [r3, #20]
 8006b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f7fe fbfa 	bl	8005328 <clust2sect>
 8006b34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <f_write+0x17e>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	755a      	strb	r2, [r3, #21]
 8006b42:	2302      	movs	r3, #2
 8006b44:	e0b1      	b.n	8006caa <f_write+0x2e2>
			sect += csect;
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0a5b      	lsrs	r3, r3, #9
 8006b52:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d03c      	beq.n	8006bd4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	4413      	add	r3, r2
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	8952      	ldrh	r2, [r2, #10]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d905      	bls.n	8006b74 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	895b      	ldrh	r3, [r3, #10]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	7858      	ldrb	r0, [r3, #1]
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	69f9      	ldr	r1, [r7, #28]
 8006b7e:	f7fe f849 	bl	8004c14 <disk_write>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <f_write+0x1ca>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	755a      	strb	r2, [r3, #21]
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e08b      	b.n	8006caa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d915      	bls.n	8006bcc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	025b      	lsls	r3, r3, #9
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f7fe f8eb 	bl	8004d94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	7d1b      	ldrb	r3, [r3, #20]
 8006bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	025b      	lsls	r3, r3, #9
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006bd2:	e03f      	b.n	8006c54 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d016      	beq.n	8006c0c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d210      	bcs.n	8006c0c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	7858      	ldrb	r0, [r3, #1]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	f7fd ffec 	bl	8004bd4 <disk_read>
 8006bfc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	755a      	strb	r2, [r3, #21]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e04e      	b.n	8006caa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d901      	bls.n	8006c2c <f_write+0x264>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3a:	4413      	add	r3, r2
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe f8a7 	bl	8004d94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	7d1b      	ldrb	r3, [r3, #20]
 8006c4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	4413      	add	r3, r2
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	619a      	str	r2, [r3, #24]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	bf38      	it	cc
 8006c74:	461a      	movcc	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	441a      	add	r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f47f aed4 	bne.w	8006a3e <f_write+0x76>
 8006c96:	e000      	b.n	8006c9a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c98:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	7d1b      	ldrb	r3, [r3, #20]
 8006c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	@ 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f107 0208 	add.w	r2, r7, #8
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fc4a 	bl	800655c <validate>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d168      	bne.n	8006da4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7d1b      	ldrb	r3, [r3, #20]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d062      	beq.n	8006da4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7d1b      	ldrb	r3, [r3, #20]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da15      	bge.n	8006d14 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	7858      	ldrb	r0, [r3, #1]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1a      	ldr	r2, [r3, #32]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f7fd ff8c 	bl	8004c14 <disk_write>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <f_sync+0x54>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e04f      	b.n	8006da6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7d1b      	ldrb	r3, [r3, #20]
 8006d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006d14:	f7fd fccc 	bl	80046b0 <get_fattime>
 8006d18:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fe fa64 	bl	80051f0 <move_window>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d138      	bne.n	8006da4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	330b      	adds	r3, #11
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	330b      	adds	r3, #11
 8006d42:	f042 0220 	orr.w	r2, r2, #32
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	f7fe ff6e 	bl	8005c36 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f103 021c 	add.w	r2, r3, #28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4619      	mov	r1, r3
 8006d66:	4610      	mov	r0, r2
 8006d68:	f7fd ffe8 	bl	8004d3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3316      	adds	r3, #22
 8006d70:	6939      	ldr	r1, [r7, #16]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fd ffe2 	bl	8004d3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3312      	adds	r3, #18
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd ffc1 	bl	8004d06 <st_word>
					fs->wflag = 1;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2201      	movs	r2, #1
 8006d88:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fa5d 	bl	800524c <sync_fs>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	7d1b      	ldrb	r3, [r3, #20]
 8006d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ff7b 	bl	8006cb2 <f_sync>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d118      	bne.n	8006df8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f107 0208 	add.w	r2, r7, #8
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fbc4 	bl	800655c <validate>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10c      	bne.n	8006df8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe f960 	bl	80050a8 <dec_lock>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b09d      	sub	sp, #116	@ 0x74
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	460b      	mov	r3, r1
 8006e12:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8006e14:	2301      	movs	r3, #1
 8006e16:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e1c:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006e1e:	f107 030c 	add.w	r3, r7, #12
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff f8b3 	bl	8005f8e <get_ldnumber>
 8006e28:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da02      	bge.n	8006e36 <f_mkfs+0x32>
 8006e30:	230b      	movs	r3, #11
 8006e32:	f000 bc0d 	b.w	8007650 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8006e36:	4a94      	ldr	r2, [pc, #592]	@ (8007088 <f_mkfs+0x284>)
 8006e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <f_mkfs+0x4a>
 8006e42:	4a91      	ldr	r2, [pc, #580]	@ (8007088 <f_mkfs+0x284>)
 8006e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e50:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8006e5a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fd fe90 	bl	8004b84 <disk_initialize>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8006e6a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <f_mkfs+0x76>
 8006e76:	2303      	movs	r3, #3
 8006e78:	e3ea      	b.n	8007650 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006e7a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <f_mkfs+0x86>
 8006e86:	230a      	movs	r3, #10
 8006e88:	e3e2      	b.n	8007650 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8006e8a:	f107 0214 	add.w	r2, r7, #20
 8006e8e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006e92:	2103      	movs	r1, #3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fd fedd 	bl	8004c54 <disk_ioctl>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10c      	bne.n	8006eba <f_mkfs+0xb6>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <f_mkfs+0xb6>
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eac:	d805      	bhi.n	8006eba <f_mkfs+0xb6>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	1e5a      	subs	r2, r3, #1
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <f_mkfs+0xba>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8006ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ec2:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <f_mkfs+0xce>
 8006eca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d309      	bcc.n	8006ee6 <f_mkfs+0xe2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ed8:	d805      	bhi.n	8006ee6 <f_mkfs+0xe2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	1e5a      	subs	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <f_mkfs+0xe6>
 8006ee6:	2313      	movs	r3, #19
 8006ee8:	e3b2      	b.n	8007650 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8006eea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8006ef8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8006f04:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <f_mkfs+0x114>
 8006f14:	230e      	movs	r3, #14
 8006f16:	e39b      	b.n	8007650 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8006f18:	f107 0210 	add.w	r2, r7, #16
 8006f1c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006f20:	2101      	movs	r1, #1
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fd fe96 	bl	8004c54 <disk_ioctl>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <f_mkfs+0x12e>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e38e      	b.n	8007650 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <f_mkfs+0x13c>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <f_mkfs+0x13e>
 8006f40:	233f      	movs	r3, #63	@ 0x3f
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d901      	bls.n	8006f50 <f_mkfs+0x14c>
 8006f4c:	230e      	movs	r3, #14
 8006f4e:	e37f      	b.n	8007650 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f5c:	d801      	bhi.n	8006f62 <f_mkfs+0x15e>
 8006f5e:	230e      	movs	r3, #14
 8006f60:	e376      	b.n	8007650 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b80      	cmp	r3, #128	@ 0x80
 8006f66:	d901      	bls.n	8006f6c <f_mkfs+0x168>
 8006f68:	2313      	movs	r3, #19
 8006f6a:	e371      	b.n	8007650 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d004      	beq.n	8006f8a <f_mkfs+0x186>
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006f90:	e009      	b.n	8006fa6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <f_mkfs+0x19c>
 8006f9c:	2313      	movs	r3, #19
 8006f9e:	e357      	b.n	8007650 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8006faa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d13c      	bne.n	800702c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8006fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	0c5b      	lsrs	r3, r3, #17
 8006fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc6:	e005      	b.n	8006fd4 <f_mkfs+0x1d0>
 8006fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fca:	3301      	adds	r3, #1
 8006fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800708c <f_mkfs+0x288>)
 8006fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <f_mkfs+0x1ec>
 8006fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800708c <f_mkfs+0x288>)
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d2eb      	bcs.n	8006fc8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	3302      	adds	r3, #2
 8006ffe:	009a      	lsls	r2, r3, #2
 8007000:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007002:	4413      	add	r3, r2
 8007004:	1e5a      	subs	r2, r3, #1
 8007006:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800700e:	2320      	movs	r3, #32
 8007010:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8007012:	2300      	movs	r3, #0
 8007014:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800701c:	4293      	cmp	r3, r2
 800701e:	d903      	bls.n	8007028 <f_mkfs+0x224>
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	4a1b      	ldr	r2, [pc, #108]	@ (8007090 <f_mkfs+0x28c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d952      	bls.n	80070ce <f_mkfs+0x2ca>
 8007028:	230e      	movs	r3, #14
 800702a:	e311      	b.n	8007650 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800702c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800702e:	2b00      	cmp	r3, #0
 8007030:	d11b      	bne.n	800706a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	0b1b      	lsrs	r3, r3, #12
 8007036:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007038:	2300      	movs	r3, #0
 800703a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800703c:	2301      	movs	r3, #1
 800703e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007040:	e005      	b.n	800704e <f_mkfs+0x24a>
 8007042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007044:	3301      	adds	r3, #1
 8007046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	653b      	str	r3, [r7, #80]	@ 0x50
 800704e:	4a11      	ldr	r2, [pc, #68]	@ (8007094 <f_mkfs+0x290>)
 8007050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <f_mkfs+0x266>
 800705a:	4a0e      	ldr	r2, [pc, #56]	@ (8007094 <f_mkfs+0x290>)
 800705c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800705e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007062:	461a      	mov	r2, r3
 8007064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007066:	4293      	cmp	r3, r2
 8007068:	d2eb      	bcs.n	8007042 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800707a:	4293      	cmp	r3, r2
 800707c:	d90c      	bls.n	8007098 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	3302      	adds	r3, #2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007086:	e012      	b.n	80070ae <f_mkfs+0x2aa>
 8007088:	200005e0 	.word	0x200005e0
 800708c:	080078b4 	.word	0x080078b4
 8007090:	0ffffff5 	.word	0x0ffffff5
 8007094:	080078c4 	.word	0x080078c4
				} else {
					fmt = FS_FAT12;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	4613      	mov	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4413      	add	r3, r2
 80070a6:	3301      	adds	r3, #1
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	3303      	adds	r3, #3
 80070ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80070ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80070b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070b2:	4413      	add	r3, r2
 80070b4:	1e5a      	subs	r2, r3, #1
 80070b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80070be:	2301      	movs	r3, #1
 80070c0:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80070c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80070ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d2:	4413      	add	r3, r2
 80070d4:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80070d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070da:	fb03 f202 	mul.w	r2, r3, r2
 80070de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e0:	4413      	add	r3, r2
 80070e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070e4:	4413      	add	r3, r2
 80070e6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	1e5a      	subs	r2, r3, #1
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	425b      	negs	r3, r3
 80070f4:	401a      	ands	r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80070fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007100:	2b03      	cmp	r3, #3
 8007102:	d108      	bne.n	8007116 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8007104:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007108:	4413      	add	r3, r2
 800710a:	657b      	str	r3, [r7, #84]	@ 0x54
 800710c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800710e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007110:	4413      	add	r3, r2
 8007112:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007114:	e006      	b.n	8007124 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8007116:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007120:	4413      	add	r3, r2
 8007122:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8007124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007126:	011a      	lsls	r2, r3, #4
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	441a      	add	r2, r3
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	429a      	cmp	r2, r3
 8007134:	d901      	bls.n	800713a <f_mkfs+0x336>
 8007136:	230e      	movs	r3, #14
 8007138:	e28a      	b.n	8007650 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007142:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714c:	1ad2      	subs	r2, r2, r3
 800714e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8007156:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800715a:	2b03      	cmp	r3, #3
 800715c:	d10f      	bne.n	800717e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007164:	4293      	cmp	r3, r2
 8007166:	d80a      	bhi.n	800717e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <f_mkfs+0x376>
 800716e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d144      	bne.n	8007204 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800717a:	230e      	movs	r3, #14
 800717c:	e268      	b.n	8007650 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800717e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007182:	2b02      	cmp	r3, #2
 8007184:	d133      	bne.n	80071ee <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800718c:	4293      	cmp	r3, r2
 800718e:	d91e      	bls.n	80071ce <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d107      	bne.n	80071a6 <f_mkfs+0x3a2>
 8007196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	2b40      	cmp	r3, #64	@ 0x40
 800719c:	d803      	bhi.n	80071a6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800719e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	e033      	b.n	800720e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80071a6:	7afb      	ldrb	r3, [r7, #11]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80071b0:	2303      	movs	r3, #3
 80071b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80071b6:	e02a      	b.n	800720e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d105      	bne.n	80071ca <f_mkfs+0x3c6>
 80071be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b80      	cmp	r3, #128	@ 0x80
 80071c8:	d91e      	bls.n	8007208 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80071ca:	230e      	movs	r3, #14
 80071cc:	e240      	b.n	8007650 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d80a      	bhi.n	80071ee <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <f_mkfs+0x3e6>
 80071de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b80      	cmp	r3, #128	@ 0x80
 80071e8:	d910      	bls.n	800720c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80071ea:	230e      	movs	r3, #14
 80071ec:	e230      	b.n	8007650 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80071ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10c      	bne.n	8007210 <f_mkfs+0x40c>
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d907      	bls.n	8007210 <f_mkfs+0x40c>
 8007200:	230e      	movs	r3, #14
 8007202:	e225      	b.n	8007650 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007204:	bf00      	nop
 8007206:	e6ce      	b.n	8006fa6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007208:	bf00      	nop
 800720a:	e6cc      	b.n	8006fa6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800720c:	bf00      	nop
			pau = au;
 800720e:	e6ca      	b.n	8006fa6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8007210:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007212:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007214:	461a      	mov	r2, r3
 8007216:	2100      	movs	r1, #0
 8007218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800721a:	f7fd fddc 	bl	8004dd6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800721e:	220b      	movs	r2, #11
 8007220:	49b2      	ldr	r1, [pc, #712]	@ (80074ec <f_mkfs+0x6e8>)
 8007222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007224:	f7fd fdb6 	bl	8004d94 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	330b      	adds	r3, #11
 800722c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800722e:	4611      	mov	r1, r2
 8007230:	4618      	mov	r0, r3
 8007232:	f7fd fd68 	bl	8004d06 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	330d      	adds	r3, #13
 800723a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	330e      	adds	r3, #14
 8007244:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007246:	b292      	uxth	r2, r2
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f7fd fd5b 	bl	8004d06 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8007250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007252:	3310      	adds	r3, #16
 8007254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725c:	f103 0211 	add.w	r2, r3, #17
 8007260:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007264:	2b03      	cmp	r3, #3
 8007266:	d002      	beq.n	800726e <f_mkfs+0x46a>
 8007268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800726a:	b29b      	uxth	r3, r3
 800726c:	e000      	b.n	8007270 <f_mkfs+0x46c>
 800726e:	2300      	movs	r3, #0
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fd fd47 	bl	8004d06 <st_word>
		if (sz_vol < 0x10000) {
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727e:	d208      	bcs.n	8007292 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	3313      	adds	r3, #19
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	b292      	uxth	r2, r2
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f7fd fd3b 	bl	8004d06 <st_word>
 8007290:	e006      	b.n	80072a0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	3320      	adds	r3, #32
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7fd fd4e 	bl	8004d3c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	3315      	adds	r3, #21
 80072a4:	22f8      	movs	r2, #248	@ 0xf8
 80072a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	3318      	adds	r3, #24
 80072ac:	213f      	movs	r1, #63	@ 0x3f
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fd fd29 	bl	8004d06 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	331a      	adds	r3, #26
 80072b8:	21ff      	movs	r1, #255	@ 0xff
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd fd23 	bl	8004d06 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	331c      	adds	r3, #28
 80072c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd fd38 	bl	8004d3c <st_dword>
		if (fmt == FS_FAT32) {
 80072cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d131      	bne.n	8007338 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80072da:	f7fd f9e9 	bl	80046b0 <get_fattime>
 80072de:	4603      	mov	r3, r0
 80072e0:	4619      	mov	r1, r3
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7fd fd2a 	bl	8004d3c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	3324      	adds	r3, #36	@ 0x24
 80072ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fd fd24 	bl	8004d3c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	332c      	adds	r3, #44	@ 0x2c
 80072f8:	2102      	movs	r1, #2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd fd1e 	bl	8004d3c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	3330      	adds	r3, #48	@ 0x30
 8007304:	2101      	movs	r1, #1
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd fcfd 	bl	8004d06 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	3332      	adds	r3, #50	@ 0x32
 8007310:	2106      	movs	r1, #6
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd fcf7 	bl	8004d06 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	3340      	adds	r3, #64	@ 0x40
 800731c:	2280      	movs	r2, #128	@ 0x80
 800731e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	3342      	adds	r3, #66	@ 0x42
 8007324:	2229      	movs	r2, #41	@ 0x29
 8007326:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	3347      	adds	r3, #71	@ 0x47
 800732c:	2213      	movs	r2, #19
 800732e:	4970      	ldr	r1, [pc, #448]	@ (80074f0 <f_mkfs+0x6ec>)
 8007330:	4618      	mov	r0, r3
 8007332:	f7fd fd2f 	bl	8004d94 <mem_cpy>
 8007336:	e020      	b.n	800737a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800733e:	f7fd f9b7 	bl	80046b0 <get_fattime>
 8007342:	4603      	mov	r3, r0
 8007344:	4619      	mov	r1, r3
 8007346:	4620      	mov	r0, r4
 8007348:	f7fd fcf8 	bl	8004d3c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	3316      	adds	r3, #22
 8007350:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007352:	b292      	uxth	r2, r2
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd fcd5 	bl	8004d06 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	3324      	adds	r3, #36	@ 0x24
 8007360:	2280      	movs	r2, #128	@ 0x80
 8007362:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	3326      	adds	r3, #38	@ 0x26
 8007368:	2229      	movs	r2, #41	@ 0x29
 800736a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	332b      	adds	r3, #43	@ 0x2b
 8007370:	2213      	movs	r2, #19
 8007372:	4960      	ldr	r1, [pc, #384]	@ (80074f4 <f_mkfs+0x6f0>)
 8007374:	4618      	mov	r0, r3
 8007376:	f7fd fd0d 	bl	8004d94 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007380:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd fcbe 	bl	8004d06 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800738a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800738e:	2301      	movs	r3, #1
 8007390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007392:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007394:	f7fd fc3e 	bl	8004c14 <disk_write>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <f_mkfs+0x59e>
 800739e:	2301      	movs	r3, #1
 80073a0:	e156      	b.n	8007650 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80073a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d140      	bne.n	800742c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	1d9a      	adds	r2, r3, #6
 80073ae:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80073b2:	2301      	movs	r3, #1
 80073b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073b6:	f7fd fc2d 	bl	8004c14 <disk_write>
			mem_set(buf, 0, ss);
 80073ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073bc:	461a      	mov	r2, r3
 80073be:	2100      	movs	r1, #0
 80073c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073c2:	f7fd fd08 	bl	8004dd6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80073c6:	494c      	ldr	r1, [pc, #304]	@ (80074f8 <f_mkfs+0x6f4>)
 80073c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ca:	f7fd fcb7 	bl	8004d3c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80073d4:	4949      	ldr	r1, [pc, #292]	@ (80074fc <f_mkfs+0x6f8>)
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd fcb0 	bl	8004d3c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7fd fca7 	bl	8004d3c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80073f4:	2102      	movs	r1, #2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fd fca0 	bl	8004d3c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007402:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007406:	4618      	mov	r0, r3
 8007408:	f7fd fc7d 	bl	8004d06 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	1dda      	adds	r2, r3, #7
 8007410:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8007414:	2301      	movs	r3, #1
 8007416:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007418:	f7fd fbfc 	bl	8004c14 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8007424:	2301      	movs	r3, #1
 8007426:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007428:	f7fd fbf4 	bl	8004c14 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800742c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800742e:	2100      	movs	r1, #0
 8007430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007432:	f7fd fcd0 	bl	8004dd6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007438:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800743a:	2300      	movs	r3, #0
 800743c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800743e:	e04b      	b.n	80074d8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8007440:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007444:	2b03      	cmp	r3, #3
 8007446:	d113      	bne.n	8007470 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007448:	f06f 0107 	mvn.w	r1, #7
 800744c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800744e:	f7fd fc75 	bl	8004d3c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	3304      	adds	r3, #4
 8007456:	f04f 31ff 	mov.w	r1, #4294967295
 800745a:	4618      	mov	r0, r3
 800745c:	f7fd fc6e 	bl	8004d3c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	3308      	adds	r3, #8
 8007464:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007468:	4618      	mov	r0, r3
 800746a:	f7fd fc67 	bl	8004d3c <st_dword>
 800746e:	e00b      	b.n	8007488 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007470:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <f_mkfs+0x678>
 8007478:	4b21      	ldr	r3, [pc, #132]	@ (8007500 <f_mkfs+0x6fc>)
 800747a:	e001      	b.n	8007480 <f_mkfs+0x67c>
 800747c:	f06f 0307 	mvn.w	r3, #7
 8007480:	4619      	mov	r1, r3
 8007482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007484:	f7fd fc5a 	bl	8004d3c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800748a:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800748c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007490:	4293      	cmp	r3, r2
 8007492:	bf28      	it	cs
 8007494:	4613      	movcs	r3, r2
 8007496:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007498:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800749c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800749e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074a2:	f7fd fbb7 	bl	8004c14 <disk_write>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <f_mkfs+0x6ac>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e0cf      	b.n	8007650 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80074b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80074b2:	461a      	mov	r2, r3
 80074b4:	2100      	movs	r1, #0
 80074b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074b8:	f7fd fc8d 	bl	8004dd6 <mem_set>
				sect += n; nsect -= n;
 80074bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074c0:	4413      	add	r3, r2
 80074c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80074c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80074c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 80074cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1dc      	bne.n	800748c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80074d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074d4:	3301      	adds	r3, #1
 80074d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3af      	bcc.n	8007440 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80074e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d10d      	bne.n	8007504 <f_mkfs+0x700>
 80074e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ea:	e00c      	b.n	8007506 <f_mkfs+0x702>
 80074ec:	080077d4 	.word	0x080077d4
 80074f0:	080077e0 	.word	0x080077e0
 80074f4:	080077f4 	.word	0x080077f4
 80074f8:	41615252 	.word	0x41615252
 80074fc:	61417272 	.word	0x61417272
 8007500:	00fffff8 	.word	0x00fffff8
 8007504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007506:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007508:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800750a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750c:	4293      	cmp	r3, r2
 800750e:	bf28      	it	cs
 8007510:	4613      	movcs	r3, r2
 8007512:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007514:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8007518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800751a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800751c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800751e:	f7fd fb79 	bl	8004c14 <disk_write>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <f_mkfs+0x728>
 8007528:	2301      	movs	r3, #1
 800752a:	e091      	b.n	8007650 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800752c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800752e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007530:	4413      	add	r3, r2
 8007532:	667b      	str	r3, [r7, #100]	@ 0x64
 8007534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800753c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e2      	bne.n	8007508 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007542:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007546:	2b03      	cmp	r3, #3
 8007548:	d103      	bne.n	8007552 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800754a:	230c      	movs	r3, #12
 800754c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8007550:	e010      	b.n	8007574 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007558:	d303      	bcc.n	8007562 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800755a:	2306      	movs	r3, #6
 800755c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8007560:	e008      	b.n	8007574 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007562:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007566:	2b02      	cmp	r3, #2
 8007568:	d101      	bne.n	800756e <f_mkfs+0x76a>
 800756a:	2304      	movs	r3, #4
 800756c:	e000      	b.n	8007570 <f_mkfs+0x76c>
 800756e:	2301      	movs	r3, #1
 8007570:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d15b      	bne.n	8007636 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800757e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007580:	461a      	mov	r2, r3
 8007582:	2100      	movs	r1, #0
 8007584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007586:	f7fd fc26 	bl	8004dd6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007590:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007594:	4618      	mov	r0, r3
 8007596:	f7fd fbb6 	bl	8004d06 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80075a0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	2201      	movs	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	3302      	adds	r3, #2
 80075b4:	2201      	movs	r2, #1
 80075b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	3303      	adds	r3, #3
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	3304      	adds	r3, #4
 80075c4:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80075c8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	441a      	add	r2, r3
 80075d0:	4b21      	ldr	r3, [pc, #132]	@ (8007658 <f_mkfs+0x854>)
 80075d2:	fba3 1302 	umull	r1, r3, r3, r2
 80075d6:	1ad2      	subs	r2, r2, r3
 80075d8:	0852      	lsrs	r2, r2, #1
 80075da:	4413      	add	r3, r2
 80075dc:	0b5b      	lsrs	r3, r3, #13
 80075de:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	3305      	adds	r3, #5
 80075e4:	22fe      	movs	r2, #254	@ 0xfe
 80075e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80075e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075ea:	089b      	lsrs	r3, r3, #2
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	3306      	adds	r3, #6
 80075f2:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	3307      	adds	r3, #7
 80075fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	3308      	adds	r3, #8
 8007608:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd fb96 	bl	8004d3c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	330c      	adds	r3, #12
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7fd fb8f 	bl	8004d3c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800761e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8007622:	2301      	movs	r3, #1
 8007624:	2200      	movs	r2, #0
 8007626:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007628:	f7fd faf4 	bl	8004c14 <disk_write>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <f_mkfs+0x832>
 8007632:	2301      	movs	r3, #1
 8007634:	e00c      	b.n	8007650 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007636:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800763a:	2200      	movs	r2, #0
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd fb08 	bl	8004c54 <disk_ioctl>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <f_mkfs+0x84a>
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <f_mkfs+0x84c>

	return FR_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3774      	adds	r7, #116	@ 0x74
 8007654:	46bd      	mov	sp, r7
 8007656:	bd90      	pop	{r4, r7, pc}
 8007658:	0515565b 	.word	0x0515565b

0800765c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007672:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 8007674:	7a5b      	ldrb	r3, [r3, #9]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d131      	bne.n	80076e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800767c:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 800767e:	7a5b      	ldrb	r3, [r3, #9]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	4b1a      	ldr	r3, [pc, #104]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 8007686:	2100      	movs	r1, #0
 8007688:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800768a:	4b19      	ldr	r3, [pc, #100]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 800768c:	7a5b      	ldrb	r3, [r3, #9]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4a17      	ldr	r2, [pc, #92]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800769a:	4b15      	ldr	r3, [pc, #84]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 800769c:	7a5b      	ldrb	r3, [r3, #9]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 80076a4:	4413      	add	r3, r2
 80076a6:	79fa      	ldrb	r2, [r7, #7]
 80076a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80076aa:	4b11      	ldr	r3, [pc, #68]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 80076ac:	7a5b      	ldrb	r3, [r3, #9]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	b2d1      	uxtb	r1, r2
 80076b4:	4a0e      	ldr	r2, [pc, #56]	@ (80076f0 <FATFS_LinkDriverEx+0x94>)
 80076b6:	7251      	strb	r1, [r2, #9]
 80076b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80076ba:	7dbb      	ldrb	r3, [r7, #22]
 80076bc:	3330      	adds	r3, #48	@ 0x30
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3301      	adds	r3, #1
 80076c8:	223a      	movs	r2, #58	@ 0x3a
 80076ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3302      	adds	r3, #2
 80076d0:	222f      	movs	r2, #47	@ 0x2f
 80076d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	3303      	adds	r3, #3
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000608 	.word	0x20000608

080076f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076fe:	2200      	movs	r2, #0
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff ffaa 	bl	800765c <FATFS_LinkDriverEx>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <memset>:
 8007712:	4402      	add	r2, r0
 8007714:	4603      	mov	r3, r0
 8007716:	4293      	cmp	r3, r2
 8007718:	d100      	bne.n	800771c <memset+0xa>
 800771a:	4770      	bx	lr
 800771c:	f803 1b01 	strb.w	r1, [r3], #1
 8007720:	e7f9      	b.n	8007716 <memset+0x4>
	...

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	4d0d      	ldr	r5, [pc, #52]	@ (800775c <__libc_init_array+0x38>)
 8007728:	4c0d      	ldr	r4, [pc, #52]	@ (8007760 <__libc_init_array+0x3c>)
 800772a:	1b64      	subs	r4, r4, r5
 800772c:	10a4      	asrs	r4, r4, #2
 800772e:	2600      	movs	r6, #0
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	4d0b      	ldr	r5, [pc, #44]	@ (8007764 <__libc_init_array+0x40>)
 8007736:	4c0c      	ldr	r4, [pc, #48]	@ (8007768 <__libc_init_array+0x44>)
 8007738:	f000 f818 	bl	800776c <_init>
 800773c:	1b64      	subs	r4, r4, r5
 800773e:	10a4      	asrs	r4, r4, #2
 8007740:	2600      	movs	r6, #0
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f855 3b04 	ldr.w	r3, [r5], #4
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f855 3b04 	ldr.w	r3, [r5], #4
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	080078dc 	.word	0x080078dc
 8007760:	080078dc 	.word	0x080078dc
 8007764:	080078dc 	.word	0x080078dc
 8007768:	080078e0 	.word	0x080078e0

0800776c <_init>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr

08007778 <_fini>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr
