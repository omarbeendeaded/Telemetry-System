
NRF_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d14  08002d14  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  08002d14  08002d14  00003d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d1c  08002d1c  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d1c  08002d1c  00003d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002d24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000014  08002d38  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002d38  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a324  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d20  00000000  00000000  0000e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00010088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000707  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9cc  00000000  00000000  000110cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4d1  00000000  00000000  0002fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7c72  00000000  00000000  0003bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002448  00000000  00000000  000f3c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ce4 	.word	0x08002ce4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08002ce4 	.word	0x08002ce4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CS_Select>:

#define NRF24_CS_PORT GPIOC
#define NRF24_CS_PIN  GPIO_PIN_2

void CS_Select (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <CS_Select+0x14>)
 80004fe:	f000 feb1 	bl	8001264 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020800 	.word	0x40020800

0800050c <CS_UnSelect>:

void CS_UnSelect(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2104      	movs	r1, #4
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <CS_UnSelect+0x14>)
 8000516:	f000 fea5 	bl	8001264 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020800 	.word	0x40020800

08000524 <CE_Enable>:

void CE_Enable (void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2102      	movs	r1, #2
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <CE_Enable+0x14>)
 800052e:	f000 fe99 	bl	8001264 <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020800 	.word	0x40020800

0800053c <CE_Disable>:

void CE_Disable (void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <CE_Disable+0x14>)
 8000546:	f000 fe8d 	bl	8001264 <HAL_GPIO_WritePin>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40020800 	.word	0x40020800

08000554 <nrf24_WriteReg>:


// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	b2db      	uxtb	r3, r3
 800056c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000572:	f7ff ffbf 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000576:	f107 010c 	add.w	r1, r7, #12
 800057a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057e:	2202      	movs	r2, #2
 8000580:	4804      	ldr	r0, [pc, #16]	@ (8000594 <nrf24_WriteReg+0x40>)
 8000582:	f001 fb76 	bl	8001c72 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000586:	f7ff ffc1 	bl	800050c <CS_UnSelect>
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000050 	.word	0x20000050

08000598 <nrf24_WriteReg_Multi>:

//write multiple bytes starting from a particular register
void nrf24_WriteReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	753b      	strb	r3, [r7, #20]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005b0:	f7ff ffa0 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80005b4:	f107 0114 	add.w	r1, r7, #20
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <nrf24_WriteReg_Multi+0x48>)
 80005be:	f001 fb58 	bl	8001c72 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <nrf24_WriteReg_Multi+0x48>)
 80005ce:	f001 fb50 	bl	8001c72 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005d2:	f7ff ff9b 	bl	800050c <CS_UnSelect>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000050 	.word	0x20000050

080005e4 <nrf24_ReadReg>:

//read single byte from a particular register
uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005f2:	f7ff ff7f 	bl	80004f4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	2201      	movs	r2, #1
 80005fc:	4808      	ldr	r0, [pc, #32]	@ (8000620 <nrf24_ReadReg+0x3c>)
 80005fe:	f001 fb38 	bl	8001c72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 1000);
 8000602:	f107 010f 	add.w	r1, r7, #15
 8000606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060a:	2201      	movs	r2, #1
 800060c:	4804      	ldr	r0, [pc, #16]	@ (8000620 <nrf24_ReadReg+0x3c>)
 800060e:	f001 fc74 	bl	8001efa <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000612:	f7ff ff7b 	bl	800050c <CS_UnSelect>

	return data;
 8000616:	7bfb      	ldrb	r3, [r7, #15]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000050 	.word	0x20000050

08000624 <NRF24_Init>:

	return data;
}

void NRF24_Init (void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//disable the chip before configuring the device
	CE_Disable();
 8000628:	f7ff ff88 	bl	800053c <CE_Disable>

	nrf24_WriteReg(CONFIG, 0);       //will be configured later
 800062c:	2100      	movs	r1, #0
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff90 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);        //No auto ack
 8000634:	2100      	movs	r1, #0
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff ff8c 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);    //not enabling any data pipe now
 800063c:	2100      	movs	r1, #0
 800063e:	2002      	movs	r0, #2
 8000640:	f7ff ff88 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);  //setup TX/RX address width to 5 bytes
 8000644:	2103      	movs	r1, #3
 8000646:	2003      	movs	r0, #3
 8000648:	f7ff ff84 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);   //disable retransmit
 800064c:	2100      	movs	r1, #0
 800064e:	2004      	movs	r0, #4
 8000650:	f7ff ff80 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);        //channel will be set later
 8000654:	2100      	movs	r1, #0
 8000656:	2005      	movs	r0, #5
 8000658:	f7ff ff7c 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);  //set rate = 2 Mb/s, power = 0 dBm
 800065c:	210e      	movs	r1, #14
 800065e:	2006      	movs	r0, #6
 8000660:	f7ff ff78 	bl	8000554 <nrf24_WriteReg>

	//Enable the chip after configuring the device
	CE_Enable();
 8000664:	f7ff ff5e 	bl	8000524 <CE_Enable>

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <NRF24_RxMode>:

//////////////////////////////////////////////////////////////////////////////////////////////end of tx

//setup Rx mode
void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
	//disable the chip before configuring the device
	CE_Disable();
 8000678:	f7ff ff60 	bl	800053c <CE_Disable>

	nrf24_WriteReg(RF_CH, channel);   //select the channel
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	4619      	mov	r1, r3
 8000680:	2005      	movs	r0, #5
 8000682:	f7ff ff67 	bl	8000554 <nrf24_WriteReg>

	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000686:	2002      	movs	r0, #2
 8000688:	f7ff ffac 	bl	80005e4 <nrf24_ReadReg>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	en_rxaddr |= (1<<1);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);          //enable data pipe 1
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	4619      	mov	r1, r3
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff ff59 	bl	8000554 <nrf24_WriteReg>
	nrf24_WriteReg_Multi(RX_ADDR_P1, Address, 5);  //write rx pipe address
 80006a2:	2205      	movs	r2, #5
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	200b      	movs	r0, #11
 80006a8:	f7ff ff76 	bl	8000598 <nrf24_WriteReg_Multi>

	nrf24_WriteReg(RX_PW_P1, 32);     //set size of payload to 32 byte
 80006ac:	2120      	movs	r1, #32
 80006ae:	2012      	movs	r0, #18
 80006b0:	f7ff ff50 	bl	8000554 <nrf24_WriteReg>

	//power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff95 	bl	80005e4 <nrf24_ReadReg>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73bb      	strb	r3, [r7, #14]
	config |= (1<<1) | (1<<0);
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	f043 0303 	orr.w	r3, r3, #3
 80006c4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ff42 	bl	8000554 <nrf24_WriteReg>

	//Enable the chip after configuring the device
	CE_Enable();
 80006d0:	f7ff ff28 	bl	8000524 <CE_Enable>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <isDataAvailable>:

uint8_t isDataAvailable (int pipenum)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80006e4:	2007      	movs	r0, #7
 80006e6:	f7ff ff7d 	bl	80005e4 <nrf24_ReadReg>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if((status & (1<<6)) && status & (pipenum<<1))
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00b      	beq.n	8000710 <isDataAvailable+0x34>
 80006f8:	7bfa      	ldrb	r2, [r7, #15]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4013      	ands	r3, r2
 8000700:	2b00      	cmp	r3, #0
 8000702:	d005      	beq.n	8000710 <isDataAvailable+0x34>
	{
		nrf24_WriteReg(STATUS, (1<<6));            //clear bit
 8000704:	2140      	movs	r1, #64	@ 0x40
 8000706:	2007      	movs	r0, #7
 8000708:	f7ff ff24 	bl	8000554 <nrf24_WriteReg>
		return 1;
 800070c:	2301      	movs	r3, #1
 800070e:	e000      	b.n	8000712 <isDataAvailable+0x36>
	}
	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <NRF24_Receive>:

//receive the data
uint8_t NRF24_Receive(uint8_t *data)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]

	//select device
	CS_Select();
 8000728:	f7ff fee4 	bl	80004f4 <CS_Select>

	//payload command
	cmdtosend = R_RX_PAYLOAD;
 800072c:	2361      	movs	r3, #97	@ 0x61
 800072e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000730:	f107 010f 	add.w	r1, r7, #15
 8000734:	2364      	movs	r3, #100	@ 0x64
 8000736:	2201      	movs	r2, #1
 8000738:	480e      	ldr	r0, [pc, #56]	@ (8000774 <NRF24_Receive+0x58>)
 800073a:	f001 fa9a 	bl	8001c72 <HAL_SPI_Transmit>

	//send payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 800073e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000742:	2220      	movs	r2, #32
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <NRF24_Receive+0x58>)
 8000748:	f001 fbd7 	bl	8001efa <HAL_SPI_Receive>

	//unselect device
	CS_UnSelect();
 800074c:	f7ff fede 	bl	800050c <CS_UnSelect>

	HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fb01 	bl	8000d58 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000756:	23e2      	movs	r3, #226	@ 0xe2
 8000758:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800075a:	f107 010f 	add.w	r1, r7, #15
 800075e:	2364      	movs	r3, #100	@ 0x64
 8000760:	2201      	movs	r2, #1
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <NRF24_Receive+0x58>)
 8000764:	f001 fa85 	bl	8001c72 <HAL_SPI_Transmit>
}
 8000768:	bf00      	nop
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000050 	.word	0x20000050

08000778 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_GPIO_Init+0xc0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a28      	ldr	r2, [pc, #160]	@ (8000838 <MX_GPIO_Init+0xc0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_GPIO_Init+0xc0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CS_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2106      	movs	r1, #6
 80007e6:	4815      	ldr	r0, [pc, #84]	@ (800083c <MX_GPIO_Init+0xc4>)
 80007e8:	f000 fd3c 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2106      	movs	r1, #6
 80007f0:	4813      	ldr	r0, [pc, #76]	@ (8000840 <MX_GPIO_Init+0xc8>)
 80007f2:	f000 fd37 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CE_Pin|CS_Pin;
 80007f6:	2306      	movs	r3, #6
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_GPIO_Init+0xc4>)
 800080e:	f000 fbad 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000812:	2306      	movs	r3, #6
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0xc8>)
 800082a:	f000 fb9f 	bl	8000f6c <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020400 	.word	0x40020400

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fa14 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f82a 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff ff92 	bl	8000778 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000854:	f000 f88a 	bl	800096c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000858:	f000 f970 	bl	8000b3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 800085c:	f7ff fee2 	bl	8000624 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 8000860:	210a      	movs	r1, #10
 8000862:	480d      	ldr	r0, [pc, #52]	@ (8000898 <main+0x54>)
 8000864:	f7ff ff02 	bl	800066c <NRF24_RxMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataAvailable(1) == 1)
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff ff37 	bl	80006dc <isDataAvailable>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d1f9      	bne.n	8000868 <main+0x24>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2104      	movs	r1, #4
 8000878:	4808      	ldr	r0, [pc, #32]	@ (800089c <main+0x58>)
 800087a:	f000 fcf3 	bl	8001264 <HAL_GPIO_WritePin>
		  NRF24_Receive(RxData);
 800087e:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <main+0x5c>)
 8000880:	f7ff ff4c 	bl	800071c <NRF24_Receive>
		  if(RxData[0]==1)
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <main+0x5c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d1ed      	bne.n	8000868 <main+0x24>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2102      	movs	r1, #2
 8000890:	4802      	ldr	r0, [pc, #8]	@ (800089c <main+0x58>)
 8000892:	f000 fce7 	bl	8001264 <HAL_GPIO_WritePin>
	  if (isDataAvailable(1) == 1)
 8000896:	e7e7      	b.n	8000868 <main+0x24>
 8000898:	20000000 	.word	0x20000000
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000030 	.word	0x20000030

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	@ 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f9ea 	bl	8002c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <SystemClock_Config+0xb4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xb4>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xb4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <SystemClock_Config+0xb8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <SystemClock_Config+0xb8>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <SystemClock_Config+0xb8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fe9f 	bl	8001658 <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000920:	f000 f81e 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fcaa 	bl	8001298 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800094a:	f000 f809 	bl	8000960 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_SPI1_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	@ (80009d4 <MX_SPI1_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_SPI1_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_SPI1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_SPI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_SPI1_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_SPI1_Init+0x64>)
 80009a0:	2208      	movs	r2, #8
 80009a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_SPI1_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_SPI1_Init+0x64>)
 80009be:	f001 f8cf 	bl	8001b60 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c8:	f7ff ffca 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000050 	.word	0x20000050
 80009d4:	40013000 	.word	0x40013000

080009d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_SPI_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12b      	bne.n	8000a52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a32:	23e0      	movs	r3, #224	@ 0xe0
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a42:	2305      	movs	r3, #5
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_SPI_MspInit+0x8c>)
 8000a4e:	f000 fa8d 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40013000 	.word	0x40013000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f903 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <MX_USART2_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f001 fdc6 	bl	8002704 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f7ff feef 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	40004400 	.word	0x40004400

08000b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	@ (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c06:	f000 f9b1 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c24:	f7ff ff78 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 f825 	bl	8002c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fdf7 	bl	8000844 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c58:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c64:	08002d24 	.word	0x08002d24
  ldr r2, =_sbss
 8000c68:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c6c:	200000f4 	.word	0x200000f4

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f931 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fede 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f93b 	bl	8000f52 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f911 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000010 	.word	0x20000010
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	200000f0 	.word	0x200000f0

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000f0 	.word	0x200000f0

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000010 	.word	0x20000010

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	@ (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	@ (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	@ 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	@ 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff47 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff5c 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffb0 	bl	8000ec0 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e153      	b.n	8001230 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 8142 	bne.w	800122a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 809c 	beq.w	800122a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b54      	ldr	r3, [pc, #336]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a53      	ldr	r2, [pc, #332]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b51      	ldr	r3, [pc, #324]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110e:	4a4f      	ldr	r2, [pc, #316]	@ (800124c <HAL_GPIO_Init+0x2e0>)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x1f2>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a44      	ldr	r2, [pc, #272]	@ (8001258 <HAL_GPIO_Init+0x2ec>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x1ee>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a43      	ldr	r2, [pc, #268]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x1ea>
 8001152:	2303      	movs	r3, #3
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x1f8>
 8001156:	2307      	movs	r3, #7
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x1f8>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x1f8>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x1f8>
 8001162:	2300      	movs	r3, #0
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001174:	4935      	ldr	r1, [pc, #212]	@ (800124c <HAL_GPIO_Init+0x2e0>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d6:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fa:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001224:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	f67f aea8 	bls.w	8000f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0cc      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b68      	ldr	r3, [pc, #416]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d90c      	bls.n	80012d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b65      	ldr	r3, [pc, #404]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0b8      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ec:	4b59      	ldr	r3, [pc, #356]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a58      	ldr	r2, [pc, #352]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001304:	4b53      	ldr	r3, [pc, #332]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a52      	ldr	r2, [pc, #328]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800130e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	4b50      	ldr	r3, [pc, #320]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	494d      	ldr	r1, [pc, #308]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d044      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d119      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e07f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d003      	beq.n	8001356 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001352:	2b03      	cmp	r3, #3
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b3f      	ldr	r3, [pc, #252]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e06f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3b      	ldr	r3, [pc, #236]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e067      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4934      	ldr	r1, [pc, #208]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fcda 	bl	8000d40 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fcd6 	bl	8000d40 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e04f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d20c      	bcs.n	80013e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e032      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4916      	ldr	r1, [pc, #88]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	490e      	ldr	r1, [pc, #56]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	4313      	orrs	r3, r2
 800141c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141e:	f000 f821 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 8001422:	4602      	mov	r2, r0
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	490a      	ldr	r1, [pc, #40]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	5ccb      	ldrb	r3, [r1, r3]
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc3a 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00
 8001454:	40023800 	.word	0x40023800
 8001458:	08002cfc 	.word	0x08002cfc
 800145c:	20000008 	.word	0x20000008
 8001460:	2000000c 	.word	0x2000000c

08001464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001468:	b090      	sub	sp, #64	@ 0x40
 800146a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147c:	4b59      	ldr	r3, [pc, #356]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d00d      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001488:	2b08      	cmp	r3, #8
 800148a:	f200 80a1 	bhi.w	80015d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x34>
 8001492:	2b04      	cmp	r3, #4
 8001494:	d003      	beq.n	800149e <HAL_RCC_GetSysClockFreq+0x3a>
 8001496:	e09b      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800149a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800149c:	e09b      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800149e:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x188>)
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014a2:	e098      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a4:	4b4f      	ldr	r3, [pc, #316]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ae:	4b4d      	ldr	r3, [pc, #308]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d028      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	099b      	lsrs	r3, r3, #6
 80014c0:	2200      	movs	r2, #0
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014cc:	2100      	movs	r1, #0
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x188>)
 80014d0:	fb03 f201 	mul.w	r2, r3, r1
 80014d4:	2300      	movs	r3, #0
 80014d6:	fb00 f303 	mul.w	r3, r0, r3
 80014da:	4413      	add	r3, r2
 80014dc:	4a43      	ldr	r2, [pc, #268]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x188>)
 80014de:	fba0 1202 	umull	r1, r2, r0, r2
 80014e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014e4:	460a      	mov	r2, r1
 80014e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80014e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ea:	4413      	add	r3, r2
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f0:	2200      	movs	r2, #0
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	61fa      	str	r2, [r7, #28]
 80014f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014fe:	f7fe fe81 	bl	8000204 <__aeabi_uldivmod>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4613      	mov	r3, r2
 8001508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800150a:	e053      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150c:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	2200      	movs	r2, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	617a      	str	r2, [r7, #20]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800151e:	f04f 0b00 	mov.w	fp, #0
 8001522:	4652      	mov	r2, sl
 8001524:	465b      	mov	r3, fp
 8001526:	f04f 0000 	mov.w	r0, #0
 800152a:	f04f 0100 	mov.w	r1, #0
 800152e:	0159      	lsls	r1, r3, #5
 8001530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001534:	0150      	lsls	r0, r2, #5
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ebb2 080a 	subs.w	r8, r2, sl
 800153e:	eb63 090b 	sbc.w	r9, r3, fp
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800154e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001552:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001556:	ebb2 0408 	subs.w	r4, r2, r8
 800155a:	eb63 0509 	sbc.w	r5, r3, r9
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	00eb      	lsls	r3, r5, #3
 8001568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800156c:	00e2      	lsls	r2, r4, #3
 800156e:	4614      	mov	r4, r2
 8001570:	461d      	mov	r5, r3
 8001572:	eb14 030a 	adds.w	r3, r4, sl
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	eb45 030b 	adc.w	r3, r5, fp
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800158a:	4629      	mov	r1, r5
 800158c:	028b      	lsls	r3, r1, #10
 800158e:	4621      	mov	r1, r4
 8001590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001594:	4621      	mov	r1, r4
 8001596:	028a      	lsls	r2, r1, #10
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159e:	2200      	movs	r2, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	60fa      	str	r2, [r7, #12]
 80015a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a8:	f7fe fe2c 	bl	8000204 <__aeabi_uldivmod>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4613      	mov	r3, r2
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	3301      	adds	r3, #1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80015c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80015d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3740      	adds	r7, #64	@ 0x40
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	00f42400 	.word	0x00f42400
 80015ec:	017d7840 	.word	0x017d7840

080015f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_RCC_GetHCLKFreq+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000008 	.word	0x20000008

08001608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800160c:	f7ff fff0 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0a9b      	lsrs	r3, r3, #10
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	@ (800162c <HAL_RCC_GetPCLK1Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	08002d0c 	.word	0x08002d0c

08001630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001634:	f7ff ffdc 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	@ (8001654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	08002d0c 	.word	0x08002d0c

08001658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e273      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d075      	beq.n	8001762 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001676:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d00c      	beq.n	800169c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b85      	ldr	r3, [pc, #532]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
        || \
 800168a:	2b08      	cmp	r3, #8
 800168c:	d112      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168e:	4b82      	ldr	r3, [pc, #520]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800169a:	d10b      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	4b7e      	ldr	r3, [pc, #504]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d05b      	beq.n	8001760 <HAL_RCC_OscConfig+0x108>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d157      	bne.n	8001760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e24e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x74>
 80016be:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a75      	ldr	r2, [pc, #468]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xb0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x98>
 80016d6:	4b70      	ldr	r3, [pc, #448]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6f      	ldr	r2, [pc, #444]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xb0>
 80016f0:	4b69      	ldr	r3, [pc, #420]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a68      	ldr	r2, [pc, #416]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b66      	ldr	r3, [pc, #408]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a65      	ldr	r2, [pc, #404]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fb16 	bl	8000d40 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fb12 	bl	8000d40 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	@ 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e213      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b5b      	ldr	r3, [pc, #364]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xc0>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fb02 	bl	8000d40 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fafe 	bl	8000d40 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	@ 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1ff      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0xe8>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d063      	beq.n	8001836 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800176e:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001782:	2b08      	cmp	r3, #8
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001786:	4b44      	ldr	r3, [pc, #272]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x152>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e1d3      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4937      	ldr	r1, [pc, #220]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e03a      	b.n	8001836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4b34      	ldr	r3, [pc, #208]	@ (800189c <HAL_RCC_OscConfig+0x244>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fab7 	bl	8000d40 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fab3 	bl	8000d40 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1b4      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4925      	ldr	r1, [pc, #148]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180a:	4b24      	ldr	r3, [pc, #144]	@ (800189c <HAL_RCC_OscConfig+0x244>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fa96 	bl	8000d40 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fa92 	bl	8000d40 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e193      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d036      	beq.n	80018b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d016      	beq.n	8001878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_RCC_OscConfig+0x248>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fa76 	bl	8000d40 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fa72 	bl	8000d40 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e173      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800186c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x200>
 8001876:	e01b      	b.n	80018b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_RCC_OscConfig+0x248>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fa5f 	bl	8000d40 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	e00e      	b.n	80018a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff fa5b 	bl	8000d40 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d907      	bls.n	80018a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e15c      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
 8001898:	40023800 	.word	0x40023800
 800189c:	42470000 	.word	0x42470000
 80018a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80018a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ea      	bne.n	8001886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8097 	beq.w	80019ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b83      	ldr	r3, [pc, #524]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10f      	bne.n	80018ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ee:	4b79      	ldr	r3, [pc, #484]	@ (8001ad4 <HAL_RCC_OscConfig+0x47c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fa:	4b76      	ldr	r3, [pc, #472]	@ (8001ad4 <HAL_RCC_OscConfig+0x47c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a75      	ldr	r2, [pc, #468]	@ (8001ad4 <HAL_RCC_OscConfig+0x47c>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7ff fa1b 	bl	8000d40 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fa17 	bl	8000d40 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e118      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad4 <HAL_RCC_OscConfig+0x47c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x2ea>
 8001934:	4b66      	ldr	r3, [pc, #408]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	4a65      	ldr	r2, [pc, #404]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001940:	e01c      	b.n	800197c <HAL_RCC_OscConfig+0x324>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b05      	cmp	r3, #5
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x30c>
 800194a:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	4a60      	ldr	r2, [pc, #384]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6713      	str	r3, [r2, #112]	@ 0x70
 8001956:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6713      	str	r3, [r2, #112]	@ 0x70
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0x324>
 8001964:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001968:	4a59      	ldr	r2, [pc, #356]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001970:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001976:	f023 0304 	bic.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d015      	beq.n	80019b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f9dc 	bl	8000d40 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f9d8 	bl	8000d40 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0d7      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0ee      	beq.n	800198c <HAL_RCC_OscConfig+0x334>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f9c6 	bl	8000d40 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff f9c2 	bl	8000d40 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0c1      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ce:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ee      	bne.n	80019b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80ad 	beq.w	8001b50 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f6:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d060      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d145      	bne.n	8001a96 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_RCC_OscConfig+0x480>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f996 	bl	8000d40 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f992 	bl	8000d40 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e093      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	019b      	lsls	r3, r3, #6
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	071b      	lsls	r3, r3, #28
 8001a62:	491b      	ldr	r1, [pc, #108]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x480>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f967 	bl	8000d40 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff f963 	bl	8000d40 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e064      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x41e>
 8001a94:	e05c      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_RCC_OscConfig+0x480>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f950 	bl	8000d40 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f94c 	bl	8000d40 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04d      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x44c>
 8001ac2:	e045      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e040      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_RCC_OscConfig+0x504>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d030      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d129      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d122      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d119      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10f      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07b      	b.n	8001c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b82:	d009      	beq.n	8001b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
 8001b8a:	e005      	b.n	8001b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe ff10 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1c:	ea42 0103 	orr.w	r1, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0104 	and.w	r1, r3, #4
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f003 0210 	and.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c82:	f7ff f85d 	bl	8000d40 <HAL_GetTick>
 8001c86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e12a      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_SPI_Transmit+0x36>
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e122      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_SPI_Transmit+0x48>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e11b      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d08:	d10f      	bne.n	8001d2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d34:	2b40      	cmp	r3, #64	@ 0x40
 8001d36:	d007      	beq.n	8001d48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d50:	d152      	bne.n	8001df8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_SPI_Transmit+0xee>
 8001d5a:	8b7b      	ldrh	r3, [r7, #26]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d145      	bne.n	8001dec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	1c9a      	adds	r2, r3, #2
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d84:	e032      	b.n	8001dec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d112      	bne.n	8001dba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	1c9a      	adds	r2, r3, #2
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001db8:	e018      	b.n	8001dec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dba:	f7fe ffc1 	bl	8000d40 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d803      	bhi.n	8001dd2 <HAL_SPI_Transmit+0x160>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d102      	bne.n	8001dd8 <HAL_SPI_Transmit+0x166>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e082      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1c7      	bne.n	8001d86 <HAL_SPI_Transmit+0x114>
 8001df6:	e053      	b.n	8001ea0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_SPI_Transmit+0x194>
 8001e00:	8b7b      	ldrh	r3, [r7, #26]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d147      	bne.n	8001e96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	330c      	adds	r3, #12
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e2c:	e033      	b.n	8001e96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d113      	bne.n	8001e64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	330c      	adds	r3, #12
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e62:	e018      	b.n	8001e96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e64:	f7fe ff6c 	bl	8000d40 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d803      	bhi.n	8001e7c <HAL_SPI_Transmit+0x20a>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d102      	bne.n	8001e82 <HAL_SPI_Transmit+0x210>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e02d      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1c6      	bne.n	8001e2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fbd9 	bl	800265c <SPI_EndRxTxTransaction>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b088      	sub	sp, #32
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	e104      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f22:	d112      	bne.n	8001f4a <HAL_SPI_Receive+0x50>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10e      	bne.n	8001f4a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f8f3 	bl	800212c <HAL_SPI_TransmitReceive>
 8001f46:	4603      	mov	r3, r0
 8001f48:	e0ec      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f4a:	f7fe fef9 	bl	8000d40 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_SPI_Receive+0x62>
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0e1      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_SPI_Receive+0x74>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0da      	b.n	8002124 <HAL_SPI_Receive+0x22a>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fbc:	d10f      	bne.n	8001fde <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe8:	2b40      	cmp	r3, #64	@ 0x40
 8001fea:	d007      	beq.n	8001ffc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d170      	bne.n	80020e6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002004:	e035      	b.n	8002072 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d115      	bne.n	8002040 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f103 020c 	add.w	r2, r3, #12
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800203e:	e018      	b.n	8002072 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002040:	f7fe fe7e 	bl	8000d40 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d803      	bhi.n	8002058 <HAL_SPI_Receive+0x15e>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d102      	bne.n	800205e <HAL_SPI_Receive+0x164>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e058      	b.n	8002124 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1c4      	bne.n	8002006 <HAL_SPI_Receive+0x10c>
 800207c:	e038      	b.n	80020f0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d113      	bne.n	80020b4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	b292      	uxth	r2, r2
 8002098:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020b2:	e018      	b.n	80020e6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b4:	f7fe fe44 	bl	8000d40 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d803      	bhi.n	80020cc <HAL_SPI_Receive+0x1d2>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d102      	bne.n	80020d2 <HAL_SPI_Receive+0x1d8>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e01e      	b.n	8002124 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1c6      	bne.n	800207e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fa4b 	bl	8002590 <SPI_EndRxTransaction>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002122:	2300      	movs	r3, #0
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800213a:	2301      	movs	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800213e:	f7fe fdff 	bl	8000d40 <HAL_GetTick>
 8002142:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800214a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002156:	7ffb      	ldrb	r3, [r7, #31]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d00c      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x4a>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002162:	d106      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x46>
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d001      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	e17f      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x5c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x5c>
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e174      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_SPI_TransmitReceive+0x6e>
 8002196:	2302      	movs	r3, #2
 8002198:	e16d      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2205      	movs	r2, #5
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	2b40      	cmp	r3, #64	@ 0x40
 80021f8:	d007      	beq.n	800220a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002212:	d17e      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_TransmitReceive+0xf6>
 800221c:	8afb      	ldrh	r3, [r7, #22]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d16c      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	1c9a      	adds	r2, r3, #2
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002246:	e059      	b.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d11b      	bne.n	800228e <HAL_SPI_TransmitReceive+0x162>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <HAL_SPI_TransmitReceive+0x162>
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	2b01      	cmp	r3, #1
 8002264:	d113      	bne.n	800228e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	1c9a      	adds	r2, r3, #2
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d119      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x1a4>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d014      	beq.n	80022d0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	b292      	uxth	r2, r2
 80022b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022cc:	2301      	movs	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022d0:	f7fe fd36 	bl	8000d40 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022dc:	429a      	cmp	r2, r3
 80022de:	d80d      	bhi.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d009      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0bc      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1a0      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x11c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d19b      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x11c>
 8002310:	e082      	b.n	8002418 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x1f4>
 800231a:	8afb      	ldrh	r3, [r7, #22]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d171      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	330c      	adds	r3, #12
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	e05d      	b.n	8002404 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d11c      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x264>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d017      	beq.n	8002390 <HAL_SPI_TransmitReceive+0x264>
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	2b01      	cmp	r3, #1
 8002364:	d114      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	330c      	adds	r3, #12
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d119      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x2a6>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d014      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ce:	2301      	movs	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023d2:	f7fe fcb5 	bl	8000d40 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023de:	429a      	cmp	r2, r3
 80023e0:	d803      	bhi.n	80023ea <HAL_SPI_TransmitReceive+0x2be>
 80023e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d102      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x2c4>
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e038      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d19c      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x21c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d197      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f91d 	bl	800265c <SPI_EndRxTxTransaction>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01d      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002474:	2300      	movs	r3, #0
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3728      	adds	r7, #40	@ 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002490:	f7fe fc56 	bl	8000d40 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024a0:	f7fe fc4e 	bl	8000d40 <HAL_GetTick>
 80024a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	0d1b      	lsrs	r3, r3, #20
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b6:	e054      	b.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024be:	d050      	beq.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024c0:	f7fe fc3e 	bl	8000d40 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d902      	bls.n	80024d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13d      	bne.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024ee:	d111      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f8:	d004      	beq.n	8002504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002502:	d107      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800251c:	d10f      	bne.n	800253e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800253c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e017      	b.n	8002582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3b01      	subs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4013      	ands	r3, r2
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	429a      	cmp	r2, r3
 800257e:	d19b      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000008 	.word	0x20000008

08002590 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a4:	d111      	bne.n	80025ca <SPI_EndRxTransaction+0x3a>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ae:	d004      	beq.n	80025ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b8:	d107      	bne.n	80025ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025d2:	d12a      	bne.n	800262a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d012      	beq.n	8002604 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff49 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02d      	beq.n	8002650 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e026      	b.n	8002652 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ff36 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01a      	beq.n	8002650 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e013      	b.n	8002652 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	2101      	movs	r1, #1
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff ff23 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e000      	b.n	8002652 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2201      	movs	r2, #1
 8002670:	2102      	movs	r1, #2
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff04 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e032      	b.n	80026f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <SPI_EndRxTxTransaction+0xa0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1b      	ldr	r2, [pc, #108]	@ (8002700 <SPI_EndRxTxTransaction+0xa4>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	0d5b      	lsrs	r3, r3, #21
 800269a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ac:	d112      	bne.n	80026d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	@ 0x80
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff fee1 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e00f      	b.n	80026f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3b01      	subs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d0f2      	beq.n	80026d4 <SPI_EndRxTxTransaction+0x78>
 80026ee:	e000      	b.n	80026f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80026f0:	bf00      	nop
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000008 	.word	0x20000008
 8002700:	165e9f81 	.word	0x165e9f81

08002704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e042      	b.n	800279c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fa30 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	@ 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f82b 	bl	80027a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800275c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800276c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800277c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a8:	b0c0      	sub	sp, #256	@ 0x100
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	ea40 0301 	orr.w	r3, r0, r1
 80027cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	431a      	orrs	r2, r3
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80027fc:	f021 010c 	bic.w	r1, r1, #12
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800280a:	430b      	orrs	r3, r1
 800280c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281e:	6999      	ldr	r1, [r3, #24]
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	ea40 0301 	orr.w	r3, r0, r1
 800282a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b8f      	ldr	r3, [pc, #572]	@ (8002a70 <UART_SetConfig+0x2cc>)
 8002834:	429a      	cmp	r2, r3
 8002836:	d005      	beq.n	8002844 <UART_SetConfig+0xa0>
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a74 <UART_SetConfig+0x2d0>)
 8002840:	429a      	cmp	r2, r3
 8002842:	d104      	bne.n	800284e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002844:	f7fe fef4 	bl	8001630 <HAL_RCC_GetPCLK2Freq>
 8002848:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800284c:	e003      	b.n	8002856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800284e:	f7fe fedb 	bl	8001608 <HAL_RCC_GetPCLK1Freq>
 8002852:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002860:	f040 810c 	bne.w	8002a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002868:	2200      	movs	r2, #0
 800286a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800286e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002876:	4622      	mov	r2, r4
 8002878:	462b      	mov	r3, r5
 800287a:	1891      	adds	r1, r2, r2
 800287c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800287e:	415b      	adcs	r3, r3
 8002880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002886:	4621      	mov	r1, r4
 8002888:	eb12 0801 	adds.w	r8, r2, r1
 800288c:	4629      	mov	r1, r5
 800288e:	eb43 0901 	adc.w	r9, r3, r1
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	eb18 0303 	adds.w	r3, r8, r3
 80028b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028b4:	462b      	mov	r3, r5
 80028b6:	eb49 0303 	adc.w	r3, r9, r3
 80028ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028d2:	460b      	mov	r3, r1
 80028d4:	18db      	adds	r3, r3, r3
 80028d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80028d8:	4613      	mov	r3, r2
 80028da:	eb42 0303 	adc.w	r3, r2, r3
 80028de:	657b      	str	r3, [r7, #84]	@ 0x54
 80028e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028e8:	f7fd fc8c 	bl	8000204 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4b61      	ldr	r3, [pc, #388]	@ (8002a78 <UART_SetConfig+0x2d4>)
 80028f2:	fba3 2302 	umull	r2, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	011c      	lsls	r4, r3, #4
 80028fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002904:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002914:	415b      	adcs	r3, r3
 8002916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800291c:	4641      	mov	r1, r8
 800291e:	eb12 0a01 	adds.w	sl, r2, r1
 8002922:	4649      	mov	r1, r9
 8002924:	eb43 0b01 	adc.w	fp, r3, r1
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800293c:	4692      	mov	sl, r2
 800293e:	469b      	mov	fp, r3
 8002940:	4643      	mov	r3, r8
 8002942:	eb1a 0303 	adds.w	r3, sl, r3
 8002946:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800294a:	464b      	mov	r3, r9
 800294c:	eb4b 0303 	adc.w	r3, fp, r3
 8002950:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002960:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002968:	460b      	mov	r3, r1
 800296a:	18db      	adds	r3, r3, r3
 800296c:	643b      	str	r3, [r7, #64]	@ 0x40
 800296e:	4613      	mov	r3, r2
 8002970:	eb42 0303 	adc.w	r3, r2, r3
 8002974:	647b      	str	r3, [r7, #68]	@ 0x44
 8002976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800297a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800297e:	f7fd fc41 	bl	8000204 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4611      	mov	r1, r2
 8002988:	4b3b      	ldr	r3, [pc, #236]	@ (8002a78 <UART_SetConfig+0x2d4>)
 800298a:	fba3 2301 	umull	r2, r3, r3, r1
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2264      	movs	r2, #100	@ 0x64
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	1acb      	subs	r3, r1, r3
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800299e:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <UART_SetConfig+0x2d4>)
 80029a0:	fba3 2302 	umull	r2, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029ac:	441c      	add	r4, r3
 80029ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029c0:	4642      	mov	r2, r8
 80029c2:	464b      	mov	r3, r9
 80029c4:	1891      	adds	r1, r2, r2
 80029c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029c8:	415b      	adcs	r3, r3
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029d0:	4641      	mov	r1, r8
 80029d2:	1851      	adds	r1, r2, r1
 80029d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80029d6:	4649      	mov	r1, r9
 80029d8:	414b      	adcs	r3, r1
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029e8:	4659      	mov	r1, fp
 80029ea:	00cb      	lsls	r3, r1, #3
 80029ec:	4651      	mov	r1, sl
 80029ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f2:	4651      	mov	r1, sl
 80029f4:	00ca      	lsls	r2, r1, #3
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	4642      	mov	r2, r8
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a04:	464b      	mov	r3, r9
 8002a06:	460a      	mov	r2, r1
 8002a08:	eb42 0303 	adc.w	r3, r2, r3
 8002a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a24:	460b      	mov	r3, r1
 8002a26:	18db      	adds	r3, r3, r3
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	eb42 0303 	adc.w	r3, r2, r3
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a3a:	f7fd fbe3 	bl	8000204 <__aeabi_uldivmod>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <UART_SetConfig+0x2d4>)
 8002a44:	fba3 1302 	umull	r1, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	2164      	movs	r1, #100	@ 0x64
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	3332      	adds	r3, #50	@ 0x32
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <UART_SetConfig+0x2d4>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	f003 0207 	and.w	r2, r3, #7
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4422      	add	r2, r4
 8002a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a6c:	e106      	b.n	8002c7c <UART_SetConfig+0x4d8>
 8002a6e:	bf00      	nop
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40011400 	.word	0x40011400
 8002a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a8e:	4642      	mov	r2, r8
 8002a90:	464b      	mov	r3, r9
 8002a92:	1891      	adds	r1, r2, r2
 8002a94:	6239      	str	r1, [r7, #32]
 8002a96:	415b      	adcs	r3, r3
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a9e:	4641      	mov	r1, r8
 8002aa0:	1854      	adds	r4, r2, r1
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	eb43 0501 	adc.w	r5, r3, r1
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	00eb      	lsls	r3, r5, #3
 8002ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab6:	00e2      	lsls	r2, r4, #3
 8002ab8:	4614      	mov	r4, r2
 8002aba:	461d      	mov	r5, r3
 8002abc:	4643      	mov	r3, r8
 8002abe:	18e3      	adds	r3, r4, r3
 8002ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	eb45 0303 	adc.w	r3, r5, r3
 8002aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002aea:	4629      	mov	r1, r5
 8002aec:	008b      	lsls	r3, r1, #2
 8002aee:	4621      	mov	r1, r4
 8002af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002af4:	4621      	mov	r1, r4
 8002af6:	008a      	lsls	r2, r1, #2
 8002af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002afc:	f7fd fb82 	bl	8000204 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4b60      	ldr	r3, [pc, #384]	@ (8002c88 <UART_SetConfig+0x4e4>)
 8002b06:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	011c      	lsls	r4, r3, #4
 8002b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	1891      	adds	r1, r2, r2
 8002b26:	61b9      	str	r1, [r7, #24]
 8002b28:	415b      	adcs	r3, r3
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b30:	4641      	mov	r1, r8
 8002b32:	1851      	adds	r1, r2, r1
 8002b34:	6139      	str	r1, [r7, #16]
 8002b36:	4649      	mov	r1, r9
 8002b38:	414b      	adcs	r3, r1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b48:	4659      	mov	r1, fp
 8002b4a:	00cb      	lsls	r3, r1, #3
 8002b4c:	4651      	mov	r1, sl
 8002b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b52:	4651      	mov	r1, sl
 8002b54:	00ca      	lsls	r2, r1, #3
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b64:	464b      	mov	r3, r9
 8002b66:	460a      	mov	r2, r1
 8002b68:	eb42 0303 	adc.w	r3, r2, r3
 8002b6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b88:	4649      	mov	r1, r9
 8002b8a:	008b      	lsls	r3, r1, #2
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b92:	4641      	mov	r1, r8
 8002b94:	008a      	lsls	r2, r1, #2
 8002b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b9a:	f7fd fb33 	bl	8000204 <__aeabi_uldivmod>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <UART_SetConfig+0x4e4>)
 8002ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2264      	movs	r2, #100	@ 0x64
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	1acb      	subs	r3, r1, r3
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	3332      	adds	r3, #50	@ 0x32
 8002bb8:	4a33      	ldr	r2, [pc, #204]	@ (8002c88 <UART_SetConfig+0x4e4>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc4:	441c      	add	r4, r3
 8002bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bca:	2200      	movs	r2, #0
 8002bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bce:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	1891      	adds	r1, r2, r2
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	415b      	adcs	r3, r3
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be4:	4641      	mov	r1, r8
 8002be6:	1851      	adds	r1, r2, r1
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	4649      	mov	r1, r9
 8002bec:	414b      	adcs	r3, r1
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	00cb      	lsls	r3, r1, #3
 8002c00:	4651      	mov	r1, sl
 8002c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c06:	4651      	mov	r1, sl
 8002c08:	00ca      	lsls	r2, r1, #3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4642      	mov	r2, r8
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c16:	464b      	mov	r3, r9
 8002c18:	460a      	mov	r2, r1
 8002c1a:	eb42 0303 	adc.w	r3, r2, r3
 8002c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c38:	4649      	mov	r1, r9
 8002c3a:	008b      	lsls	r3, r1, #2
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c42:	4641      	mov	r1, r8
 8002c44:	008a      	lsls	r2, r1, #2
 8002c46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c4a:	f7fd fadb 	bl	8000204 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <UART_SetConfig+0x4e4>)
 8002c54:	fba3 1302 	umull	r1, r3, r3, r2
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	2164      	movs	r1, #100	@ 0x64
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	3332      	adds	r3, #50	@ 0x32
 8002c66:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <UART_SetConfig+0x4e4>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4422      	add	r2, r4
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c82:	46bd      	mov	sp, r7
 8002c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c88:	51eb851f 	.word	0x51eb851f

08002c8c <memset>:
 8002c8c:	4402      	add	r2, r0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d100      	bne.n	8002c96 <memset+0xa>
 8002c94:	4770      	bx	lr
 8002c96:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9a:	e7f9      	b.n	8002c90 <memset+0x4>

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002cd4 <__libc_init_array+0x38>)
 8002ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8002cd8 <__libc_init_array+0x3c>)
 8002ca2:	1b64      	subs	r4, r4, r5
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	42a6      	cmp	r6, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	4d0b      	ldr	r5, [pc, #44]	@ (8002cdc <__libc_init_array+0x40>)
 8002cae:	4c0c      	ldr	r4, [pc, #48]	@ (8002ce0 <__libc_init_array+0x44>)
 8002cb0:	f000 f818 	bl	8002ce4 <_init>
 8002cb4:	1b64      	subs	r4, r4, r5
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	2600      	movs	r6, #0
 8002cba:	42a6      	cmp	r6, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc4:	4798      	blx	r3
 8002cc6:	3601      	adds	r6, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cce:	4798      	blx	r3
 8002cd0:	3601      	adds	r6, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002d1c 	.word	0x08002d1c
 8002cd8:	08002d1c 	.word	0x08002d1c
 8002cdc:	08002d1c 	.word	0x08002d1c
 8002ce0:	08002d20 	.word	0x08002d20

08002ce4 <_init>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr

08002cf0 <_fini>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr
